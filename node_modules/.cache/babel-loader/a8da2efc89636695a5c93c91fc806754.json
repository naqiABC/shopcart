{"ast":null,"code":"/**\n * @remix-run/router v1.11.0\n *\n * Copyright (c) Remix Software Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE.md file in the root directory of this source tree.\n *\n * @license MIT\n */\nfunction _extends() {\n  _extends = Object.assign ? Object.assign.bind() : function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n  return _extends.apply(this, arguments);\n} ////////////////////////////////////////////////////////////////////////////////\n//#region Types and Constants\n////////////////////////////////////////////////////////////////////////////////\n\n/**\n * Actions represent the type of change to a location value.\n */\n\n\nvar Action;\n\n(function (Action) {\n  /**\n   * A POP indicates a change to an arbitrary index in the history stack, such\n   * as a back or forward navigation. It does not describe the direction of the\n   * navigation, only that the current index changed.\n   *\n   * Note: This is the default action for newly created history objects.\n   */\n  Action[\"Pop\"] = \"POP\";\n  /**\n   * A PUSH indicates a new entry being added to the history stack, such as when\n   * a link is clicked and a new page loads. When this happens, all subsequent\n   * entries in the stack are lost.\n   */\n\n  Action[\"Push\"] = \"PUSH\";\n  /**\n   * A REPLACE indicates the entry at the current index in the history stack\n   * being replaced by a new one.\n   */\n\n  Action[\"Replace\"] = \"REPLACE\";\n})(Action || (Action = {}));\n\nconst PopStateEventType = \"popstate\";\n/**\n * Memory history stores the current location in memory. It is designed for use\n * in stateful non-browser environments like tests and React Native.\n */\n\nfunction createMemoryHistory(options) {\n  if (options === void 0) {\n    options = {};\n  }\n\n  let {\n    initialEntries = [\"/\"],\n    initialIndex,\n    v5Compat = false\n  } = options;\n  let entries; // Declare so we can access from createMemoryLocation\n\n  entries = initialEntries.map((entry, index) => createMemoryLocation(entry, typeof entry === \"string\" ? null : entry.state, index === 0 ? \"default\" : undefined));\n  let index = clampIndex(initialIndex == null ? entries.length - 1 : initialIndex);\n  let action = Action.Pop;\n  let listener = null;\n\n  function clampIndex(n) {\n    return Math.min(Math.max(n, 0), entries.length - 1);\n  }\n\n  function getCurrentLocation() {\n    return entries[index];\n  }\n\n  function createMemoryLocation(to, state, key) {\n    if (state === void 0) {\n      state = null;\n    }\n\n    let location = createLocation(entries ? getCurrentLocation().pathname : \"/\", to, state, key);\n    warning(location.pathname.charAt(0) === \"/\", \"relative pathnames are not supported in memory history: \" + JSON.stringify(to));\n    return location;\n  }\n\n  function createHref(to) {\n    return typeof to === \"string\" ? to : createPath(to);\n  }\n\n  let history = {\n    get index() {\n      return index;\n    },\n\n    get action() {\n      return action;\n    },\n\n    get location() {\n      return getCurrentLocation();\n    },\n\n    createHref,\n\n    createURL(to) {\n      return new URL(createHref(to), \"http://localhost\");\n    },\n\n    encodeLocation(to) {\n      let path = typeof to === \"string\" ? parsePath(to) : to;\n      return {\n        pathname: path.pathname || \"\",\n        search: path.search || \"\",\n        hash: path.hash || \"\"\n      };\n    },\n\n    push(to, state) {\n      action = Action.Push;\n      let nextLocation = createMemoryLocation(to, state);\n      index += 1;\n      entries.splice(index, entries.length, nextLocation);\n\n      if (v5Compat && listener) {\n        listener({\n          action,\n          location: nextLocation,\n          delta: 1\n        });\n      }\n    },\n\n    replace(to, state) {\n      action = Action.Replace;\n      let nextLocation = createMemoryLocation(to, state);\n      entries[index] = nextLocation;\n\n      if (v5Compat && listener) {\n        listener({\n          action,\n          location: nextLocation,\n          delta: 0\n        });\n      }\n    },\n\n    go(delta) {\n      action = Action.Pop;\n      let nextIndex = clampIndex(index + delta);\n      let nextLocation = entries[nextIndex];\n      index = nextIndex;\n\n      if (listener) {\n        listener({\n          action,\n          location: nextLocation,\n          delta\n        });\n      }\n    },\n\n    listen(fn) {\n      listener = fn;\n      return () => {\n        listener = null;\n      };\n    }\n\n  };\n  return history;\n}\n/**\n * Browser history stores the location in regular URLs. This is the standard for\n * most web apps, but it requires some configuration on the server to ensure you\n * serve the same app at multiple URLs.\n *\n * @see https://github.com/remix-run/history/tree/main/docs/api-reference.md#createbrowserhistory\n */\n\n\nfunction createBrowserHistory(options) {\n  if (options === void 0) {\n    options = {};\n  }\n\n  function createBrowserLocation(window, globalHistory) {\n    let {\n      pathname,\n      search,\n      hash\n    } = window.location;\n    return createLocation(\"\", {\n      pathname,\n      search,\n      hash\n    }, // state defaults to `null` because `window.history.state` does\n    globalHistory.state && globalHistory.state.usr || null, globalHistory.state && globalHistory.state.key || \"default\");\n  }\n\n  function createBrowserHref(window, to) {\n    return typeof to === \"string\" ? to : createPath(to);\n  }\n\n  return getUrlBasedHistory(createBrowserLocation, createBrowserHref, null, options);\n}\n/**\n * Hash history stores the location in window.location.hash. This makes it ideal\n * for situations where you don't want to send the location to the server for\n * some reason, either because you do cannot configure it or the URL space is\n * reserved for something else.\n *\n * @see https://github.com/remix-run/history/tree/main/docs/api-reference.md#createhashhistory\n */\n\n\nfunction createHashHistory(options) {\n  if (options === void 0) {\n    options = {};\n  }\n\n  function createHashLocation(window, globalHistory) {\n    let {\n      pathname = \"/\",\n      search = \"\",\n      hash = \"\"\n    } = parsePath(window.location.hash.substr(1)); // Hash URL should always have a leading / just like window.location.pathname\n    // does, so if an app ends up at a route like /#something then we add a\n    // leading slash so all of our path-matching behaves the same as if it would\n    // in a browser router.  This is particularly important when there exists a\n    // root splat route (<Route path=\"*\">) since that matches internally against\n    // \"/*\" and we'd expect /#something to 404 in a hash router app.\n\n    if (!pathname.startsWith(\"/\") && !pathname.startsWith(\".\")) {\n      pathname = \"/\" + pathname;\n    }\n\n    return createLocation(\"\", {\n      pathname,\n      search,\n      hash\n    }, // state defaults to `null` because `window.history.state` does\n    globalHistory.state && globalHistory.state.usr || null, globalHistory.state && globalHistory.state.key || \"default\");\n  }\n\n  function createHashHref(window, to) {\n    let base = window.document.querySelector(\"base\");\n    let href = \"\";\n\n    if (base && base.getAttribute(\"href\")) {\n      let url = window.location.href;\n      let hashIndex = url.indexOf(\"#\");\n      href = hashIndex === -1 ? url : url.slice(0, hashIndex);\n    }\n\n    return href + \"#\" + (typeof to === \"string\" ? to : createPath(to));\n  }\n\n  function validateHashLocation(location, to) {\n    warning(location.pathname.charAt(0) === \"/\", \"relative pathnames are not supported in hash history.push(\" + JSON.stringify(to) + \")\");\n  }\n\n  return getUrlBasedHistory(createHashLocation, createHashHref, validateHashLocation, options);\n}\n\nfunction invariant(value, message) {\n  if (value === false || value === null || typeof value === \"undefined\") {\n    throw new Error(message);\n  }\n}\n\nfunction warning(cond, message) {\n  if (!cond) {\n    // eslint-disable-next-line no-console\n    if (typeof console !== \"undefined\") console.warn(message);\n\n    try {\n      // Welcome to debugging history!\n      //\n      // This error is thrown as a convenience, so you can more easily\n      // find the source for a warning that appears in the console by\n      // enabling \"pause on exceptions\" in your JavaScript debugger.\n      throw new Error(message); // eslint-disable-next-line no-empty\n    } catch (e) {}\n  }\n}\n\nfunction createKey() {\n  return Math.random().toString(36).substr(2, 8);\n}\n/**\n * For browser-based histories, we combine the state and key into an object\n */\n\n\nfunction getHistoryState(location, index) {\n  return {\n    usr: location.state,\n    key: location.key,\n    idx: index\n  };\n}\n/**\n * Creates a Location object with a unique key from the given Path\n */\n\n\nfunction createLocation(current, to, state, key) {\n  if (state === void 0) {\n    state = null;\n  }\n\n  let location = _extends({\n    pathname: typeof current === \"string\" ? current : current.pathname,\n    search: \"\",\n    hash: \"\"\n  }, typeof to === \"string\" ? parsePath(to) : to, {\n    state,\n    // TODO: This could be cleaned up.  push/replace should probably just take\n    // full Locations now and avoid the need to run through this flow at all\n    // But that's a pretty big refactor to the current test suite so going to\n    // keep as is for the time being and just let any incoming keys take precedence\n    key: to && to.key || key || createKey()\n  });\n\n  return location;\n}\n/**\n * Creates a string URL path from the given pathname, search, and hash components.\n */\n\n\nfunction createPath(_ref) {\n  let {\n    pathname = \"/\",\n    search = \"\",\n    hash = \"\"\n  } = _ref;\n  if (search && search !== \"?\") pathname += search.charAt(0) === \"?\" ? search : \"?\" + search;\n  if (hash && hash !== \"#\") pathname += hash.charAt(0) === \"#\" ? hash : \"#\" + hash;\n  return pathname;\n}\n/**\n * Parses a string URL path into its separate pathname, search, and hash components.\n */\n\n\nfunction parsePath(path) {\n  let parsedPath = {};\n\n  if (path) {\n    let hashIndex = path.indexOf(\"#\");\n\n    if (hashIndex >= 0) {\n      parsedPath.hash = path.substr(hashIndex);\n      path = path.substr(0, hashIndex);\n    }\n\n    let searchIndex = path.indexOf(\"?\");\n\n    if (searchIndex >= 0) {\n      parsedPath.search = path.substr(searchIndex);\n      path = path.substr(0, searchIndex);\n    }\n\n    if (path) {\n      parsedPath.pathname = path;\n    }\n  }\n\n  return parsedPath;\n}\n\nfunction getUrlBasedHistory(getLocation, createHref, validateLocation, options) {\n  if (options === void 0) {\n    options = {};\n  }\n\n  let {\n    window = document.defaultView,\n    v5Compat = false\n  } = options;\n  let globalHistory = window.history;\n  let action = Action.Pop;\n  let listener = null;\n  let index = getIndex(); // Index should only be null when we initialize. If not, it's because the\n  // user called history.pushState or history.replaceState directly, in which\n  // case we should log a warning as it will result in bugs.\n\n  if (index == null) {\n    index = 0;\n    globalHistory.replaceState(_extends({}, globalHistory.state, {\n      idx: index\n    }), \"\");\n  }\n\n  function getIndex() {\n    let state = globalHistory.state || {\n      idx: null\n    };\n    return state.idx;\n  }\n\n  function handlePop() {\n    action = Action.Pop;\n    let nextIndex = getIndex();\n    let delta = nextIndex == null ? null : nextIndex - index;\n    index = nextIndex;\n\n    if (listener) {\n      listener({\n        action,\n        location: history.location,\n        delta\n      });\n    }\n  }\n\n  function push(to, state) {\n    action = Action.Push;\n    let location = createLocation(history.location, to, state);\n    if (validateLocation) validateLocation(location, to);\n    index = getIndex() + 1;\n    let historyState = getHistoryState(location, index);\n    let url = history.createHref(location); // try...catch because iOS limits us to 100 pushState calls :/\n\n    try {\n      globalHistory.pushState(historyState, \"\", url);\n    } catch (error) {\n      // If the exception is because `state` can't be serialized, let that throw\n      // outwards just like a replace call would so the dev knows the cause\n      // https://html.spec.whatwg.org/multipage/nav-history-apis.html#shared-history-push/replace-state-steps\n      // https://html.spec.whatwg.org/multipage/structured-data.html#structuredserializeinternal\n      if (error instanceof DOMException && error.name === \"DataCloneError\") {\n        throw error;\n      } // They are going to lose state here, but there is no real\n      // way to warn them about it since the page will refresh...\n\n\n      window.location.assign(url);\n    }\n\n    if (v5Compat && listener) {\n      listener({\n        action,\n        location: history.location,\n        delta: 1\n      });\n    }\n  }\n\n  function replace(to, state) {\n    action = Action.Replace;\n    let location = createLocation(history.location, to, state);\n    if (validateLocation) validateLocation(location, to);\n    index = getIndex();\n    let historyState = getHistoryState(location, index);\n    let url = history.createHref(location);\n    globalHistory.replaceState(historyState, \"\", url);\n\n    if (v5Compat && listener) {\n      listener({\n        action,\n        location: history.location,\n        delta: 0\n      });\n    }\n  }\n\n  function createURL(to) {\n    // window.location.origin is \"null\" (the literal string value) in Firefox\n    // under certain conditions, notably when serving from a local HTML file\n    // See https://bugzilla.mozilla.org/show_bug.cgi?id=878297\n    let base = window.location.origin !== \"null\" ? window.location.origin : window.location.href;\n    let href = typeof to === \"string\" ? to : createPath(to);\n    invariant(base, \"No window.location.(origin|href) available to create URL for href: \" + href);\n    return new URL(href, base);\n  }\n\n  let history = {\n    get action() {\n      return action;\n    },\n\n    get location() {\n      return getLocation(window, globalHistory);\n    },\n\n    listen(fn) {\n      if (listener) {\n        throw new Error(\"A history only accepts one active listener\");\n      }\n\n      window.addEventListener(PopStateEventType, handlePop);\n      listener = fn;\n      return () => {\n        window.removeEventListener(PopStateEventType, handlePop);\n        listener = null;\n      };\n    },\n\n    createHref(to) {\n      return createHref(window, to);\n    },\n\n    createURL,\n\n    encodeLocation(to) {\n      // Encode a Location the same way window.location would\n      let url = createURL(to);\n      return {\n        pathname: url.pathname,\n        search: url.search,\n        hash: url.hash\n      };\n    },\n\n    push,\n    replace,\n\n    go(n) {\n      return globalHistory.go(n);\n    }\n\n  };\n  return history;\n} //#endregion\n\n\nvar ResultType;\n\n(function (ResultType) {\n  ResultType[\"data\"] = \"data\";\n  ResultType[\"deferred\"] = \"deferred\";\n  ResultType[\"redirect\"] = \"redirect\";\n  ResultType[\"error\"] = \"error\";\n})(ResultType || (ResultType = {}));\n\nconst immutableRouteKeys = new Set([\"lazy\", \"caseSensitive\", \"path\", \"id\", \"index\", \"children\"]);\n\nfunction isIndexRoute(route) {\n  return route.index === true;\n} // Walk the route tree generating unique IDs where necessary, so we are working\n// solely with AgnosticDataRouteObject's within the Router\n\n\nfunction convertRoutesToDataRoutes(routes, mapRouteProperties, parentPath, manifest) {\n  if (parentPath === void 0) {\n    parentPath = [];\n  }\n\n  if (manifest === void 0) {\n    manifest = {};\n  }\n\n  return routes.map((route, index) => {\n    let treePath = [...parentPath, index];\n    let id = typeof route.id === \"string\" ? route.id : treePath.join(\"-\");\n    invariant(route.index !== true || !route.children, \"Cannot specify children on an index route\");\n    invariant(!manifest[id], \"Found a route id collision on id \\\"\" + id + \"\\\".  Route \" + \"id's must be globally unique within Data Router usages\");\n\n    if (isIndexRoute(route)) {\n      let indexRoute = _extends({}, route, mapRouteProperties(route), {\n        id\n      });\n\n      manifest[id] = indexRoute;\n      return indexRoute;\n    } else {\n      let pathOrLayoutRoute = _extends({}, route, mapRouteProperties(route), {\n        id,\n        children: undefined\n      });\n\n      manifest[id] = pathOrLayoutRoute;\n\n      if (route.children) {\n        pathOrLayoutRoute.children = convertRoutesToDataRoutes(route.children, mapRouteProperties, treePath, manifest);\n      }\n\n      return pathOrLayoutRoute;\n    }\n  });\n}\n/**\n * Matches the given routes to a location and returns the match data.\n *\n * @see https://reactrouter.com/utils/match-routes\n */\n\n\nfunction matchRoutes(routes, locationArg, basename) {\n  if (basename === void 0) {\n    basename = \"/\";\n  }\n\n  let location = typeof locationArg === \"string\" ? parsePath(locationArg) : locationArg;\n  let pathname = stripBasename(location.pathname || \"/\", basename);\n\n  if (pathname == null) {\n    return null;\n  }\n\n  let branches = flattenRoutes(routes);\n  rankRouteBranches(branches);\n  let matches = null;\n\n  for (let i = 0; matches == null && i < branches.length; ++i) {\n    matches = matchRouteBranch(branches[i], // Incoming pathnames are generally encoded from either window.location\n    // or from router.navigate, but we want to match against the unencoded\n    // paths in the route definitions.  Memory router locations won't be\n    // encoded here but there also shouldn't be anything to decode so this\n    // should be a safe operation.  This avoids needing matchRoutes to be\n    // history-aware.\n    safelyDecodeURI(pathname));\n  }\n\n  return matches;\n}\n\nfunction convertRouteMatchToUiMatch(match, loaderData) {\n  let {\n    route,\n    pathname,\n    params\n  } = match;\n  return {\n    id: route.id,\n    pathname,\n    params,\n    data: loaderData[route.id],\n    handle: route.handle\n  };\n}\n\nfunction flattenRoutes(routes, branches, parentsMeta, parentPath) {\n  if (branches === void 0) {\n    branches = [];\n  }\n\n  if (parentsMeta === void 0) {\n    parentsMeta = [];\n  }\n\n  if (parentPath === void 0) {\n    parentPath = \"\";\n  }\n\n  let flattenRoute = (route, index, relativePath) => {\n    let meta = {\n      relativePath: relativePath === undefined ? route.path || \"\" : relativePath,\n      caseSensitive: route.caseSensitive === true,\n      childrenIndex: index,\n      route\n    };\n\n    if (meta.relativePath.startsWith(\"/\")) {\n      invariant(meta.relativePath.startsWith(parentPath), \"Absolute route path \\\"\" + meta.relativePath + \"\\\" nested under path \" + (\"\\\"\" + parentPath + \"\\\" is not valid. An absolute child route path \") + \"must start with the combined path of all its parent routes.\");\n      meta.relativePath = meta.relativePath.slice(parentPath.length);\n    }\n\n    let path = joinPaths([parentPath, meta.relativePath]);\n    let routesMeta = parentsMeta.concat(meta); // Add the children before adding this route to the array, so we traverse the\n    // route tree depth-first and child routes appear before their parents in\n    // the \"flattened\" version.\n\n    if (route.children && route.children.length > 0) {\n      invariant( // Our types know better, but runtime JS may not!\n      // @ts-expect-error\n      route.index !== true, \"Index routes must not have child routes. Please remove \" + (\"all child routes from route path \\\"\" + path + \"\\\".\"));\n      flattenRoutes(route.children, branches, routesMeta, path);\n    } // Routes without a path shouldn't ever match by themselves unless they are\n    // index routes, so don't add them to the list of possible branches.\n\n\n    if (route.path == null && !route.index) {\n      return;\n    }\n\n    branches.push({\n      path,\n      score: computeScore(path, route.index),\n      routesMeta\n    });\n  };\n\n  routes.forEach((route, index) => {\n    var _route$path; // coarse-grain check for optional params\n\n\n    if (route.path === \"\" || !((_route$path = route.path) != null && _route$path.includes(\"?\"))) {\n      flattenRoute(route, index);\n    } else {\n      for (let exploded of explodeOptionalSegments(route.path)) {\n        flattenRoute(route, index, exploded);\n      }\n    }\n  });\n  return branches;\n}\n/**\n * Computes all combinations of optional path segments for a given path,\n * excluding combinations that are ambiguous and of lower priority.\n *\n * For example, `/one/:two?/three/:four?/:five?` explodes to:\n * - `/one/three`\n * - `/one/:two/three`\n * - `/one/three/:four`\n * - `/one/three/:five`\n * - `/one/:two/three/:four`\n * - `/one/:two/three/:five`\n * - `/one/three/:four/:five`\n * - `/one/:two/three/:four/:five`\n */\n\n\nfunction explodeOptionalSegments(path) {\n  let segments = path.split(\"/\");\n  if (segments.length === 0) return [];\n  let [first, ...rest] = segments; // Optional path segments are denoted by a trailing `?`\n\n  let isOptional = first.endsWith(\"?\"); // Compute the corresponding required segment: `foo?` -> `foo`\n\n  let required = first.replace(/\\?$/, \"\");\n\n  if (rest.length === 0) {\n    // Intepret empty string as omitting an optional segment\n    // `[\"one\", \"\", \"three\"]` corresponds to omitting `:two` from `/one/:two?/three` -> `/one/three`\n    return isOptional ? [required, \"\"] : [required];\n  }\n\n  let restExploded = explodeOptionalSegments(rest.join(\"/\"));\n  let result = []; // All child paths with the prefix.  Do this for all children before the\n  // optional version for all children, so we get consistent ordering where the\n  // parent optional aspect is preferred as required.  Otherwise, we can get\n  // child sections interspersed where deeper optional segments are higher than\n  // parent optional segments, where for example, /:two would explode _earlier_\n  // then /:one.  By always including the parent as required _for all children_\n  // first, we avoid this issue\n\n  result.push(...restExploded.map(subpath => subpath === \"\" ? required : [required, subpath].join(\"/\"))); // Then, if this is an optional value, add all child versions without\n\n  if (isOptional) {\n    result.push(...restExploded);\n  } // for absolute paths, ensure `/` instead of empty segment\n\n\n  return result.map(exploded => path.startsWith(\"/\") && exploded === \"\" ? \"/\" : exploded);\n}\n\nfunction rankRouteBranches(branches) {\n  branches.sort((a, b) => a.score !== b.score ? b.score - a.score // Higher score first\n  : compareIndexes(a.routesMeta.map(meta => meta.childrenIndex), b.routesMeta.map(meta => meta.childrenIndex)));\n}\n\nconst paramRe = /^:\\w+$/;\nconst dynamicSegmentValue = 3;\nconst indexRouteValue = 2;\nconst emptySegmentValue = 1;\nconst staticSegmentValue = 10;\nconst splatPenalty = -2;\n\nconst isSplat = s => s === \"*\";\n\nfunction computeScore(path, index) {\n  let segments = path.split(\"/\");\n  let initialScore = segments.length;\n\n  if (segments.some(isSplat)) {\n    initialScore += splatPenalty;\n  }\n\n  if (index) {\n    initialScore += indexRouteValue;\n  }\n\n  return segments.filter(s => !isSplat(s)).reduce((score, segment) => score + (paramRe.test(segment) ? dynamicSegmentValue : segment === \"\" ? emptySegmentValue : staticSegmentValue), initialScore);\n}\n\nfunction compareIndexes(a, b) {\n  let siblings = a.length === b.length && a.slice(0, -1).every((n, i) => n === b[i]);\n  return siblings ? // If two routes are siblings, we should try to match the earlier sibling\n  // first. This allows people to have fine-grained control over the matching\n  // behavior by simply putting routes with identical paths in the order they\n  // want them tried.\n  a[a.length - 1] - b[b.length - 1] : // Otherwise, it doesn't really make sense to rank non-siblings by index,\n  // so they sort equally.\n  0;\n}\n\nfunction matchRouteBranch(branch, pathname) {\n  let {\n    routesMeta\n  } = branch;\n  let matchedParams = {};\n  let matchedPathname = \"/\";\n  let matches = [];\n\n  for (let i = 0; i < routesMeta.length; ++i) {\n    let meta = routesMeta[i];\n    let end = i === routesMeta.length - 1;\n    let remainingPathname = matchedPathname === \"/\" ? pathname : pathname.slice(matchedPathname.length) || \"/\";\n    let match = matchPath({\n      path: meta.relativePath,\n      caseSensitive: meta.caseSensitive,\n      end\n    }, remainingPathname);\n    if (!match) return null;\n    Object.assign(matchedParams, match.params);\n    let route = meta.route;\n    matches.push({\n      // TODO: Can this as be avoided?\n      params: matchedParams,\n      pathname: joinPaths([matchedPathname, match.pathname]),\n      pathnameBase: normalizePathname(joinPaths([matchedPathname, match.pathnameBase])),\n      route\n    });\n\n    if (match.pathnameBase !== \"/\") {\n      matchedPathname = joinPaths([matchedPathname, match.pathnameBase]);\n    }\n  }\n\n  return matches;\n}\n/**\n * Returns a path with params interpolated.\n *\n * @see https://reactrouter.com/utils/generate-path\n */\n\n\nfunction generatePath(originalPath, params) {\n  if (params === void 0) {\n    params = {};\n  }\n\n  let path = originalPath;\n\n  if (path.endsWith(\"*\") && path !== \"*\" && !path.endsWith(\"/*\")) {\n    warning(false, \"Route path \\\"\" + path + \"\\\" will be treated as if it were \" + (\"\\\"\" + path.replace(/\\*$/, \"/*\") + \"\\\" because the `*` character must \") + \"always follow a `/` in the pattern. To get rid of this warning, \" + (\"please change the route path to \\\"\" + path.replace(/\\*$/, \"/*\") + \"\\\".\"));\n    path = path.replace(/\\*$/, \"/*\");\n  } // ensure `/` is added at the beginning if the path is absolute\n\n\n  const prefix = path.startsWith(\"/\") ? \"/\" : \"\";\n\n  const stringify = p => p == null ? \"\" : typeof p === \"string\" ? p : String(p);\n\n  const segments = path.split(/\\/+/).map((segment, index, array) => {\n    const isLastSegment = index === array.length - 1; // only apply the splat if it's the last segment\n\n    if (isLastSegment && segment === \"*\") {\n      const star = \"*\"; // Apply the splat\n\n      return stringify(params[star]);\n    }\n\n    const keyMatch = segment.match(/^:(\\w+)(\\??)$/);\n\n    if (keyMatch) {\n      const [, key, optional] = keyMatch;\n      let param = params[key];\n      invariant(optional === \"?\" || param != null, \"Missing \\\":\" + key + \"\\\" param\");\n      return stringify(param);\n    } // Remove any optional markers from optional static segments\n\n\n    return segment.replace(/\\?$/g, \"\");\n  }) // Remove empty segments\n  .filter(segment => !!segment);\n  return prefix + segments.join(\"/\");\n}\n/**\n * Performs pattern matching on a URL pathname and returns information about\n * the match.\n *\n * @see https://reactrouter.com/utils/match-path\n */\n\n\nfunction matchPath(pattern, pathname) {\n  if (typeof pattern === \"string\") {\n    pattern = {\n      path: pattern,\n      caseSensitive: false,\n      end: true\n    };\n  }\n\n  let [matcher, compiledParams] = compilePath(pattern.path, pattern.caseSensitive, pattern.end);\n  let match = pathname.match(matcher);\n  if (!match) return null;\n  let matchedPathname = match[0];\n  let pathnameBase = matchedPathname.replace(/(.)\\/+$/, \"$1\");\n  let captureGroups = match.slice(1);\n  let params = compiledParams.reduce((memo, _ref, index) => {\n    let {\n      paramName,\n      isOptional\n    } = _ref; // We need to compute the pathnameBase here using the raw splat value\n    // instead of using params[\"*\"] later because it will be decoded then\n\n    if (paramName === \"*\") {\n      let splatValue = captureGroups[index] || \"\";\n      pathnameBase = matchedPathname.slice(0, matchedPathname.length - splatValue.length).replace(/(.)\\/+$/, \"$1\");\n    }\n\n    const value = captureGroups[index];\n\n    if (isOptional && !value) {\n      memo[paramName] = undefined;\n    } else {\n      memo[paramName] = safelyDecodeURIComponent(value || \"\", paramName);\n    }\n\n    return memo;\n  }, {});\n  return {\n    params,\n    pathname: matchedPathname,\n    pathnameBase,\n    pattern\n  };\n}\n\nfunction compilePath(path, caseSensitive, end) {\n  if (caseSensitive === void 0) {\n    caseSensitive = false;\n  }\n\n  if (end === void 0) {\n    end = true;\n  }\n\n  warning(path === \"*\" || !path.endsWith(\"*\") || path.endsWith(\"/*\"), \"Route path \\\"\" + path + \"\\\" will be treated as if it were \" + (\"\\\"\" + path.replace(/\\*$/, \"/*\") + \"\\\" because the `*` character must \") + \"always follow a `/` in the pattern. To get rid of this warning, \" + (\"please change the route path to \\\"\" + path.replace(/\\*$/, \"/*\") + \"\\\".\"));\n  let params = [];\n  let regexpSource = \"^\" + path.replace(/\\/*\\*?$/, \"\") // Ignore trailing / and /*, we'll handle it below\n  .replace(/^\\/*/, \"/\") // Make sure it has a leading /\n  .replace(/[\\\\.*+^${}|()[\\]]/g, \"\\\\$&\") // Escape special regex chars\n  .replace(/\\/:(\\w+)(\\?)?/g, (_, paramName, isOptional) => {\n    params.push({\n      paramName,\n      isOptional: isOptional != null\n    });\n    return isOptional ? \"/?([^\\\\/]+)?\" : \"/([^\\\\/]+)\";\n  });\n\n  if (path.endsWith(\"*\")) {\n    params.push({\n      paramName: \"*\"\n    });\n    regexpSource += path === \"*\" || path === \"/*\" ? \"(.*)$\" // Already matched the initial /, just match the rest\n    : \"(?:\\\\/(.+)|\\\\/*)$\"; // Don't include the / in params[\"*\"]\n  } else if (end) {\n    // When matching to the end, ignore trailing slashes\n    regexpSource += \"\\\\/*$\";\n  } else if (path !== \"\" && path !== \"/\") {\n    // If our path is non-empty and contains anything beyond an initial slash,\n    // then we have _some_ form of path in our regex, so we should expect to\n    // match only if we find the end of this path segment.  Look for an optional\n    // non-captured trailing slash (to match a portion of the URL) or the end\n    // of the path (if we've matched to the end).  We used to do this with a\n    // word boundary but that gives false positives on routes like\n    // /user-preferences since `-` counts as a word boundary.\n    regexpSource += \"(?:(?=\\\\/|$))\";\n  } else ;\n\n  let matcher = new RegExp(regexpSource, caseSensitive ? undefined : \"i\");\n  return [matcher, params];\n}\n\nfunction safelyDecodeURI(value) {\n  try {\n    return decodeURI(value);\n  } catch (error) {\n    warning(false, \"The URL path \\\"\" + value + \"\\\" could not be decoded because it is is a \" + \"malformed URL segment. This is probably due to a bad percent \" + (\"encoding (\" + error + \").\"));\n    return value;\n  }\n}\n\nfunction safelyDecodeURIComponent(value, paramName) {\n  try {\n    return decodeURIComponent(value);\n  } catch (error) {\n    warning(false, \"The value for the URL param \\\"\" + paramName + \"\\\" will not be decoded because\" + (\" the string \\\"\" + value + \"\\\" is a malformed URL segment. This is probably\") + (\" due to a bad percent encoding (\" + error + \").\"));\n    return value;\n  }\n}\n/**\n * @private\n */\n\n\nfunction stripBasename(pathname, basename) {\n  if (basename === \"/\") return pathname;\n\n  if (!pathname.toLowerCase().startsWith(basename.toLowerCase())) {\n    return null;\n  } // We want to leave trailing slash behavior in the user's control, so if they\n  // specify a basename with a trailing slash, we should support it\n\n\n  let startIndex = basename.endsWith(\"/\") ? basename.length - 1 : basename.length;\n  let nextChar = pathname.charAt(startIndex);\n\n  if (nextChar && nextChar !== \"/\") {\n    // pathname does not start with basename/\n    return null;\n  }\n\n  return pathname.slice(startIndex) || \"/\";\n}\n/**\n * Returns a resolved path object relative to the given pathname.\n *\n * @see https://reactrouter.com/utils/resolve-path\n */\n\n\nfunction resolvePath(to, fromPathname) {\n  if (fromPathname === void 0) {\n    fromPathname = \"/\";\n  }\n\n  let {\n    pathname: toPathname,\n    search = \"\",\n    hash = \"\"\n  } = typeof to === \"string\" ? parsePath(to) : to;\n  let pathname = toPathname ? toPathname.startsWith(\"/\") ? toPathname : resolvePathname(toPathname, fromPathname) : fromPathname;\n  return {\n    pathname,\n    search: normalizeSearch(search),\n    hash: normalizeHash(hash)\n  };\n}\n\nfunction resolvePathname(relativePath, fromPathname) {\n  let segments = fromPathname.replace(/\\/+$/, \"\").split(\"/\");\n  let relativeSegments = relativePath.split(\"/\");\n  relativeSegments.forEach(segment => {\n    if (segment === \"..\") {\n      // Keep the root \"\" segment so the pathname starts at /\n      if (segments.length > 1) segments.pop();\n    } else if (segment !== \".\") {\n      segments.push(segment);\n    }\n  });\n  return segments.length > 1 ? segments.join(\"/\") : \"/\";\n}\n\nfunction getInvalidPathError(char, field, dest, path) {\n  return \"Cannot include a '\" + char + \"' character in a manually specified \" + (\"`to.\" + field + \"` field [\" + JSON.stringify(path) + \"].  Please separate it out to the \") + (\"`to.\" + dest + \"` field. Alternatively you may provide the full path as \") + \"a string in <Link to=\\\"...\\\"> and the router will parse it for you.\";\n}\n/**\n * @private\n *\n * When processing relative navigation we want to ignore ancestor routes that\n * do not contribute to the path, such that index/pathless layout routes don't\n * interfere.\n *\n * For example, when moving a route element into an index route and/or a\n * pathless layout route, relative link behavior contained within should stay\n * the same.  Both of the following examples should link back to the root:\n *\n *   <Route path=\"/\">\n *     <Route path=\"accounts\" element={<Link to=\"..\"}>\n *   </Route>\n *\n *   <Route path=\"/\">\n *     <Route path=\"accounts\">\n *       <Route element={<AccountsLayout />}>       // <-- Does not contribute\n *         <Route index element={<Link to=\"..\"} />  // <-- Does not contribute\n *       </Route\n *     </Route>\n *   </Route>\n */\n\n\nfunction getPathContributingMatches(matches) {\n  return matches.filter((match, index) => index === 0 || match.route.path && match.route.path.length > 0);\n}\n/**\n * @private\n */\n\n\nfunction resolveTo(toArg, routePathnames, locationPathname, isPathRelative) {\n  if (isPathRelative === void 0) {\n    isPathRelative = false;\n  }\n\n  let to;\n\n  if (typeof toArg === \"string\") {\n    to = parsePath(toArg);\n  } else {\n    to = _extends({}, toArg);\n    invariant(!to.pathname || !to.pathname.includes(\"?\"), getInvalidPathError(\"?\", \"pathname\", \"search\", to));\n    invariant(!to.pathname || !to.pathname.includes(\"#\"), getInvalidPathError(\"#\", \"pathname\", \"hash\", to));\n    invariant(!to.search || !to.search.includes(\"#\"), getInvalidPathError(\"#\", \"search\", \"hash\", to));\n  }\n\n  let isEmptyPath = toArg === \"\" || to.pathname === \"\";\n  let toPathname = isEmptyPath ? \"/\" : to.pathname;\n  let from; // Routing is relative to the current pathname if explicitly requested.\n  //\n  // If a pathname is explicitly provided in `to`, it should be relative to the\n  // route context. This is explained in `Note on `<Link to>` values` in our\n  // migration guide from v5 as a means of disambiguation between `to` values\n  // that begin with `/` and those that do not. However, this is problematic for\n  // `to` values that do not provide a pathname. `to` can simply be a search or\n  // hash string, in which case we should assume that the navigation is relative\n  // to the current location's pathname and *not* the route pathname.\n\n  if (isPathRelative || toPathname == null) {\n    from = locationPathname;\n  } else {\n    let routePathnameIndex = routePathnames.length - 1;\n\n    if (toPathname.startsWith(\"..\")) {\n      let toSegments = toPathname.split(\"/\"); // Each leading .. segment means \"go up one route\" instead of \"go up one\n      // URL segment\".  This is a key difference from how <a href> works and a\n      // major reason we call this a \"to\" value instead of a \"href\".\n\n      while (toSegments[0] === \"..\") {\n        toSegments.shift();\n        routePathnameIndex -= 1;\n      }\n\n      to.pathname = toSegments.join(\"/\");\n    } // If there are more \"..\" segments than parent routes, resolve relative to\n    // the root / URL.\n\n\n    from = routePathnameIndex >= 0 ? routePathnames[routePathnameIndex] : \"/\";\n  }\n\n  let path = resolvePath(to, from); // Ensure the pathname has a trailing slash if the original \"to\" had one\n\n  let hasExplicitTrailingSlash = toPathname && toPathname !== \"/\" && toPathname.endsWith(\"/\"); // Or if this was a link to the current path which has a trailing slash\n\n  let hasCurrentTrailingSlash = (isEmptyPath || toPathname === \".\") && locationPathname.endsWith(\"/\");\n\n  if (!path.pathname.endsWith(\"/\") && (hasExplicitTrailingSlash || hasCurrentTrailingSlash)) {\n    path.pathname += \"/\";\n  }\n\n  return path;\n}\n/**\n * @private\n */\n\n\nfunction getToPathname(to) {\n  // Empty strings should be treated the same as / paths\n  return to === \"\" || to.pathname === \"\" ? \"/\" : typeof to === \"string\" ? parsePath(to).pathname : to.pathname;\n}\n/**\n * @private\n */\n\n\nconst joinPaths = paths => paths.join(\"/\").replace(/\\/\\/+/g, \"/\");\n/**\n * @private\n */\n\n\nconst normalizePathname = pathname => pathname.replace(/\\/+$/, \"\").replace(/^\\/*/, \"/\");\n/**\n * @private\n */\n\n\nconst normalizeSearch = search => !search || search === \"?\" ? \"\" : search.startsWith(\"?\") ? search : \"?\" + search;\n/**\n * @private\n */\n\n\nconst normalizeHash = hash => !hash || hash === \"#\" ? \"\" : hash.startsWith(\"#\") ? hash : \"#\" + hash;\n/**\n * This is a shortcut for creating `application/json` responses. Converts `data`\n * to JSON and sets the `Content-Type` header.\n */\n\n\nconst json = function json(data, init) {\n  if (init === void 0) {\n    init = {};\n  }\n\n  let responseInit = typeof init === \"number\" ? {\n    status: init\n  } : init;\n  let headers = new Headers(responseInit.headers);\n\n  if (!headers.has(\"Content-Type\")) {\n    headers.set(\"Content-Type\", \"application/json; charset=utf-8\");\n  }\n\n  return new Response(JSON.stringify(data), _extends({}, responseInit, {\n    headers\n  }));\n};\n\nclass AbortedDeferredError extends Error {}\n\nclass DeferredData {\n  constructor(data, responseInit) {\n    this.pendingKeysSet = new Set();\n    this.subscribers = new Set();\n    this.deferredKeys = [];\n    invariant(data && typeof data === \"object\" && !Array.isArray(data), \"defer() only accepts plain objects\"); // Set up an AbortController + Promise we can race against to exit early\n    // cancellation\n\n    let reject;\n    this.abortPromise = new Promise((_, r) => reject = r);\n    this.controller = new AbortController();\n\n    let onAbort = () => reject(new AbortedDeferredError(\"Deferred data aborted\"));\n\n    this.unlistenAbortSignal = () => this.controller.signal.removeEventListener(\"abort\", onAbort);\n\n    this.controller.signal.addEventListener(\"abort\", onAbort);\n    this.data = Object.entries(data).reduce((acc, _ref2) => {\n      let [key, value] = _ref2;\n      return Object.assign(acc, {\n        [key]: this.trackPromise(key, value)\n      });\n    }, {});\n\n    if (this.done) {\n      // All incoming values were resolved\n      this.unlistenAbortSignal();\n    }\n\n    this.init = responseInit;\n  }\n\n  trackPromise(key, value) {\n    if (!(value instanceof Promise)) {\n      return value;\n    }\n\n    this.deferredKeys.push(key);\n    this.pendingKeysSet.add(key); // We store a little wrapper promise that will be extended with\n    // _data/_error props upon resolve/reject\n\n    let promise = Promise.race([value, this.abortPromise]).then(data => this.onSettle(promise, key, undefined, data), error => this.onSettle(promise, key, error)); // Register rejection listeners to avoid uncaught promise rejections on\n    // errors or aborted deferred values\n\n    promise.catch(() => {});\n    Object.defineProperty(promise, \"_tracked\", {\n      get: () => true\n    });\n    return promise;\n  }\n\n  onSettle(promise, key, error, data) {\n    if (this.controller.signal.aborted && error instanceof AbortedDeferredError) {\n      this.unlistenAbortSignal();\n      Object.defineProperty(promise, \"_error\", {\n        get: () => error\n      });\n      return Promise.reject(error);\n    }\n\n    this.pendingKeysSet.delete(key);\n\n    if (this.done) {\n      // Nothing left to abort!\n      this.unlistenAbortSignal();\n    } // If the promise was resolved/rejected with undefined, we'll throw an error as you\n    // should always resolve with a value or null\n\n\n    if (error === undefined && data === undefined) {\n      let undefinedError = new Error(\"Deferred data for key \\\"\" + key + \"\\\" resolved/rejected with `undefined`, \" + \"you must resolve/reject with a value or `null`.\");\n      Object.defineProperty(promise, \"_error\", {\n        get: () => undefinedError\n      });\n      this.emit(false, key);\n      return Promise.reject(undefinedError);\n    }\n\n    if (data === undefined) {\n      Object.defineProperty(promise, \"_error\", {\n        get: () => error\n      });\n      this.emit(false, key);\n      return Promise.reject(error);\n    }\n\n    Object.defineProperty(promise, \"_data\", {\n      get: () => data\n    });\n    this.emit(false, key);\n    return data;\n  }\n\n  emit(aborted, settledKey) {\n    this.subscribers.forEach(subscriber => subscriber(aborted, settledKey));\n  }\n\n  subscribe(fn) {\n    this.subscribers.add(fn);\n    return () => this.subscribers.delete(fn);\n  }\n\n  cancel() {\n    this.controller.abort();\n    this.pendingKeysSet.forEach((v, k) => this.pendingKeysSet.delete(k));\n    this.emit(true);\n  }\n\n  async resolveData(signal) {\n    let aborted = false;\n\n    if (!this.done) {\n      let onAbort = () => this.cancel();\n\n      signal.addEventListener(\"abort\", onAbort);\n      aborted = await new Promise(resolve => {\n        this.subscribe(aborted => {\n          signal.removeEventListener(\"abort\", onAbort);\n\n          if (aborted || this.done) {\n            resolve(aborted);\n          }\n        });\n      });\n    }\n\n    return aborted;\n  }\n\n  get done() {\n    return this.pendingKeysSet.size === 0;\n  }\n\n  get unwrappedData() {\n    invariant(this.data !== null && this.done, \"Can only unwrap data on initialized and settled deferreds\");\n    return Object.entries(this.data).reduce((acc, _ref3) => {\n      let [key, value] = _ref3;\n      return Object.assign(acc, {\n        [key]: unwrapTrackedPromise(value)\n      });\n    }, {});\n  }\n\n  get pendingKeys() {\n    return Array.from(this.pendingKeysSet);\n  }\n\n}\n\nfunction isTrackedPromise(value) {\n  return value instanceof Promise && value._tracked === true;\n}\n\nfunction unwrapTrackedPromise(value) {\n  if (!isTrackedPromise(value)) {\n    return value;\n  }\n\n  if (value._error) {\n    throw value._error;\n  }\n\n  return value._data;\n}\n\nconst defer = function defer(data, init) {\n  if (init === void 0) {\n    init = {};\n  }\n\n  let responseInit = typeof init === \"number\" ? {\n    status: init\n  } : init;\n  return new DeferredData(data, responseInit);\n};\n/**\n * A redirect response. Sets the status code and the `Location` header.\n * Defaults to \"302 Found\".\n */\n\n\nconst redirect = function redirect(url, init) {\n  if (init === void 0) {\n    init = 302;\n  }\n\n  let responseInit = init;\n\n  if (typeof responseInit === \"number\") {\n    responseInit = {\n      status: responseInit\n    };\n  } else if (typeof responseInit.status === \"undefined\") {\n    responseInit.status = 302;\n  }\n\n  let headers = new Headers(responseInit.headers);\n  headers.set(\"Location\", url);\n  return new Response(null, _extends({}, responseInit, {\n    headers\n  }));\n};\n/**\n * A redirect response that will force a document reload to the new location.\n * Sets the status code and the `Location` header.\n * Defaults to \"302 Found\".\n */\n\n\nconst redirectDocument = (url, init) => {\n  let response = redirect(url, init);\n  response.headers.set(\"X-Remix-Reload-Document\", \"true\");\n  return response;\n};\n/**\n * @private\n * Utility class we use to hold auto-unwrapped 4xx/5xx Response bodies\n *\n * We don't export the class for public use since it's an implementation\n * detail, but we export the interface above so folks can build their own\n * abstractions around instances via isRouteErrorResponse()\n */\n\n\nclass ErrorResponseImpl {\n  constructor(status, statusText, data, internal) {\n    if (internal === void 0) {\n      internal = false;\n    }\n\n    this.status = status;\n    this.statusText = statusText || \"\";\n    this.internal = internal;\n\n    if (data instanceof Error) {\n      this.data = data.toString();\n      this.error = data;\n    } else {\n      this.data = data;\n    }\n  }\n\n}\n/**\n * Check if the given error is an ErrorResponse generated from a 4xx/5xx\n * Response thrown from an action/loader\n */\n\n\nfunction isRouteErrorResponse(error) {\n  return error != null && typeof error.status === \"number\" && typeof error.statusText === \"string\" && typeof error.internal === \"boolean\" && \"data\" in error;\n}\n\nconst validMutationMethodsArr = [\"post\", \"put\", \"patch\", \"delete\"];\nconst validMutationMethods = new Set(validMutationMethodsArr);\nconst validRequestMethodsArr = [\"get\", ...validMutationMethodsArr];\nconst validRequestMethods = new Set(validRequestMethodsArr);\nconst redirectStatusCodes = new Set([301, 302, 303, 307, 308]);\nconst redirectPreserveMethodStatusCodes = new Set([307, 308]);\nconst IDLE_NAVIGATION = {\n  state: \"idle\",\n  location: undefined,\n  formMethod: undefined,\n  formAction: undefined,\n  formEncType: undefined,\n  formData: undefined,\n  json: undefined,\n  text: undefined\n};\nconst IDLE_FETCHER = {\n  state: \"idle\",\n  data: undefined,\n  formMethod: undefined,\n  formAction: undefined,\n  formEncType: undefined,\n  formData: undefined,\n  json: undefined,\n  text: undefined\n};\nconst IDLE_BLOCKER = {\n  state: \"unblocked\",\n  proceed: undefined,\n  reset: undefined,\n  location: undefined\n};\nconst ABSOLUTE_URL_REGEX = /^(?:[a-z][a-z0-9+.-]*:|\\/\\/)/i;\n\nconst defaultMapRouteProperties = route => ({\n  hasErrorBoundary: Boolean(route.hasErrorBoundary)\n});\n\nconst TRANSITIONS_STORAGE_KEY = \"remix-router-transitions\"; //#endregion\n////////////////////////////////////////////////////////////////////////////////\n//#region createRouter\n////////////////////////////////////////////////////////////////////////////////\n\n/**\n * Create a router and listen to history POP navigations\n */\n\nfunction createRouter(init) {\n  const routerWindow = init.window ? init.window : typeof window !== \"undefined\" ? window : undefined;\n  const isBrowser = typeof routerWindow !== \"undefined\" && typeof routerWindow.document !== \"undefined\" && typeof routerWindow.document.createElement !== \"undefined\";\n  const isServer = !isBrowser;\n  invariant(init.routes.length > 0, \"You must provide a non-empty routes array to createRouter\");\n  let mapRouteProperties;\n\n  if (init.mapRouteProperties) {\n    mapRouteProperties = init.mapRouteProperties;\n  } else if (init.detectErrorBoundary) {\n    // If they are still using the deprecated version, wrap it with the new API\n    let detectErrorBoundary = init.detectErrorBoundary;\n\n    mapRouteProperties = route => ({\n      hasErrorBoundary: detectErrorBoundary(route)\n    });\n  } else {\n    mapRouteProperties = defaultMapRouteProperties;\n  } // Routes keyed by ID\n\n\n  let manifest = {}; // Routes in tree format for matching\n\n  let dataRoutes = convertRoutesToDataRoutes(init.routes, mapRouteProperties, undefined, manifest);\n  let inFlightDataRoutes;\n  let basename = init.basename || \"/\"; // Config driven behavior flags\n\n  let future = _extends({\n    v7_fetcherPersist: false,\n    v7_normalizeFormMethod: false,\n    v7_prependBasename: false\n  }, init.future); // Cleanup function for history\n\n\n  let unlistenHistory = null; // Externally-provided functions to call on all state changes\n\n  let subscribers = new Set(); // Externally-provided object to hold scroll restoration locations during routing\n\n  let savedScrollPositions = null; // Externally-provided function to get scroll restoration keys\n\n  let getScrollRestorationKey = null; // Externally-provided function to get current scroll position\n\n  let getScrollPosition = null; // One-time flag to control the initial hydration scroll restoration.  Because\n  // we don't get the saved positions from <ScrollRestoration /> until _after_\n  // the initial render, we need to manually trigger a separate updateState to\n  // send along the restoreScrollPosition\n  // Set to true if we have `hydrationData` since we assume we were SSR'd and that\n  // SSR did the initial scroll restoration.\n\n  let initialScrollRestored = init.hydrationData != null;\n  let initialMatches = matchRoutes(dataRoutes, init.history.location, basename);\n  let initialErrors = null;\n\n  if (initialMatches == null) {\n    // If we do not match a user-provided-route, fall back to the root\n    // to allow the error boundary to take over\n    let error = getInternalRouterError(404, {\n      pathname: init.history.location.pathname\n    });\n    let {\n      matches,\n      route\n    } = getShortCircuitMatches(dataRoutes);\n    initialMatches = matches;\n    initialErrors = {\n      [route.id]: error\n    };\n  }\n\n  let initialized = // All initialMatches need to be loaded before we're ready.  If we have lazy\n  // functions around still then we'll need to run them in initialize()\n  !initialMatches.some(m => m.route.lazy) && ( // And we have to either have no loaders or have been provided hydrationData\n  !initialMatches.some(m => m.route.loader) || init.hydrationData != null);\n  let router;\n  let state = {\n    historyAction: init.history.action,\n    location: init.history.location,\n    matches: initialMatches,\n    initialized,\n    navigation: IDLE_NAVIGATION,\n    // Don't restore on initial updateState() if we were SSR'd\n    restoreScrollPosition: init.hydrationData != null ? false : null,\n    preventScrollReset: false,\n    revalidation: \"idle\",\n    loaderData: init.hydrationData && init.hydrationData.loaderData || {},\n    actionData: init.hydrationData && init.hydrationData.actionData || null,\n    errors: init.hydrationData && init.hydrationData.errors || initialErrors,\n    fetchers: new Map(),\n    blockers: new Map()\n  }; // -- Stateful internal variables to manage navigations --\n  // Current navigation in progress (to be committed in completeNavigation)\n\n  let pendingAction = Action.Pop; // Should the current navigation prevent the scroll reset if scroll cannot\n  // be restored?\n\n  let pendingPreventScrollReset = false; // AbortController for the active navigation\n\n  let pendingNavigationController; // Should the current navigation enable document.startViewTransition?\n\n  let pendingViewTransitionEnabled = false; // Store applied view transitions so we can apply them on POP\n\n  let appliedViewTransitions = new Map(); // Cleanup function for persisting applied transitions to sessionStorage\n\n  let removePageHideEventListener = null; // We use this to avoid touching history in completeNavigation if a\n  // revalidation is entirely uninterrupted\n\n  let isUninterruptedRevalidation = false; // Use this internal flag to force revalidation of all loaders:\n  //  - submissions (completed or interrupted)\n  //  - useRevalidator()\n  //  - X-Remix-Revalidate (from redirect)\n\n  let isRevalidationRequired = false; // Use this internal array to capture routes that require revalidation due\n  // to a cancelled deferred on action submission\n\n  let cancelledDeferredRoutes = []; // Use this internal array to capture fetcher loads that were cancelled by an\n  // action navigation and require revalidation\n\n  let cancelledFetcherLoads = []; // AbortControllers for any in-flight fetchers\n\n  let fetchControllers = new Map(); // Track loads based on the order in which they started\n\n  let incrementingLoadId = 0; // Track the outstanding pending navigation data load to be compared against\n  // the globally incrementing load when a fetcher load lands after a completed\n  // navigation\n\n  let pendingNavigationLoadId = -1; // Fetchers that triggered data reloads as a result of their actions\n\n  let fetchReloadIds = new Map(); // Fetchers that triggered redirect navigations\n\n  let fetchRedirectIds = new Set(); // Most recent href/match for fetcher.load calls for fetchers\n\n  let fetchLoadMatches = new Map(); // Ref-count mounted fetchers so we know when it's ok to clean them up\n\n  let activeFetchers = new Map(); // Fetchers that have requested a delete when using v7_fetcherPersist,\n  // they'll be officially removed after they return to idle\n\n  let deletedFetchers = new Set(); // Store DeferredData instances for active route matches.  When a\n  // route loader returns defer() we stick one in here.  Then, when a nested\n  // promise resolves we update loaderData.  If a new navigation starts we\n  // cancel active deferreds for eliminated routes.\n\n  let activeDeferreds = new Map(); // Store blocker functions in a separate Map outside of router state since\n  // we don't need to update UI state if they change\n\n  let blockerFunctions = new Map(); // Flag to ignore the next history update, so we can revert the URL change on\n  // a POP navigation that was blocked by the user without touching router state\n\n  let ignoreNextHistoryUpdate = false; // Initialize the router, all side effects should be kicked off from here.\n  // Implemented as a Fluent API for ease of:\n  //   let router = createRouter(init).initialize();\n\n  function initialize() {\n    // If history informs us of a POP navigation, start the navigation but do not update\n    // state.  We'll update our own state once the navigation completes\n    unlistenHistory = init.history.listen(_ref => {\n      let {\n        action: historyAction,\n        location,\n        delta\n      } = _ref; // Ignore this event if it was just us resetting the URL from a\n      // blocked POP navigation\n\n      if (ignoreNextHistoryUpdate) {\n        ignoreNextHistoryUpdate = false;\n        return;\n      }\n\n      warning(blockerFunctions.size === 0 || delta != null, \"You are trying to use a blocker on a POP navigation to a location \" + \"that was not created by @remix-run/router. This will fail silently in \" + \"production. This can happen if you are navigating outside the router \" + \"via `window.history.pushState`/`window.location.hash` instead of using \" + \"router navigation APIs.  This can also happen if you are using \" + \"createHashRouter and the user manually changes the URL.\");\n      let blockerKey = shouldBlockNavigation({\n        currentLocation: state.location,\n        nextLocation: location,\n        historyAction\n      });\n\n      if (blockerKey && delta != null) {\n        // Restore the URL to match the current UI, but don't update router state\n        ignoreNextHistoryUpdate = true;\n        init.history.go(delta * -1); // Put the blocker into a blocked state\n\n        updateBlocker(blockerKey, {\n          state: \"blocked\",\n          location,\n\n          proceed() {\n            updateBlocker(blockerKey, {\n              state: \"proceeding\",\n              proceed: undefined,\n              reset: undefined,\n              location\n            }); // Re-do the same POP navigation we just blocked\n\n            init.history.go(delta);\n          },\n\n          reset() {\n            let blockers = new Map(state.blockers);\n            blockers.set(blockerKey, IDLE_BLOCKER);\n            updateState({\n              blockers\n            });\n          }\n\n        });\n        return;\n      }\n\n      return startNavigation(historyAction, location);\n    });\n\n    if (isBrowser) {\n      // FIXME: This feels gross.  How can we cleanup the lines between\n      // scrollRestoration/appliedTransitions persistance?\n      restoreAppliedTransitions(routerWindow, appliedViewTransitions);\n\n      let _saveAppliedTransitions = () => persistAppliedTransitions(routerWindow, appliedViewTransitions);\n\n      routerWindow.addEventListener(\"pagehide\", _saveAppliedTransitions);\n\n      removePageHideEventListener = () => routerWindow.removeEventListener(\"pagehide\", _saveAppliedTransitions);\n    } // Kick off initial data load if needed.  Use Pop to avoid modifying history\n    // Note we don't do any handling of lazy here.  For SPA's it'll get handled\n    // in the normal navigation flow.  For SSR it's expected that lazy modules are\n    // resolved prior to router creation since we can't go into a fallbackElement\n    // UI for SSR'd apps\n\n\n    if (!state.initialized) {\n      startNavigation(Action.Pop, state.location);\n    }\n\n    return router;\n  } // Clean up a router and it's side effects\n\n\n  function dispose() {\n    if (unlistenHistory) {\n      unlistenHistory();\n    }\n\n    if (removePageHideEventListener) {\n      removePageHideEventListener();\n    }\n\n    subscribers.clear();\n    pendingNavigationController && pendingNavigationController.abort();\n    state.fetchers.forEach((_, key) => deleteFetcher(key));\n    state.blockers.forEach((_, key) => deleteBlocker(key));\n  } // Subscribe to state updates for the router\n\n\n  function subscribe(fn) {\n    subscribers.add(fn);\n    return () => subscribers.delete(fn);\n  } // Update our state and notify the calling context of the change\n\n\n  function updateState(newState, viewTransitionOpts) {\n    state = _extends({}, state, newState); // Prep fetcher cleanup so we can tell the UI which fetcher data entries\n    // can be removed\n\n    let completedFetchers = [];\n    let deletedFetchersKeys = [];\n\n    if (future.v7_fetcherPersist) {\n      state.fetchers.forEach((fetcher, key) => {\n        if (fetcher.state === \"idle\") {\n          if (deletedFetchers.has(key)) {\n            // Unmounted from the UI and can be totally removed\n            deletedFetchersKeys.push(key);\n          } else {\n            // Returned to idle but still mounted in the UI, so semi-remains for\n            // revalidations and such\n            completedFetchers.push(key);\n          }\n        }\n      });\n    }\n\n    subscribers.forEach(subscriber => subscriber(state, {\n      deletedFetchers: deletedFetchersKeys,\n      unstable_viewTransitionOpts: viewTransitionOpts\n    })); // Remove idle fetchers from state since we only care about in-flight fetchers.\n\n    if (future.v7_fetcherPersist) {\n      completedFetchers.forEach(key => state.fetchers.delete(key));\n      deletedFetchersKeys.forEach(key => deleteFetcher(key));\n    }\n  } // Complete a navigation returning the state.navigation back to the IDLE_NAVIGATION\n  // and setting state.[historyAction/location/matches] to the new route.\n  // - Location is a required param\n  // - Navigation will always be set to IDLE_NAVIGATION\n  // - Can pass any other state in newState\n\n\n  function completeNavigation(location, newState) {\n    var _location$state, _location$state2; // Deduce if we're in a loading/actionReload state:\n    // - We have committed actionData in the store\n    // - The current navigation was a mutation submission\n    // - We're past the submitting state and into the loading state\n    // - The location being loaded is not the result of a redirect\n\n\n    let isActionReload = state.actionData != null && state.navigation.formMethod != null && isMutationMethod(state.navigation.formMethod) && state.navigation.state === \"loading\" && ((_location$state = location.state) == null ? void 0 : _location$state._isRedirect) !== true;\n    let actionData;\n\n    if (newState.actionData) {\n      if (Object.keys(newState.actionData).length > 0) {\n        actionData = newState.actionData;\n      } else {\n        // Empty actionData -> clear prior actionData due to an action error\n        actionData = null;\n      }\n    } else if (isActionReload) {\n      // Keep the current data if we're wrapping up the action reload\n      actionData = state.actionData;\n    } else {\n      // Clear actionData on any other completed navigations\n      actionData = null;\n    } // Always preserve any existing loaderData from re-used routes\n\n\n    let loaderData = newState.loaderData ? mergeLoaderData(state.loaderData, newState.loaderData, newState.matches || [], newState.errors) : state.loaderData; // On a successful navigation we can assume we got through all blockers\n    // so we can start fresh\n\n    let blockers = state.blockers;\n\n    if (blockers.size > 0) {\n      blockers = new Map(blockers);\n      blockers.forEach((_, k) => blockers.set(k, IDLE_BLOCKER));\n    } // Always respect the user flag.  Otherwise don't reset on mutation\n    // submission navigations unless they redirect\n\n\n    let preventScrollReset = pendingPreventScrollReset === true || state.navigation.formMethod != null && isMutationMethod(state.navigation.formMethod) && ((_location$state2 = location.state) == null ? void 0 : _location$state2._isRedirect) !== true;\n\n    if (inFlightDataRoutes) {\n      dataRoutes = inFlightDataRoutes;\n      inFlightDataRoutes = undefined;\n    }\n\n    if (isUninterruptedRevalidation) ;else if (pendingAction === Action.Pop) ;else if (pendingAction === Action.Push) {\n      init.history.push(location, location.state);\n    } else if (pendingAction === Action.Replace) {\n      init.history.replace(location, location.state);\n    }\n    let viewTransitionOpts; // On POP, enable transitions if they were enabled on the original navigation\n\n    if (pendingAction === Action.Pop) {\n      // Forward takes precedence so they behave like the original navigation\n      let priorPaths = appliedViewTransitions.get(state.location.pathname);\n\n      if (priorPaths && priorPaths.has(location.pathname)) {\n        viewTransitionOpts = {\n          currentLocation: state.location,\n          nextLocation: location\n        };\n      } else if (appliedViewTransitions.has(location.pathname)) {\n        // If we don't have a previous forward nav, assume we're popping back to\n        // the new location and enable if that location previously enabled\n        viewTransitionOpts = {\n          currentLocation: location,\n          nextLocation: state.location\n        };\n      }\n    } else if (pendingViewTransitionEnabled) {\n      // Store the applied transition on PUSH/REPLACE\n      let toPaths = appliedViewTransitions.get(state.location.pathname);\n\n      if (toPaths) {\n        toPaths.add(location.pathname);\n      } else {\n        toPaths = new Set([location.pathname]);\n        appliedViewTransitions.set(state.location.pathname, toPaths);\n      }\n\n      viewTransitionOpts = {\n        currentLocation: state.location,\n        nextLocation: location\n      };\n    }\n\n    updateState(_extends({}, newState, {\n      actionData,\n      loaderData,\n      historyAction: pendingAction,\n      location,\n      initialized: true,\n      navigation: IDLE_NAVIGATION,\n      revalidation: \"idle\",\n      restoreScrollPosition: getSavedScrollPosition(location, newState.matches || state.matches),\n      preventScrollReset,\n      blockers\n    }), viewTransitionOpts); // Reset stateful navigation vars\n\n    pendingAction = Action.Pop;\n    pendingPreventScrollReset = false;\n    pendingViewTransitionEnabled = false;\n    isUninterruptedRevalidation = false;\n    isRevalidationRequired = false;\n    cancelledDeferredRoutes = [];\n    cancelledFetcherLoads = [];\n  } // Trigger a navigation event, which can either be a numerical POP or a PUSH\n  // replace with an optional submission\n\n\n  async function navigate(to, opts) {\n    if (typeof to === \"number\") {\n      init.history.go(to);\n      return;\n    }\n\n    let normalizedPath = normalizeTo(state.location, state.matches, basename, future.v7_prependBasename, to, opts == null ? void 0 : opts.fromRouteId, opts == null ? void 0 : opts.relative);\n    let {\n      path,\n      submission,\n      error\n    } = normalizeNavigateOptions(future.v7_normalizeFormMethod, false, normalizedPath, opts);\n    let currentLocation = state.location;\n    let nextLocation = createLocation(state.location, path, opts && opts.state); // When using navigate as a PUSH/REPLACE we aren't reading an already-encoded\n    // URL from window.location, so we need to encode it here so the behavior\n    // remains the same as POP and non-data-router usages.  new URL() does all\n    // the same encoding we'd get from a history.pushState/window.location read\n    // without having to touch history\n\n    nextLocation = _extends({}, nextLocation, init.history.encodeLocation(nextLocation));\n    let userReplace = opts && opts.replace != null ? opts.replace : undefined;\n    let historyAction = Action.Push;\n\n    if (userReplace === true) {\n      historyAction = Action.Replace;\n    } else if (userReplace === false) ;else if (submission != null && isMutationMethod(submission.formMethod) && submission.formAction === state.location.pathname + state.location.search) {\n      // By default on submissions to the current location we REPLACE so that\n      // users don't have to double-click the back button to get to the prior\n      // location.  If the user redirects to a different location from the\n      // action/loader this will be ignored and the redirect will be a PUSH\n      historyAction = Action.Replace;\n    }\n\n    let preventScrollReset = opts && \"preventScrollReset\" in opts ? opts.preventScrollReset === true : undefined;\n    let blockerKey = shouldBlockNavigation({\n      currentLocation,\n      nextLocation,\n      historyAction\n    });\n\n    if (blockerKey) {\n      // Put the blocker into a blocked state\n      updateBlocker(blockerKey, {\n        state: \"blocked\",\n        location: nextLocation,\n\n        proceed() {\n          updateBlocker(blockerKey, {\n            state: \"proceeding\",\n            proceed: undefined,\n            reset: undefined,\n            location: nextLocation\n          }); // Send the same navigation through\n\n          navigate(to, opts);\n        },\n\n        reset() {\n          let blockers = new Map(state.blockers);\n          blockers.set(blockerKey, IDLE_BLOCKER);\n          updateState({\n            blockers\n          });\n        }\n\n      });\n      return;\n    }\n\n    return await startNavigation(historyAction, nextLocation, {\n      submission,\n      // Send through the formData serialization error if we have one so we can\n      // render at the right error boundary after we match routes\n      pendingError: error,\n      preventScrollReset,\n      replace: opts && opts.replace,\n      enableViewTransition: opts && opts.unstable_viewTransition\n    });\n  } // Revalidate all current loaders.  If a navigation is in progress or if this\n  // is interrupted by a navigation, allow this to \"succeed\" by calling all\n  // loaders during the next loader round\n\n\n  function revalidate() {\n    interruptActiveLoads();\n    updateState({\n      revalidation: \"loading\"\n    }); // If we're currently submitting an action, we don't need to start a new\n    // navigation, we'll just let the follow up loader execution call all loaders\n\n    if (state.navigation.state === \"submitting\") {\n      return;\n    } // If we're currently in an idle state, start a new navigation for the current\n    // action/location and mark it as uninterrupted, which will skip the history\n    // update in completeNavigation\n\n\n    if (state.navigation.state === \"idle\") {\n      startNavigation(state.historyAction, state.location, {\n        startUninterruptedRevalidation: true\n      });\n      return;\n    } // Otherwise, if we're currently in a loading state, just start a new\n    // navigation to the navigation.location but do not trigger an uninterrupted\n    // revalidation so that history correctly updates once the navigation completes\n\n\n    startNavigation(pendingAction || state.historyAction, state.navigation.location, {\n      overrideNavigation: state.navigation\n    });\n  } // Start a navigation to the given action/location.  Can optionally provide a\n  // overrideNavigation which will override the normalLoad in the case of a redirect\n  // navigation\n\n\n  async function startNavigation(historyAction, location, opts) {\n    // Abort any in-progress navigations and start a new one. Unset any ongoing\n    // uninterrupted revalidations unless told otherwise, since we want this\n    // new navigation to update history normally\n    pendingNavigationController && pendingNavigationController.abort();\n    pendingNavigationController = null;\n    pendingAction = historyAction;\n    isUninterruptedRevalidation = (opts && opts.startUninterruptedRevalidation) === true; // Save the current scroll position every time we start a new navigation,\n    // and track whether we should reset scroll on completion\n\n    saveScrollPosition(state.location, state.matches);\n    pendingPreventScrollReset = (opts && opts.preventScrollReset) === true;\n    pendingViewTransitionEnabled = (opts && opts.enableViewTransition) === true;\n    let routesToUse = inFlightDataRoutes || dataRoutes;\n    let loadingNavigation = opts && opts.overrideNavigation;\n    let matches = matchRoutes(routesToUse, location, basename); // Short circuit with a 404 on the root error boundary if we match nothing\n\n    if (!matches) {\n      let error = getInternalRouterError(404, {\n        pathname: location.pathname\n      });\n      let {\n        matches: notFoundMatches,\n        route\n      } = getShortCircuitMatches(routesToUse); // Cancel all pending deferred on 404s since we don't keep any routes\n\n      cancelActiveDeferreds();\n      completeNavigation(location, {\n        matches: notFoundMatches,\n        loaderData: {},\n        errors: {\n          [route.id]: error\n        }\n      });\n      return;\n    } // Short circuit if it's only a hash change and not a revalidation or\n    // mutation submission.\n    //\n    // Ignore on initial page loads because since the initial load will always\n    // be \"same hash\".  For example, on /page#hash and submit a <Form method=\"post\">\n    // which will default to a navigation to /page\n\n\n    if (state.initialized && !isRevalidationRequired && isHashChangeOnly(state.location, location) && !(opts && opts.submission && isMutationMethod(opts.submission.formMethod))) {\n      completeNavigation(location, {\n        matches\n      });\n      return;\n    } // Create a controller/Request for this navigation\n\n\n    pendingNavigationController = new AbortController();\n    let request = createClientSideRequest(init.history, location, pendingNavigationController.signal, opts && opts.submission);\n    let pendingActionData;\n    let pendingError;\n\n    if (opts && opts.pendingError) {\n      // If we have a pendingError, it means the user attempted a GET submission\n      // with binary FormData so assign here and skip to handleLoaders.  That\n      // way we handle calling loaders above the boundary etc.  It's not really\n      // different from an actionError in that sense.\n      pendingError = {\n        [findNearestBoundary(matches).route.id]: opts.pendingError\n      };\n    } else if (opts && opts.submission && isMutationMethod(opts.submission.formMethod)) {\n      // Call action if we received an action submission\n      let actionOutput = await handleAction(request, location, opts.submission, matches, {\n        replace: opts.replace\n      });\n\n      if (actionOutput.shortCircuited) {\n        return;\n      }\n\n      pendingActionData = actionOutput.pendingActionData;\n      pendingError = actionOutput.pendingActionError;\n      loadingNavigation = getLoadingNavigation(location, opts.submission); // Create a GET request for the loaders\n\n      request = new Request(request.url, {\n        signal: request.signal\n      });\n    } // Call loaders\n\n\n    let {\n      shortCircuited,\n      loaderData,\n      errors\n    } = await handleLoaders(request, location, matches, loadingNavigation, opts && opts.submission, opts && opts.fetcherSubmission, opts && opts.replace, pendingActionData, pendingError);\n\n    if (shortCircuited) {\n      return;\n    } // Clean up now that the action/loaders have completed.  Don't clean up if\n    // we short circuited because pendingNavigationController will have already\n    // been assigned to a new controller for the next navigation\n\n\n    pendingNavigationController = null;\n    completeNavigation(location, _extends({\n      matches\n    }, pendingActionData ? {\n      actionData: pendingActionData\n    } : {}, {\n      loaderData,\n      errors\n    }));\n  } // Call the action matched by the leaf route for this navigation and handle\n  // redirects/errors\n\n\n  async function handleAction(request, location, submission, matches, opts) {\n    if (opts === void 0) {\n      opts = {};\n    }\n\n    interruptActiveLoads(); // Put us in a submitting state\n\n    let navigation = getSubmittingNavigation(location, submission);\n    updateState({\n      navigation\n    }); // Call our action and get the result\n\n    let result;\n    let actionMatch = getTargetMatch(matches, location);\n\n    if (!actionMatch.route.action && !actionMatch.route.lazy) {\n      result = {\n        type: ResultType.error,\n        error: getInternalRouterError(405, {\n          method: request.method,\n          pathname: location.pathname,\n          routeId: actionMatch.route.id\n        })\n      };\n    } else {\n      result = await callLoaderOrAction(\"action\", request, actionMatch, matches, manifest, mapRouteProperties, basename);\n\n      if (request.signal.aborted) {\n        return {\n          shortCircuited: true\n        };\n      }\n    }\n\n    if (isRedirectResult(result)) {\n      let replace;\n\n      if (opts && opts.replace != null) {\n        replace = opts.replace;\n      } else {\n        // If the user didn't explicity indicate replace behavior, replace if\n        // we redirected to the exact same location we're currently at to avoid\n        // double back-buttons\n        replace = result.location === state.location.pathname + state.location.search;\n      }\n\n      await startRedirectNavigation(state, result, {\n        submission,\n        replace\n      });\n      return {\n        shortCircuited: true\n      };\n    }\n\n    if (isErrorResult(result)) {\n      // Store off the pending error - we use it to determine which loaders\n      // to call and will commit it when we complete the navigation\n      let boundaryMatch = findNearestBoundary(matches, actionMatch.route.id); // By default, all submissions are REPLACE navigations, but if the\n      // action threw an error that'll be rendered in an errorElement, we fall\n      // back to PUSH so that the user can use the back button to get back to\n      // the pre-submission form location to try again\n\n      if ((opts && opts.replace) !== true) {\n        pendingAction = Action.Push;\n      }\n\n      return {\n        // Send back an empty object we can use to clear out any prior actionData\n        pendingActionData: {},\n        pendingActionError: {\n          [boundaryMatch.route.id]: result.error\n        }\n      };\n    }\n\n    if (isDeferredResult(result)) {\n      throw getInternalRouterError(400, {\n        type: \"defer-action\"\n      });\n    }\n\n    return {\n      pendingActionData: {\n        [actionMatch.route.id]: result.data\n      }\n    };\n  } // Call all applicable loaders for the given matches, handling redirects,\n  // errors, etc.\n\n\n  async function handleLoaders(request, location, matches, overrideNavigation, submission, fetcherSubmission, replace, pendingActionData, pendingError) {\n    // Figure out the right navigation we want to use for data loading\n    let loadingNavigation = overrideNavigation || getLoadingNavigation(location, submission); // If this was a redirect from an action we don't have a \"submission\" but\n    // we have it on the loading navigation so use that if available\n\n    let activeSubmission = submission || fetcherSubmission || getSubmissionFromNavigation(loadingNavigation);\n    let routesToUse = inFlightDataRoutes || dataRoutes;\n    let [matchesToLoad, revalidatingFetchers] = getMatchesToLoad(init.history, state, matches, activeSubmission, location, isRevalidationRequired, cancelledDeferredRoutes, cancelledFetcherLoads, fetchLoadMatches, fetchRedirectIds, routesToUse, basename, pendingActionData, pendingError); // Cancel pending deferreds for no-longer-matched routes or routes we're\n    // about to reload.  Note that if this is an action reload we would have\n    // already cancelled all pending deferreds so this would be a no-op\n\n    cancelActiveDeferreds(routeId => !(matches && matches.some(m => m.route.id === routeId)) || matchesToLoad && matchesToLoad.some(m => m.route.id === routeId));\n    pendingNavigationLoadId = ++incrementingLoadId; // Short circuit if we have no loaders to run\n\n    if (matchesToLoad.length === 0 && revalidatingFetchers.length === 0) {\n      let updatedFetchers = markFetchRedirectsDone();\n      completeNavigation(location, _extends({\n        matches,\n        loaderData: {},\n        // Commit pending error if we're short circuiting\n        errors: pendingError || null\n      }, pendingActionData ? {\n        actionData: pendingActionData\n      } : {}, updatedFetchers ? {\n        fetchers: new Map(state.fetchers)\n      } : {}));\n      return {\n        shortCircuited: true\n      };\n    } // If this is an uninterrupted revalidation, we remain in our current idle\n    // state.  If not, we need to switch to our loading state and load data,\n    // preserving any new action data or existing action data (in the case of\n    // a revalidation interrupting an actionReload)\n\n\n    if (!isUninterruptedRevalidation) {\n      revalidatingFetchers.forEach(rf => {\n        let fetcher = state.fetchers.get(rf.key);\n        let revalidatingFetcher = getLoadingFetcher(undefined, fetcher ? fetcher.data : undefined);\n        state.fetchers.set(rf.key, revalidatingFetcher);\n      });\n      let actionData = pendingActionData || state.actionData;\n      updateState(_extends({\n        navigation: loadingNavigation\n      }, actionData ? Object.keys(actionData).length === 0 ? {\n        actionData: null\n      } : {\n        actionData\n      } : {}, revalidatingFetchers.length > 0 ? {\n        fetchers: new Map(state.fetchers)\n      } : {}));\n    }\n\n    revalidatingFetchers.forEach(rf => {\n      if (fetchControllers.has(rf.key)) {\n        abortFetcher(rf.key);\n      }\n\n      if (rf.controller) {\n        // Fetchers use an independent AbortController so that aborting a fetcher\n        // (via deleteFetcher) does not abort the triggering navigation that\n        // triggered the revalidation\n        fetchControllers.set(rf.key, rf.controller);\n      }\n    }); // Proxy navigation abort through to revalidation fetchers\n\n    let abortPendingFetchRevalidations = () => revalidatingFetchers.forEach(f => abortFetcher(f.key));\n\n    if (pendingNavigationController) {\n      pendingNavigationController.signal.addEventListener(\"abort\", abortPendingFetchRevalidations);\n    }\n\n    let {\n      results,\n      loaderResults,\n      fetcherResults\n    } = await callLoadersAndMaybeResolveData(state.matches, matches, matchesToLoad, revalidatingFetchers, request);\n\n    if (request.signal.aborted) {\n      return {\n        shortCircuited: true\n      };\n    } // Clean up _after_ loaders have completed.  Don't clean up if we short\n    // circuited because fetchControllers would have been aborted and\n    // reassigned to new controllers for the next navigation\n\n\n    if (pendingNavigationController) {\n      pendingNavigationController.signal.removeEventListener(\"abort\", abortPendingFetchRevalidations);\n    }\n\n    revalidatingFetchers.forEach(rf => fetchControllers.delete(rf.key)); // If any loaders returned a redirect Response, start a new REPLACE navigation\n\n    let redirect = findRedirect(results);\n\n    if (redirect) {\n      if (redirect.idx >= matchesToLoad.length) {\n        // If this redirect came from a fetcher make sure we mark it in\n        // fetchRedirectIds so it doesn't get revalidated on the next set of\n        // loader executions\n        let fetcherKey = revalidatingFetchers[redirect.idx - matchesToLoad.length].key;\n        fetchRedirectIds.add(fetcherKey);\n      }\n\n      await startRedirectNavigation(state, redirect.result, {\n        replace\n      });\n      return {\n        shortCircuited: true\n      };\n    } // Process and commit output from loaders\n\n\n    let {\n      loaderData,\n      errors\n    } = processLoaderData(state, matches, matchesToLoad, loaderResults, pendingError, revalidatingFetchers, fetcherResults, activeDeferreds); // Wire up subscribers to update loaderData as promises settle\n\n    activeDeferreds.forEach((deferredData, routeId) => {\n      deferredData.subscribe(aborted => {\n        // Note: No need to updateState here since the TrackedPromise on\n        // loaderData is stable across resolve/reject\n        // Remove this instance if we were aborted or if promises have settled\n        if (aborted || deferredData.done) {\n          activeDeferreds.delete(routeId);\n        }\n      });\n    });\n    let updatedFetchers = markFetchRedirectsDone();\n    let didAbortFetchLoads = abortStaleFetchLoads(pendingNavigationLoadId);\n    let shouldUpdateFetchers = updatedFetchers || didAbortFetchLoads || revalidatingFetchers.length > 0;\n    return _extends({\n      loaderData,\n      errors\n    }, shouldUpdateFetchers ? {\n      fetchers: new Map(state.fetchers)\n    } : {});\n  }\n\n  function getFetcher(key) {\n    if (future.v7_fetcherPersist) {\n      activeFetchers.set(key, (activeFetchers.get(key) || 0) + 1); // If this fetcher was previously marked for deletion, unmark it since we\n      // have a new instance\n\n      if (deletedFetchers.has(key)) {\n        deletedFetchers.delete(key);\n      }\n    }\n\n    return state.fetchers.get(key) || IDLE_FETCHER;\n  } // Trigger a fetcher load/submit for the given fetcher key\n\n\n  function fetch(key, routeId, href, opts) {\n    if (isServer) {\n      throw new Error(\"router.fetch() was called during the server render, but it shouldn't be. \" + \"You are likely calling a useFetcher() method in the body of your component. \" + \"Try moving it to a useEffect or a callback.\");\n    }\n\n    if (fetchControllers.has(key)) abortFetcher(key);\n    let routesToUse = inFlightDataRoutes || dataRoutes;\n    let normalizedPath = normalizeTo(state.location, state.matches, basename, future.v7_prependBasename, href, routeId, opts == null ? void 0 : opts.relative);\n    let matches = matchRoutes(routesToUse, normalizedPath, basename);\n\n    if (!matches) {\n      setFetcherError(key, routeId, getInternalRouterError(404, {\n        pathname: normalizedPath\n      }));\n      return;\n    }\n\n    let {\n      path,\n      submission,\n      error\n    } = normalizeNavigateOptions(future.v7_normalizeFormMethod, true, normalizedPath, opts);\n\n    if (error) {\n      setFetcherError(key, routeId, error);\n      return;\n    }\n\n    let match = getTargetMatch(matches, path);\n    pendingPreventScrollReset = (opts && opts.preventScrollReset) === true;\n\n    if (submission && isMutationMethod(submission.formMethod)) {\n      handleFetcherAction(key, routeId, path, match, matches, submission);\n      return;\n    } // Store off the match so we can call it's shouldRevalidate on subsequent\n    // revalidations\n\n\n    fetchLoadMatches.set(key, {\n      routeId,\n      path\n    });\n    handleFetcherLoader(key, routeId, path, match, matches, submission);\n  } // Call the action for the matched fetcher.submit(), and then handle redirects,\n  // errors, and revalidation\n\n\n  async function handleFetcherAction(key, routeId, path, match, requestMatches, submission) {\n    interruptActiveLoads();\n    fetchLoadMatches.delete(key);\n\n    if (!match.route.action && !match.route.lazy) {\n      let error = getInternalRouterError(405, {\n        method: submission.formMethod,\n        pathname: path,\n        routeId: routeId\n      });\n      setFetcherError(key, routeId, error);\n      return;\n    } // Put this fetcher into it's submitting state\n\n\n    let existingFetcher = state.fetchers.get(key);\n    let fetcher = getSubmittingFetcher(submission, existingFetcher);\n    state.fetchers.set(key, fetcher);\n    updateState({\n      fetchers: new Map(state.fetchers)\n    }); // Call the action for the fetcher\n\n    let abortController = new AbortController();\n    let fetchRequest = createClientSideRequest(init.history, path, abortController.signal, submission);\n    fetchControllers.set(key, abortController);\n    let originatingLoadId = incrementingLoadId;\n    let actionResult = await callLoaderOrAction(\"action\", fetchRequest, match, requestMatches, manifest, mapRouteProperties, basename);\n\n    if (fetchRequest.signal.aborted) {\n      // We can delete this so long as we weren't aborted by our own fetcher\n      // re-submit which would have put _new_ controller is in fetchControllers\n      if (fetchControllers.get(key) === abortController) {\n        fetchControllers.delete(key);\n      }\n\n      return;\n    }\n\n    if (deletedFetchers.has(key)) {\n      state.fetchers.set(key, getDoneFetcher(undefined));\n      updateState({\n        fetchers: new Map(state.fetchers)\n      });\n      return;\n    }\n\n    if (isRedirectResult(actionResult)) {\n      fetchControllers.delete(key);\n\n      if (pendingNavigationLoadId > originatingLoadId) {\n        // A new navigation was kicked off after our action started, so that\n        // should take precedence over this redirect navigation.  We already\n        // set isRevalidationRequired so all loaders for the new route should\n        // fire unless opted out via shouldRevalidate\n        let doneFetcher = getDoneFetcher(undefined);\n        state.fetchers.set(key, doneFetcher);\n        updateState({\n          fetchers: new Map(state.fetchers)\n        });\n        return;\n      } else {\n        fetchRedirectIds.add(key);\n        let loadingFetcher = getLoadingFetcher(submission);\n        state.fetchers.set(key, loadingFetcher);\n        updateState({\n          fetchers: new Map(state.fetchers)\n        });\n        return startRedirectNavigation(state, actionResult, {\n          fetcherSubmission: submission\n        });\n      }\n    } // Process any non-redirect errors thrown\n\n\n    if (isErrorResult(actionResult)) {\n      setFetcherError(key, routeId, actionResult.error);\n      return;\n    }\n\n    if (isDeferredResult(actionResult)) {\n      throw getInternalRouterError(400, {\n        type: \"defer-action\"\n      });\n    } // Start the data load for current matches, or the next location if we're\n    // in the middle of a navigation\n\n\n    let nextLocation = state.navigation.location || state.location;\n    let revalidationRequest = createClientSideRequest(init.history, nextLocation, abortController.signal);\n    let routesToUse = inFlightDataRoutes || dataRoutes;\n    let matches = state.navigation.state !== \"idle\" ? matchRoutes(routesToUse, state.navigation.location, basename) : state.matches;\n    invariant(matches, \"Didn't find any matches after fetcher action\");\n    let loadId = ++incrementingLoadId;\n    fetchReloadIds.set(key, loadId);\n    let loadFetcher = getLoadingFetcher(submission, actionResult.data);\n    state.fetchers.set(key, loadFetcher);\n    let [matchesToLoad, revalidatingFetchers] = getMatchesToLoad(init.history, state, matches, submission, nextLocation, isRevalidationRequired, cancelledDeferredRoutes, cancelledFetcherLoads, fetchLoadMatches, fetchRedirectIds, routesToUse, basename, {\n      [match.route.id]: actionResult.data\n    }, undefined // No need to send through errors since we short circuit above\n    ); // Put all revalidating fetchers into the loading state, except for the\n    // current fetcher which we want to keep in it's current loading state which\n    // contains it's action submission info + action data\n\n    revalidatingFetchers.filter(rf => rf.key !== key).forEach(rf => {\n      let staleKey = rf.key;\n      let existingFetcher = state.fetchers.get(staleKey);\n      let revalidatingFetcher = getLoadingFetcher(undefined, existingFetcher ? existingFetcher.data : undefined);\n      state.fetchers.set(staleKey, revalidatingFetcher);\n\n      if (fetchControllers.has(staleKey)) {\n        abortFetcher(staleKey);\n      }\n\n      if (rf.controller) {\n        fetchControllers.set(staleKey, rf.controller);\n      }\n    });\n    updateState({\n      fetchers: new Map(state.fetchers)\n    });\n\n    let abortPendingFetchRevalidations = () => revalidatingFetchers.forEach(rf => abortFetcher(rf.key));\n\n    abortController.signal.addEventListener(\"abort\", abortPendingFetchRevalidations);\n    let {\n      results,\n      loaderResults,\n      fetcherResults\n    } = await callLoadersAndMaybeResolveData(state.matches, matches, matchesToLoad, revalidatingFetchers, revalidationRequest);\n\n    if (abortController.signal.aborted) {\n      return;\n    }\n\n    abortController.signal.removeEventListener(\"abort\", abortPendingFetchRevalidations);\n    fetchReloadIds.delete(key);\n    fetchControllers.delete(key);\n    revalidatingFetchers.forEach(r => fetchControllers.delete(r.key));\n    let redirect = findRedirect(results);\n\n    if (redirect) {\n      if (redirect.idx >= matchesToLoad.length) {\n        // If this redirect came from a fetcher make sure we mark it in\n        // fetchRedirectIds so it doesn't get revalidated on the next set of\n        // loader executions\n        let fetcherKey = revalidatingFetchers[redirect.idx - matchesToLoad.length].key;\n        fetchRedirectIds.add(fetcherKey);\n      }\n\n      return startRedirectNavigation(state, redirect.result);\n    } // Process and commit output from loaders\n\n\n    let {\n      loaderData,\n      errors\n    } = processLoaderData(state, state.matches, matchesToLoad, loaderResults, undefined, revalidatingFetchers, fetcherResults, activeDeferreds); // Since we let revalidations complete even if the submitting fetcher was\n    // deleted, only put it back to idle if it hasn't been deleted\n\n    if (state.fetchers.has(key)) {\n      let doneFetcher = getDoneFetcher(actionResult.data);\n      state.fetchers.set(key, doneFetcher);\n    }\n\n    abortStaleFetchLoads(loadId); // If we are currently in a navigation loading state and this fetcher is\n    // more recent than the navigation, we want the newer data so abort the\n    // navigation and complete it with the fetcher data\n\n    if (state.navigation.state === \"loading\" && loadId > pendingNavigationLoadId) {\n      invariant(pendingAction, \"Expected pending action\");\n      pendingNavigationController && pendingNavigationController.abort();\n      completeNavigation(state.navigation.location, {\n        matches,\n        loaderData,\n        errors,\n        fetchers: new Map(state.fetchers)\n      });\n    } else {\n      // otherwise just update with the fetcher data, preserving any existing\n      // loaderData for loaders that did not need to reload.  We have to\n      // manually merge here since we aren't going through completeNavigation\n      updateState({\n        errors,\n        loaderData: mergeLoaderData(state.loaderData, loaderData, matches, errors),\n        fetchers: new Map(state.fetchers)\n      });\n      isRevalidationRequired = false;\n    }\n  } // Call the matched loader for fetcher.load(), handling redirects, errors, etc.\n\n\n  async function handleFetcherLoader(key, routeId, path, match, matches, submission) {\n    let existingFetcher = state.fetchers.get(key); // Put this fetcher into it's loading state\n\n    let loadingFetcher = getLoadingFetcher(submission, existingFetcher ? existingFetcher.data : undefined);\n    state.fetchers.set(key, loadingFetcher);\n    updateState({\n      fetchers: new Map(state.fetchers)\n    }); // Call the loader for this fetcher route match\n\n    let abortController = new AbortController();\n    let fetchRequest = createClientSideRequest(init.history, path, abortController.signal);\n    fetchControllers.set(key, abortController);\n    let originatingLoadId = incrementingLoadId;\n    let result = await callLoaderOrAction(\"loader\", fetchRequest, match, matches, manifest, mapRouteProperties, basename); // Deferred isn't supported for fetcher loads, await everything and treat it\n    // as a normal load.  resolveDeferredData will return undefined if this\n    // fetcher gets aborted, so we just leave result untouched and short circuit\n    // below if that happens\n\n    if (isDeferredResult(result)) {\n      result = (await resolveDeferredData(result, fetchRequest.signal, true)) || result;\n    } // We can delete this so long as we weren't aborted by our our own fetcher\n    // re-load which would have put _new_ controller is in fetchControllers\n\n\n    if (fetchControllers.get(key) === abortController) {\n      fetchControllers.delete(key);\n    }\n\n    if (fetchRequest.signal.aborted) {\n      return;\n    }\n\n    if (deletedFetchers.has(key)) {\n      state.fetchers.set(key, getDoneFetcher(undefined));\n      updateState({\n        fetchers: new Map(state.fetchers)\n      });\n      return;\n    } // If the loader threw a redirect Response, start a new REPLACE navigation\n\n\n    if (isRedirectResult(result)) {\n      if (pendingNavigationLoadId > originatingLoadId) {\n        // A new navigation was kicked off after our loader started, so that\n        // should take precedence over this redirect navigation\n        let doneFetcher = getDoneFetcher(undefined);\n        state.fetchers.set(key, doneFetcher);\n        updateState({\n          fetchers: new Map(state.fetchers)\n        });\n        return;\n      } else {\n        fetchRedirectIds.add(key);\n        await startRedirectNavigation(state, result);\n        return;\n      }\n    } // Process any non-redirect errors thrown\n\n\n    if (isErrorResult(result)) {\n      setFetcherError(key, routeId, result.error);\n      return;\n    }\n\n    invariant(!isDeferredResult(result), \"Unhandled fetcher deferred data\"); // Put the fetcher back into an idle state\n\n    let doneFetcher = getDoneFetcher(result.data);\n    state.fetchers.set(key, doneFetcher);\n    updateState({\n      fetchers: new Map(state.fetchers)\n    });\n  }\n  /**\n   * Utility function to handle redirects returned from an action or loader.\n   * Normally, a redirect \"replaces\" the navigation that triggered it.  So, for\n   * example:\n   *\n   *  - user is on /a\n   *  - user clicks a link to /b\n   *  - loader for /b redirects to /c\n   *\n   * In a non-JS app the browser would track the in-flight navigation to /b and\n   * then replace it with /c when it encountered the redirect response.  In\n   * the end it would only ever update the URL bar with /c.\n   *\n   * In client-side routing using pushState/replaceState, we aim to emulate\n   * this behavior and we also do not update history until the end of the\n   * navigation (including processed redirects).  This means that we never\n   * actually touch history until we've processed redirects, so we just use\n   * the history action from the original navigation (PUSH or REPLACE).\n   */\n\n\n  async function startRedirectNavigation(state, redirect, _temp) {\n    let {\n      submission,\n      fetcherSubmission,\n      replace\n    } = _temp === void 0 ? {} : _temp;\n\n    if (redirect.revalidate) {\n      isRevalidationRequired = true;\n    }\n\n    let redirectLocation = createLocation(state.location, redirect.location, {\n      _isRedirect: true\n    });\n    invariant(redirectLocation, \"Expected a location on the redirect navigation\");\n\n    if (isBrowser) {\n      let isDocumentReload = false;\n\n      if (redirect.reloadDocument) {\n        // Hard reload if the response contained X-Remix-Reload-Document\n        isDocumentReload = true;\n      } else if (ABSOLUTE_URL_REGEX.test(redirect.location)) {\n        const url = init.history.createURL(redirect.location);\n        isDocumentReload = // Hard reload if it's an absolute URL to a new origin\n        url.origin !== routerWindow.location.origin || // Hard reload if it's an absolute URL that does not match our basename\n        stripBasename(url.pathname, basename) == null;\n      }\n\n      if (isDocumentReload) {\n        if (replace) {\n          routerWindow.location.replace(redirect.location);\n        } else {\n          routerWindow.location.assign(redirect.location);\n        }\n\n        return;\n      }\n    } // There's no need to abort on redirects, since we don't detect the\n    // redirect until the action/loaders have settled\n\n\n    pendingNavigationController = null;\n    let redirectHistoryAction = replace === true ? Action.Replace : Action.Push; // Use the incoming submission if provided, fallback on the active one in\n    // state.navigation\n\n    let {\n      formMethod,\n      formAction,\n      formEncType\n    } = state.navigation;\n\n    if (!submission && !fetcherSubmission && formMethod && formAction && formEncType) {\n      submission = getSubmissionFromNavigation(state.navigation);\n    } // If this was a 307/308 submission we want to preserve the HTTP method and\n    // re-submit the GET/POST/PUT/PATCH/DELETE as a submission navigation to the\n    // redirected location\n\n\n    let activeSubmission = submission || fetcherSubmission;\n\n    if (redirectPreserveMethodStatusCodes.has(redirect.status) && activeSubmission && isMutationMethod(activeSubmission.formMethod)) {\n      await startNavigation(redirectHistoryAction, redirectLocation, {\n        submission: _extends({}, activeSubmission, {\n          formAction: redirect.location\n        }),\n        // Preserve this flag across redirects\n        preventScrollReset: pendingPreventScrollReset\n      });\n    } else {\n      // If we have a navigation submission, we will preserve it through the\n      // redirect navigation\n      let overrideNavigation = getLoadingNavigation(redirectLocation, submission);\n      await startNavigation(redirectHistoryAction, redirectLocation, {\n        overrideNavigation,\n        // Send fetcher submissions through for shouldRevalidate\n        fetcherSubmission,\n        // Preserve this flag across redirects\n        preventScrollReset: pendingPreventScrollReset\n      });\n    }\n  }\n\n  async function callLoadersAndMaybeResolveData(currentMatches, matches, matchesToLoad, fetchersToLoad, request) {\n    // Call all navigation loaders and revalidating fetcher loaders in parallel,\n    // then slice off the results into separate arrays so we can handle them\n    // accordingly\n    let results = await Promise.all([...matchesToLoad.map(match => callLoaderOrAction(\"loader\", request, match, matches, manifest, mapRouteProperties, basename)), ...fetchersToLoad.map(f => {\n      if (f.matches && f.match && f.controller) {\n        return callLoaderOrAction(\"loader\", createClientSideRequest(init.history, f.path, f.controller.signal), f.match, f.matches, manifest, mapRouteProperties, basename);\n      } else {\n        let error = {\n          type: ResultType.error,\n          error: getInternalRouterError(404, {\n            pathname: f.path\n          })\n        };\n        return error;\n      }\n    })]);\n    let loaderResults = results.slice(0, matchesToLoad.length);\n    let fetcherResults = results.slice(matchesToLoad.length);\n    await Promise.all([resolveDeferredResults(currentMatches, matchesToLoad, loaderResults, loaderResults.map(() => request.signal), false, state.loaderData), resolveDeferredResults(currentMatches, fetchersToLoad.map(f => f.match), fetcherResults, fetchersToLoad.map(f => f.controller ? f.controller.signal : null), true)]);\n    return {\n      results,\n      loaderResults,\n      fetcherResults\n    };\n  }\n\n  function interruptActiveLoads() {\n    // Every interruption triggers a revalidation\n    isRevalidationRequired = true; // Cancel pending route-level deferreds and mark cancelled routes for\n    // revalidation\n\n    cancelledDeferredRoutes.push(...cancelActiveDeferreds()); // Abort in-flight fetcher loads\n\n    fetchLoadMatches.forEach((_, key) => {\n      if (fetchControllers.has(key)) {\n        cancelledFetcherLoads.push(key);\n        abortFetcher(key);\n      }\n    });\n  }\n\n  function setFetcherError(key, routeId, error) {\n    let boundaryMatch = findNearestBoundary(state.matches, routeId);\n    deleteFetcher(key);\n    updateState({\n      errors: {\n        [boundaryMatch.route.id]: error\n      },\n      fetchers: new Map(state.fetchers)\n    });\n  }\n\n  function deleteFetcher(key) {\n    let fetcher = state.fetchers.get(key); // Don't abort the controller if this is a deletion of a fetcher.submit()\n    // in it's loading phase since - we don't want to abort the corresponding\n    // revalidation and want them to complete and land\n\n    if (fetchControllers.has(key) && !(fetcher && fetcher.state === \"loading\" && fetchReloadIds.has(key))) {\n      abortFetcher(key);\n    }\n\n    fetchLoadMatches.delete(key);\n    fetchReloadIds.delete(key);\n    fetchRedirectIds.delete(key);\n    deletedFetchers.delete(key);\n    state.fetchers.delete(key);\n  }\n\n  function deleteFetcherAndUpdateState(key) {\n    if (future.v7_fetcherPersist) {\n      let count = (activeFetchers.get(key) || 0) - 1;\n\n      if (count <= 0) {\n        activeFetchers.delete(key);\n        deletedFetchers.add(key);\n      } else {\n        activeFetchers.set(key, count);\n      }\n    } else {\n      deleteFetcher(key);\n    }\n\n    updateState({\n      fetchers: new Map(state.fetchers)\n    });\n  }\n\n  function abortFetcher(key) {\n    let controller = fetchControllers.get(key);\n    invariant(controller, \"Expected fetch controller: \" + key);\n    controller.abort();\n    fetchControllers.delete(key);\n  }\n\n  function markFetchersDone(keys) {\n    for (let key of keys) {\n      let fetcher = getFetcher(key);\n      let doneFetcher = getDoneFetcher(fetcher.data);\n      state.fetchers.set(key, doneFetcher);\n    }\n  }\n\n  function markFetchRedirectsDone() {\n    let doneKeys = [];\n    let updatedFetchers = false;\n\n    for (let key of fetchRedirectIds) {\n      let fetcher = state.fetchers.get(key);\n      invariant(fetcher, \"Expected fetcher: \" + key);\n\n      if (fetcher.state === \"loading\") {\n        fetchRedirectIds.delete(key);\n        doneKeys.push(key);\n        updatedFetchers = true;\n      }\n    }\n\n    markFetchersDone(doneKeys);\n    return updatedFetchers;\n  }\n\n  function abortStaleFetchLoads(landedId) {\n    let yeetedKeys = [];\n\n    for (let [key, id] of fetchReloadIds) {\n      if (id < landedId) {\n        let fetcher = state.fetchers.get(key);\n        invariant(fetcher, \"Expected fetcher: \" + key);\n\n        if (fetcher.state === \"loading\") {\n          abortFetcher(key);\n          fetchReloadIds.delete(key);\n          yeetedKeys.push(key);\n        }\n      }\n    }\n\n    markFetchersDone(yeetedKeys);\n    return yeetedKeys.length > 0;\n  }\n\n  function getBlocker(key, fn) {\n    let blocker = state.blockers.get(key) || IDLE_BLOCKER;\n\n    if (blockerFunctions.get(key) !== fn) {\n      blockerFunctions.set(key, fn);\n    }\n\n    return blocker;\n  }\n\n  function deleteBlocker(key) {\n    state.blockers.delete(key);\n    blockerFunctions.delete(key);\n  } // Utility function to update blockers, ensuring valid state transitions\n\n\n  function updateBlocker(key, newBlocker) {\n    let blocker = state.blockers.get(key) || IDLE_BLOCKER; // Poor mans state machine :)\n    // https://mermaid.live/edit#pako:eNqVkc9OwzAMxl8l8nnjAYrEtDIOHEBIgwvKJTReGy3_lDpIqO27k6awMG0XcrLlnz87nwdonESogKXXBuE79rq75XZO3-yHds0RJVuv70YrPlUrCEe2HfrORS3rubqZfuhtpg5C9wk5tZ4VKcRUq88q9Z8RS0-48cE1iHJkL0ugbHuFLus9L6spZy8nX9MP2CNdomVaposqu3fGayT8T8-jJQwhepo_UtpgBQaDEUom04dZhAN1aJBDlUKJBxE1ceB2Smj0Mln-IBW5AFU2dwUiktt_2Qaq2dBfaKdEup85UV7Yd-dKjlnkabl2Pvr0DTkTreM\n\n    invariant(blocker.state === \"unblocked\" && newBlocker.state === \"blocked\" || blocker.state === \"blocked\" && newBlocker.state === \"blocked\" || blocker.state === \"blocked\" && newBlocker.state === \"proceeding\" || blocker.state === \"blocked\" && newBlocker.state === \"unblocked\" || blocker.state === \"proceeding\" && newBlocker.state === \"unblocked\", \"Invalid blocker state transition: \" + blocker.state + \" -> \" + newBlocker.state);\n    let blockers = new Map(state.blockers);\n    blockers.set(key, newBlocker);\n    updateState({\n      blockers\n    });\n  }\n\n  function shouldBlockNavigation(_ref2) {\n    let {\n      currentLocation,\n      nextLocation,\n      historyAction\n    } = _ref2;\n\n    if (blockerFunctions.size === 0) {\n      return;\n    } // We ony support a single active blocker at the moment since we don't have\n    // any compelling use cases for multi-blocker yet\n\n\n    if (blockerFunctions.size > 1) {\n      warning(false, \"A router only supports one blocker at a time\");\n    }\n\n    let entries = Array.from(blockerFunctions.entries());\n    let [blockerKey, blockerFunction] = entries[entries.length - 1];\n    let blocker = state.blockers.get(blockerKey);\n\n    if (blocker && blocker.state === \"proceeding\") {\n      // If the blocker is currently proceeding, we don't need to re-check\n      // it and can let this navigation continue\n      return;\n    } // At this point, we know we're unblocked/blocked so we need to check the\n    // user-provided blocker function\n\n\n    if (blockerFunction({\n      currentLocation,\n      nextLocation,\n      historyAction\n    })) {\n      return blockerKey;\n    }\n  }\n\n  function cancelActiveDeferreds(predicate) {\n    let cancelledRouteIds = [];\n    activeDeferreds.forEach((dfd, routeId) => {\n      if (!predicate || predicate(routeId)) {\n        // Cancel the deferred - but do not remove from activeDeferreds here -\n        // we rely on the subscribers to do that so our tests can assert proper\n        // cleanup via _internalActiveDeferreds\n        dfd.cancel();\n        cancelledRouteIds.push(routeId);\n        activeDeferreds.delete(routeId);\n      }\n    });\n    return cancelledRouteIds;\n  } // Opt in to capturing and reporting scroll positions during navigations,\n  // used by the <ScrollRestoration> component\n\n\n  function enableScrollRestoration(positions, getPosition, getKey) {\n    savedScrollPositions = positions;\n    getScrollPosition = getPosition;\n    getScrollRestorationKey = getKey || null; // Perform initial hydration scroll restoration, since we miss the boat on\n    // the initial updateState() because we've not yet rendered <ScrollRestoration/>\n    // and therefore have no savedScrollPositions available\n\n    if (!initialScrollRestored && state.navigation === IDLE_NAVIGATION) {\n      initialScrollRestored = true;\n      let y = getSavedScrollPosition(state.location, state.matches);\n\n      if (y != null) {\n        updateState({\n          restoreScrollPosition: y\n        });\n      }\n    }\n\n    return () => {\n      savedScrollPositions = null;\n      getScrollPosition = null;\n      getScrollRestorationKey = null;\n    };\n  }\n\n  function getScrollKey(location, matches) {\n    if (getScrollRestorationKey) {\n      let key = getScrollRestorationKey(location, matches.map(m => convertRouteMatchToUiMatch(m, state.loaderData)));\n      return key || location.key;\n    }\n\n    return location.key;\n  }\n\n  function saveScrollPosition(location, matches) {\n    if (savedScrollPositions && getScrollPosition) {\n      let key = getScrollKey(location, matches);\n      savedScrollPositions[key] = getScrollPosition();\n    }\n  }\n\n  function getSavedScrollPosition(location, matches) {\n    if (savedScrollPositions) {\n      let key = getScrollKey(location, matches);\n      let y = savedScrollPositions[key];\n\n      if (typeof y === \"number\") {\n        return y;\n      }\n    }\n\n    return null;\n  }\n\n  function _internalSetRoutes(newRoutes) {\n    manifest = {};\n    inFlightDataRoutes = convertRoutesToDataRoutes(newRoutes, mapRouteProperties, undefined, manifest);\n  }\n\n  router = {\n    get basename() {\n      return basename;\n    },\n\n    get state() {\n      return state;\n    },\n\n    get routes() {\n      return dataRoutes;\n    },\n\n    get window() {\n      return routerWindow;\n    },\n\n    initialize,\n    subscribe,\n    enableScrollRestoration,\n    navigate,\n    fetch,\n    revalidate,\n    // Passthrough to history-aware createHref used by useHref so we get proper\n    // hash-aware URLs in DOM paths\n    createHref: to => init.history.createHref(to),\n    encodeLocation: to => init.history.encodeLocation(to),\n    getFetcher,\n    deleteFetcher: deleteFetcherAndUpdateState,\n    dispose,\n    getBlocker,\n    deleteBlocker,\n    _internalFetchControllers: fetchControllers,\n    _internalActiveDeferreds: activeDeferreds,\n    // TODO: Remove setRoutes, it's temporary to avoid dealing with\n    // updating the tree while validating the update algorithm.\n    _internalSetRoutes\n  };\n  return router;\n} //#endregion\n////////////////////////////////////////////////////////////////////////////////\n//#region createStaticHandler\n////////////////////////////////////////////////////////////////////////////////\n\n\nconst UNSAFE_DEFERRED_SYMBOL = Symbol(\"deferred\");\n\nfunction createStaticHandler(routes, opts) {\n  invariant(routes.length > 0, \"You must provide a non-empty routes array to createStaticHandler\");\n  let manifest = {};\n  let basename = (opts ? opts.basename : null) || \"/\";\n  let mapRouteProperties;\n\n  if (opts != null && opts.mapRouteProperties) {\n    mapRouteProperties = opts.mapRouteProperties;\n  } else if (opts != null && opts.detectErrorBoundary) {\n    // If they are still using the deprecated version, wrap it with the new API\n    let detectErrorBoundary = opts.detectErrorBoundary;\n\n    mapRouteProperties = route => ({\n      hasErrorBoundary: detectErrorBoundary(route)\n    });\n  } else {\n    mapRouteProperties = defaultMapRouteProperties;\n  }\n\n  let dataRoutes = convertRoutesToDataRoutes(routes, mapRouteProperties, undefined, manifest);\n  /**\n   * The query() method is intended for document requests, in which we want to\n   * call an optional action and potentially multiple loaders for all nested\n   * routes.  It returns a StaticHandlerContext object, which is very similar\n   * to the router state (location, loaderData, actionData, errors, etc.) and\n   * also adds SSR-specific information such as the statusCode and headers\n   * from action/loaders Responses.\n   *\n   * It _should_ never throw and should report all errors through the\n   * returned context.errors object, properly associating errors to their error\n   * boundary.  Additionally, it tracks _deepestRenderedBoundaryId which can be\n   * used to emulate React error boundaries during SSr by performing a second\n   * pass only down to the boundaryId.\n   *\n   * The one exception where we do not return a StaticHandlerContext is when a\n   * redirect response is returned or thrown from any action/loader.  We\n   * propagate that out and return the raw Response so the HTTP server can\n   * return it directly.\n   */\n\n  async function query(request, _temp2) {\n    let {\n      requestContext\n    } = _temp2 === void 0 ? {} : _temp2;\n    let url = new URL(request.url);\n    let method = request.method;\n    let location = createLocation(\"\", createPath(url), null, \"default\");\n    let matches = matchRoutes(dataRoutes, location, basename); // SSR supports HEAD requests while SPA doesn't\n\n    if (!isValidMethod(method) && method !== \"HEAD\") {\n      let error = getInternalRouterError(405, {\n        method\n      });\n      let {\n        matches: methodNotAllowedMatches,\n        route\n      } = getShortCircuitMatches(dataRoutes);\n      return {\n        basename,\n        location,\n        matches: methodNotAllowedMatches,\n        loaderData: {},\n        actionData: null,\n        errors: {\n          [route.id]: error\n        },\n        statusCode: error.status,\n        loaderHeaders: {},\n        actionHeaders: {},\n        activeDeferreds: null\n      };\n    } else if (!matches) {\n      let error = getInternalRouterError(404, {\n        pathname: location.pathname\n      });\n      let {\n        matches: notFoundMatches,\n        route\n      } = getShortCircuitMatches(dataRoutes);\n      return {\n        basename,\n        location,\n        matches: notFoundMatches,\n        loaderData: {},\n        actionData: null,\n        errors: {\n          [route.id]: error\n        },\n        statusCode: error.status,\n        loaderHeaders: {},\n        actionHeaders: {},\n        activeDeferreds: null\n      };\n    }\n\n    let result = await queryImpl(request, location, matches, requestContext);\n\n    if (isResponse(result)) {\n      return result;\n    } // When returning StaticHandlerContext, we patch back in the location here\n    // since we need it for React Context.  But this helps keep our submit and\n    // loadRouteData operating on a Request instead of a Location\n\n\n    return _extends({\n      location,\n      basename\n    }, result);\n  }\n  /**\n   * The queryRoute() method is intended for targeted route requests, either\n   * for fetch ?_data requests or resource route requests.  In this case, we\n   * are only ever calling a single action or loader, and we are returning the\n   * returned value directly.  In most cases, this will be a Response returned\n   * from the action/loader, but it may be a primitive or other value as well -\n   * and in such cases the calling context should handle that accordingly.\n   *\n   * We do respect the throw/return differentiation, so if an action/loader\n   * throws, then this method will throw the value.  This is important so we\n   * can do proper boundary identification in Remix where a thrown Response\n   * must go to the Catch Boundary but a returned Response is happy-path.\n   *\n   * One thing to note is that any Router-initiated Errors that make sense\n   * to associate with a status code will be thrown as an ErrorResponse\n   * instance which include the raw Error, such that the calling context can\n   * serialize the error as they see fit while including the proper response\n   * code.  Examples here are 404 and 405 errors that occur prior to reaching\n   * any user-defined loaders.\n   */\n\n\n  async function queryRoute(request, _temp3) {\n    let {\n      routeId,\n      requestContext\n    } = _temp3 === void 0 ? {} : _temp3;\n    let url = new URL(request.url);\n    let method = request.method;\n    let location = createLocation(\"\", createPath(url), null, \"default\");\n    let matches = matchRoutes(dataRoutes, location, basename); // SSR supports HEAD requests while SPA doesn't\n\n    if (!isValidMethod(method) && method !== \"HEAD\" && method !== \"OPTIONS\") {\n      throw getInternalRouterError(405, {\n        method\n      });\n    } else if (!matches) {\n      throw getInternalRouterError(404, {\n        pathname: location.pathname\n      });\n    }\n\n    let match = routeId ? matches.find(m => m.route.id === routeId) : getTargetMatch(matches, location);\n\n    if (routeId && !match) {\n      throw getInternalRouterError(403, {\n        pathname: location.pathname,\n        routeId\n      });\n    } else if (!match) {\n      // This should never hit I don't think?\n      throw getInternalRouterError(404, {\n        pathname: location.pathname\n      });\n    }\n\n    let result = await queryImpl(request, location, matches, requestContext, match);\n\n    if (isResponse(result)) {\n      return result;\n    }\n\n    let error = result.errors ? Object.values(result.errors)[0] : undefined;\n\n    if (error !== undefined) {\n      // If we got back result.errors, that means the loader/action threw\n      // _something_ that wasn't a Response, but it's not guaranteed/required\n      // to be an `instanceof Error` either, so we have to use throw here to\n      // preserve the \"error\" state outside of queryImpl.\n      throw error;\n    } // Pick off the right state value to return\n\n\n    if (result.actionData) {\n      return Object.values(result.actionData)[0];\n    }\n\n    if (result.loaderData) {\n      var _result$activeDeferre;\n\n      let data = Object.values(result.loaderData)[0];\n\n      if ((_result$activeDeferre = result.activeDeferreds) != null && _result$activeDeferre[match.route.id]) {\n        data[UNSAFE_DEFERRED_SYMBOL] = result.activeDeferreds[match.route.id];\n      }\n\n      return data;\n    }\n\n    return undefined;\n  }\n\n  async function queryImpl(request, location, matches, requestContext, routeMatch) {\n    invariant(request.signal, \"query()/queryRoute() requests must contain an AbortController signal\");\n\n    try {\n      if (isMutationMethod(request.method.toLowerCase())) {\n        let result = await submit(request, matches, routeMatch || getTargetMatch(matches, location), requestContext, routeMatch != null);\n        return result;\n      }\n\n      let result = await loadRouteData(request, matches, requestContext, routeMatch);\n      return isResponse(result) ? result : _extends({}, result, {\n        actionData: null,\n        actionHeaders: {}\n      });\n    } catch (e) {\n      // If the user threw/returned a Response in callLoaderOrAction, we throw\n      // it to bail out and then return or throw here based on whether the user\n      // returned or threw\n      if (isQueryRouteResponse(e)) {\n        if (e.type === ResultType.error) {\n          throw e.response;\n        }\n\n        return e.response;\n      } // Redirects are always returned since they don't propagate to catch\n      // boundaries\n\n\n      if (isRedirectResponse(e)) {\n        return e;\n      }\n\n      throw e;\n    }\n  }\n\n  async function submit(request, matches, actionMatch, requestContext, isRouteRequest) {\n    let result;\n\n    if (!actionMatch.route.action && !actionMatch.route.lazy) {\n      let error = getInternalRouterError(405, {\n        method: request.method,\n        pathname: new URL(request.url).pathname,\n        routeId: actionMatch.route.id\n      });\n\n      if (isRouteRequest) {\n        throw error;\n      }\n\n      result = {\n        type: ResultType.error,\n        error\n      };\n    } else {\n      result = await callLoaderOrAction(\"action\", request, actionMatch, matches, manifest, mapRouteProperties, basename, {\n        isStaticRequest: true,\n        isRouteRequest,\n        requestContext\n      });\n\n      if (request.signal.aborted) {\n        let method = isRouteRequest ? \"queryRoute\" : \"query\";\n        throw new Error(method + \"() call aborted: \" + request.method + \" \" + request.url);\n      }\n    }\n\n    if (isRedirectResult(result)) {\n      // Uhhhh - this should never happen, we should always throw these from\n      // callLoaderOrAction, but the type narrowing here keeps TS happy and we\n      // can get back on the \"throw all redirect responses\" train here should\n      // this ever happen :/\n      throw new Response(null, {\n        status: result.status,\n        headers: {\n          Location: result.location\n        }\n      });\n    }\n\n    if (isDeferredResult(result)) {\n      let error = getInternalRouterError(400, {\n        type: \"defer-action\"\n      });\n\n      if (isRouteRequest) {\n        throw error;\n      }\n\n      result = {\n        type: ResultType.error,\n        error\n      };\n    }\n\n    if (isRouteRequest) {\n      // Note: This should only be non-Response values if we get here, since\n      // isRouteRequest should throw any Response received in callLoaderOrAction\n      if (isErrorResult(result)) {\n        throw result.error;\n      }\n\n      return {\n        matches: [actionMatch],\n        loaderData: {},\n        actionData: {\n          [actionMatch.route.id]: result.data\n        },\n        errors: null,\n        // Note: statusCode + headers are unused here since queryRoute will\n        // return the raw Response or value\n        statusCode: 200,\n        loaderHeaders: {},\n        actionHeaders: {},\n        activeDeferreds: null\n      };\n    }\n\n    if (isErrorResult(result)) {\n      // Store off the pending error - we use it to determine which loaders\n      // to call and will commit it when we complete the navigation\n      let boundaryMatch = findNearestBoundary(matches, actionMatch.route.id);\n      let context = await loadRouteData(request, matches, requestContext, undefined, {\n        [boundaryMatch.route.id]: result.error\n      }); // action status codes take precedence over loader status codes\n\n      return _extends({}, context, {\n        statusCode: isRouteErrorResponse(result.error) ? result.error.status : 500,\n        actionData: null,\n        actionHeaders: _extends({}, result.headers ? {\n          [actionMatch.route.id]: result.headers\n        } : {})\n      });\n    } // Create a GET request for the loaders\n\n\n    let loaderRequest = new Request(request.url, {\n      headers: request.headers,\n      redirect: request.redirect,\n      signal: request.signal\n    });\n    let context = await loadRouteData(loaderRequest, matches, requestContext);\n    return _extends({}, context, result.statusCode ? {\n      statusCode: result.statusCode\n    } : {}, {\n      actionData: {\n        [actionMatch.route.id]: result.data\n      },\n      actionHeaders: _extends({}, result.headers ? {\n        [actionMatch.route.id]: result.headers\n      } : {})\n    });\n  }\n\n  async function loadRouteData(request, matches, requestContext, routeMatch, pendingActionError) {\n    let isRouteRequest = routeMatch != null; // Short circuit if we have no loaders to run (queryRoute())\n\n    if (isRouteRequest && !(routeMatch != null && routeMatch.route.loader) && !(routeMatch != null && routeMatch.route.lazy)) {\n      throw getInternalRouterError(400, {\n        method: request.method,\n        pathname: new URL(request.url).pathname,\n        routeId: routeMatch == null ? void 0 : routeMatch.route.id\n      });\n    }\n\n    let requestMatches = routeMatch ? [routeMatch] : getLoaderMatchesUntilBoundary(matches, Object.keys(pendingActionError || {})[0]);\n    let matchesToLoad = requestMatches.filter(m => m.route.loader || m.route.lazy); // Short circuit if we have no loaders to run (query())\n\n    if (matchesToLoad.length === 0) {\n      return {\n        matches,\n        // Add a null for all matched routes for proper revalidation on the client\n        loaderData: matches.reduce((acc, m) => Object.assign(acc, {\n          [m.route.id]: null\n        }), {}),\n        errors: pendingActionError || null,\n        statusCode: 200,\n        loaderHeaders: {},\n        activeDeferreds: null\n      };\n    }\n\n    let results = await Promise.all([...matchesToLoad.map(match => callLoaderOrAction(\"loader\", request, match, matches, manifest, mapRouteProperties, basename, {\n      isStaticRequest: true,\n      isRouteRequest,\n      requestContext\n    }))]);\n\n    if (request.signal.aborted) {\n      let method = isRouteRequest ? \"queryRoute\" : \"query\";\n      throw new Error(method + \"() call aborted: \" + request.method + \" \" + request.url);\n    } // Process and commit output from loaders\n\n\n    let activeDeferreds = new Map();\n    let context = processRouteLoaderData(matches, matchesToLoad, results, pendingActionError, activeDeferreds); // Add a null for any non-loader matches for proper revalidation on the client\n\n    let executedLoaders = new Set(matchesToLoad.map(match => match.route.id));\n    matches.forEach(match => {\n      if (!executedLoaders.has(match.route.id)) {\n        context.loaderData[match.route.id] = null;\n      }\n    });\n    return _extends({}, context, {\n      matches,\n      activeDeferreds: activeDeferreds.size > 0 ? Object.fromEntries(activeDeferreds.entries()) : null\n    });\n  }\n\n  return {\n    dataRoutes,\n    query,\n    queryRoute\n  };\n} //#endregion\n////////////////////////////////////////////////////////////////////////////////\n//#region Helpers\n////////////////////////////////////////////////////////////////////////////////\n\n/**\n * Given an existing StaticHandlerContext and an error thrown at render time,\n * provide an updated StaticHandlerContext suitable for a second SSR render\n */\n\n\nfunction getStaticContextFromError(routes, context, error) {\n  let newContext = _extends({}, context, {\n    statusCode: 500,\n    errors: {\n      [context._deepestRenderedBoundaryId || routes[0].id]: error\n    }\n  });\n\n  return newContext;\n}\n\nfunction isSubmissionNavigation(opts) {\n  return opts != null && (\"formData\" in opts && opts.formData != null || \"body\" in opts && opts.body !== undefined);\n}\n\nfunction normalizeTo(location, matches, basename, prependBasename, to, fromRouteId, relative) {\n  let contextualMatches;\n  let activeRouteMatch;\n\n  if (fromRouteId != null && relative !== \"path\") {\n    // Grab matches up to the calling route so our route-relative logic is\n    // relative to the correct source route.  When using relative:path,\n    // fromRouteId is ignored since that is always relative to the current\n    // location path\n    contextualMatches = [];\n\n    for (let match of matches) {\n      contextualMatches.push(match);\n\n      if (match.route.id === fromRouteId) {\n        activeRouteMatch = match;\n        break;\n      }\n    }\n  } else {\n    contextualMatches = matches;\n    activeRouteMatch = matches[matches.length - 1];\n  } // Resolve the relative path\n\n\n  let path = resolveTo(to ? to : \".\", getPathContributingMatches(contextualMatches).map(m => m.pathnameBase), stripBasename(location.pathname, basename) || location.pathname, relative === \"path\"); // When `to` is not specified we inherit search/hash from the current\n  // location, unlike when to=\".\" and we just inherit the path.\n  // See https://github.com/remix-run/remix/issues/927\n\n  if (to == null) {\n    path.search = location.search;\n    path.hash = location.hash;\n  } // Add an ?index param for matched index routes if we don't already have one\n\n\n  if ((to == null || to === \"\" || to === \".\") && activeRouteMatch && activeRouteMatch.route.index && !hasNakedIndexQuery(path.search)) {\n    path.search = path.search ? path.search.replace(/^\\?/, \"?index&\") : \"?index\";\n  } // If we're operating within a basename, prepend it to the pathname.  If\n  // this is a root navigation, then just use the raw basename which allows\n  // the basename to have full control over the presence of a trailing slash\n  // on root actions\n\n\n  if (prependBasename && basename !== \"/\") {\n    path.pathname = path.pathname === \"/\" ? basename : joinPaths([basename, path.pathname]);\n  }\n\n  return createPath(path);\n} // Normalize navigation options by converting formMethod=GET formData objects to\n// URLSearchParams so they behave identically to links with query params\n\n\nfunction normalizeNavigateOptions(normalizeFormMethod, isFetcher, path, opts) {\n  // Return location verbatim on non-submission navigations\n  if (!opts || !isSubmissionNavigation(opts)) {\n    return {\n      path\n    };\n  }\n\n  if (opts.formMethod && !isValidMethod(opts.formMethod)) {\n    return {\n      path,\n      error: getInternalRouterError(405, {\n        method: opts.formMethod\n      })\n    };\n  }\n\n  let getInvalidBodyError = () => ({\n    path,\n    error: getInternalRouterError(400, {\n      type: \"invalid-body\"\n    })\n  }); // Create a Submission on non-GET navigations\n\n\n  let rawFormMethod = opts.formMethod || \"get\";\n  let formMethod = normalizeFormMethod ? rawFormMethod.toUpperCase() : rawFormMethod.toLowerCase();\n  let formAction = stripHashFromPath(path);\n\n  if (opts.body !== undefined) {\n    if (opts.formEncType === \"text/plain\") {\n      // text only support POST/PUT/PATCH/DELETE submissions\n      if (!isMutationMethod(formMethod)) {\n        return getInvalidBodyError();\n      }\n\n      let text = typeof opts.body === \"string\" ? opts.body : opts.body instanceof FormData || opts.body instanceof URLSearchParams ? // https://html.spec.whatwg.org/multipage/form-control-infrastructure.html#plain-text-form-data\n      Array.from(opts.body.entries()).reduce((acc, _ref3) => {\n        let [name, value] = _ref3;\n        return \"\" + acc + name + \"=\" + value + \"\\n\";\n      }, \"\") : String(opts.body);\n      return {\n        path,\n        submission: {\n          formMethod,\n          formAction,\n          formEncType: opts.formEncType,\n          formData: undefined,\n          json: undefined,\n          text\n        }\n      };\n    } else if (opts.formEncType === \"application/json\") {\n      // json only supports POST/PUT/PATCH/DELETE submissions\n      if (!isMutationMethod(formMethod)) {\n        return getInvalidBodyError();\n      }\n\n      try {\n        let json = typeof opts.body === \"string\" ? JSON.parse(opts.body) : opts.body;\n        return {\n          path,\n          submission: {\n            formMethod,\n            formAction,\n            formEncType: opts.formEncType,\n            formData: undefined,\n            json,\n            text: undefined\n          }\n        };\n      } catch (e) {\n        return getInvalidBodyError();\n      }\n    }\n  }\n\n  invariant(typeof FormData === \"function\", \"FormData is not available in this environment\");\n  let searchParams;\n  let formData;\n\n  if (opts.formData) {\n    searchParams = convertFormDataToSearchParams(opts.formData);\n    formData = opts.formData;\n  } else if (opts.body instanceof FormData) {\n    searchParams = convertFormDataToSearchParams(opts.body);\n    formData = opts.body;\n  } else if (opts.body instanceof URLSearchParams) {\n    searchParams = opts.body;\n    formData = convertSearchParamsToFormData(searchParams);\n  } else if (opts.body == null) {\n    searchParams = new URLSearchParams();\n    formData = new FormData();\n  } else {\n    try {\n      searchParams = new URLSearchParams(opts.body);\n      formData = convertSearchParamsToFormData(searchParams);\n    } catch (e) {\n      return getInvalidBodyError();\n    }\n  }\n\n  let submission = {\n    formMethod,\n    formAction,\n    formEncType: opts && opts.formEncType || \"application/x-www-form-urlencoded\",\n    formData,\n    json: undefined,\n    text: undefined\n  };\n\n  if (isMutationMethod(submission.formMethod)) {\n    return {\n      path,\n      submission\n    };\n  } // Flatten submission onto URLSearchParams for GET submissions\n\n\n  let parsedPath = parsePath(path); // On GET navigation submissions we can drop the ?index param from the\n  // resulting location since all loaders will run.  But fetcher GET submissions\n  // only run a single loader so we need to preserve any incoming ?index params\n\n  if (isFetcher && parsedPath.search && hasNakedIndexQuery(parsedPath.search)) {\n    searchParams.append(\"index\", \"\");\n  }\n\n  parsedPath.search = \"?\" + searchParams;\n  return {\n    path: createPath(parsedPath),\n    submission\n  };\n} // Filter out all routes below any caught error as they aren't going to\n// render so we don't need to load them\n\n\nfunction getLoaderMatchesUntilBoundary(matches, boundaryId) {\n  let boundaryMatches = matches;\n\n  if (boundaryId) {\n    let index = matches.findIndex(m => m.route.id === boundaryId);\n\n    if (index >= 0) {\n      boundaryMatches = matches.slice(0, index);\n    }\n  }\n\n  return boundaryMatches;\n}\n\nfunction getMatchesToLoad(history, state, matches, submission, location, isRevalidationRequired, cancelledDeferredRoutes, cancelledFetcherLoads, fetchLoadMatches, fetchRedirectIds, routesToUse, basename, pendingActionData, pendingError) {\n  let actionResult = pendingError ? Object.values(pendingError)[0] : pendingActionData ? Object.values(pendingActionData)[0] : undefined;\n  let currentUrl = history.createURL(state.location);\n  let nextUrl = history.createURL(location); // Pick navigation matches that are net-new or qualify for revalidation\n\n  let boundaryId = pendingError ? Object.keys(pendingError)[0] : undefined;\n  let boundaryMatches = getLoaderMatchesUntilBoundary(matches, boundaryId);\n  let navigationMatches = boundaryMatches.filter((match, index) => {\n    if (match.route.lazy) {\n      // We haven't loaded this route yet so we don't know if it's got a loader!\n      return true;\n    }\n\n    if (match.route.loader == null) {\n      return false;\n    } // Always call the loader on new route instances and pending defer cancellations\n\n\n    if (isNewLoader(state.loaderData, state.matches[index], match) || cancelledDeferredRoutes.some(id => id === match.route.id)) {\n      return true;\n    } // This is the default implementation for when we revalidate.  If the route\n    // provides it's own implementation, then we give them full control but\n    // provide this value so they can leverage it if needed after they check\n    // their own specific use cases\n\n\n    let currentRouteMatch = state.matches[index];\n    let nextRouteMatch = match;\n    return shouldRevalidateLoader(match, _extends({\n      currentUrl,\n      currentParams: currentRouteMatch.params,\n      nextUrl,\n      nextParams: nextRouteMatch.params\n    }, submission, {\n      actionResult,\n      defaultShouldRevalidate: // Forced revalidation due to submission, useRevalidator, or X-Remix-Revalidate\n      isRevalidationRequired || // Clicked the same link, resubmitted a GET form\n      currentUrl.pathname + currentUrl.search === nextUrl.pathname + nextUrl.search || // Search params affect all loaders\n      currentUrl.search !== nextUrl.search || isNewRouteInstance(currentRouteMatch, nextRouteMatch)\n    }));\n  }); // Pick fetcher.loads that need to be revalidated\n\n  let revalidatingFetchers = [];\n  fetchLoadMatches.forEach((f, key) => {\n    // Don't revalidate if fetcher won't be present in the subsequent render\n    if (!matches.some(m => m.route.id === f.routeId)) {\n      return;\n    }\n\n    let fetcherMatches = matchRoutes(routesToUse, f.path, basename); // If the fetcher path no longer matches, push it in with null matches so\n    // we can trigger a 404 in callLoadersAndMaybeResolveData.  Note this is\n    // currently only a use-case for Remix HMR where the route tree can change\n    // at runtime and remove a route previously loaded via a fetcher\n\n    if (!fetcherMatches) {\n      revalidatingFetchers.push({\n        key,\n        routeId: f.routeId,\n        path: f.path,\n        matches: null,\n        match: null,\n        controller: null\n      });\n      return;\n    } // Revalidating fetchers are decoupled from the route matches since they\n    // load from a static href.  They revalidate based on explicit revalidation\n    // (submission, useRevalidator, or X-Remix-Revalidate)\n\n\n    let fetcher = state.fetchers.get(key);\n    let fetcherMatch = getTargetMatch(fetcherMatches, f.path);\n    let shouldRevalidate = false;\n\n    if (fetchRedirectIds.has(key)) {\n      // Never trigger a revalidation of an actively redirecting fetcher\n      shouldRevalidate = false;\n    } else if (cancelledFetcherLoads.includes(key)) {\n      // Always revalidate if the fetcher was cancelled\n      shouldRevalidate = true;\n    } else if (fetcher && fetcher.state !== \"idle\" && fetcher.data === undefined) {\n      // If the fetcher hasn't ever completed loading yet, then this isn't a\n      // revalidation, it would just be a brand new load if an explicit\n      // revalidation is required\n      shouldRevalidate = isRevalidationRequired;\n    } else {\n      // Otherwise fall back on any user-defined shouldRevalidate, defaulting\n      // to explicit revalidations only\n      shouldRevalidate = shouldRevalidateLoader(fetcherMatch, _extends({\n        currentUrl,\n        currentParams: state.matches[state.matches.length - 1].params,\n        nextUrl,\n        nextParams: matches[matches.length - 1].params\n      }, submission, {\n        actionResult,\n        defaultShouldRevalidate: isRevalidationRequired\n      }));\n    }\n\n    if (shouldRevalidate) {\n      revalidatingFetchers.push({\n        key,\n        routeId: f.routeId,\n        path: f.path,\n        matches: fetcherMatches,\n        match: fetcherMatch,\n        controller: new AbortController()\n      });\n    }\n  });\n  return [navigationMatches, revalidatingFetchers];\n}\n\nfunction isNewLoader(currentLoaderData, currentMatch, match) {\n  let isNew = // [a] -> [a, b]\n  !currentMatch || // [a, b] -> [a, c]\n  match.route.id !== currentMatch.route.id; // Handle the case that we don't have data for a re-used route, potentially\n  // from a prior error or from a cancelled pending deferred\n\n  let isMissingData = currentLoaderData[match.route.id] === undefined; // Always load if this is a net-new route or we don't yet have data\n\n  return isNew || isMissingData;\n}\n\nfunction isNewRouteInstance(currentMatch, match) {\n  let currentPath = currentMatch.route.path;\n  return (// param change for this match, /users/123 -> /users/456\n    currentMatch.pathname !== match.pathname || // splat param changed, which is not present in match.path\n    // e.g. /files/images/avatar.jpg -> files/finances.xls\n    currentPath != null && currentPath.endsWith(\"*\") && currentMatch.params[\"*\"] !== match.params[\"*\"]\n  );\n}\n\nfunction shouldRevalidateLoader(loaderMatch, arg) {\n  if (loaderMatch.route.shouldRevalidate) {\n    let routeChoice = loaderMatch.route.shouldRevalidate(arg);\n\n    if (typeof routeChoice === \"boolean\") {\n      return routeChoice;\n    }\n  }\n\n  return arg.defaultShouldRevalidate;\n}\n/**\n * Execute route.lazy() methods to lazily load route modules (loader, action,\n * shouldRevalidate) and update the routeManifest in place which shares objects\n * with dataRoutes so those get updated as well.\n */\n\n\nasync function loadLazyRouteModule(route, mapRouteProperties, manifest) {\n  if (!route.lazy) {\n    return;\n  }\n\n  let lazyRoute = await route.lazy(); // If the lazy route function was executed and removed by another parallel\n  // call then we can return - first lazy() to finish wins because the return\n  // value of lazy is expected to be static\n\n  if (!route.lazy) {\n    return;\n  }\n\n  let routeToUpdate = manifest[route.id];\n  invariant(routeToUpdate, \"No route found in manifest\"); // Update the route in place.  This should be safe because there's no way\n  // we could yet be sitting on this route as we can't get there without\n  // resolving lazy() first.\n  //\n  // This is different than the HMR \"update\" use-case where we may actively be\n  // on the route being updated.  The main concern boils down to \"does this\n  // mutation affect any ongoing navigations or any current state.matches\n  // values?\".  If not, it should be safe to update in place.\n\n  let routeUpdates = {};\n\n  for (let lazyRouteProperty in lazyRoute) {\n    let staticRouteValue = routeToUpdate[lazyRouteProperty];\n    let isPropertyStaticallyDefined = staticRouteValue !== undefined && // This property isn't static since it should always be updated based\n    // on the route updates\n    lazyRouteProperty !== \"hasErrorBoundary\";\n    warning(!isPropertyStaticallyDefined, \"Route \\\"\" + routeToUpdate.id + \"\\\" has a static property \\\"\" + lazyRouteProperty + \"\\\" \" + \"defined but its lazy function is also returning a value for this property. \" + (\"The lazy route property \\\"\" + lazyRouteProperty + \"\\\" will be ignored.\"));\n\n    if (!isPropertyStaticallyDefined && !immutableRouteKeys.has(lazyRouteProperty)) {\n      routeUpdates[lazyRouteProperty] = lazyRoute[lazyRouteProperty];\n    }\n  } // Mutate the route with the provided updates.  Do this first so we pass\n  // the updated version to mapRouteProperties\n\n\n  Object.assign(routeToUpdate, routeUpdates); // Mutate the `hasErrorBoundary` property on the route based on the route\n  // updates and remove the `lazy` function so we don't resolve the lazy\n  // route again.\n\n  Object.assign(routeToUpdate, _extends({}, mapRouteProperties(routeToUpdate), {\n    lazy: undefined\n  }));\n}\n\nasync function callLoaderOrAction(type, request, match, matches, manifest, mapRouteProperties, basename, opts) {\n  if (opts === void 0) {\n    opts = {};\n  }\n\n  let resultType;\n  let result;\n  let onReject;\n\n  let runHandler = handler => {\n    // Setup a promise we can race against so that abort signals short circuit\n    let reject;\n    let abortPromise = new Promise((_, r) => reject = r);\n\n    onReject = () => reject();\n\n    request.signal.addEventListener(\"abort\", onReject);\n    return Promise.race([handler({\n      request,\n      params: match.params,\n      context: opts.requestContext\n    }), abortPromise]);\n  };\n\n  try {\n    let handler = match.route[type];\n\n    if (match.route.lazy) {\n      if (handler) {\n        // Run statically defined handler in parallel with lazy()\n        let handlerError;\n        let values = await Promise.all([// If the handler throws, don't let it immediately bubble out,\n        // since we need to let the lazy() execution finish so we know if this\n        // route has a boundary that can handle the error\n        runHandler(handler).catch(e => {\n          handlerError = e;\n        }), loadLazyRouteModule(match.route, mapRouteProperties, manifest)]);\n\n        if (handlerError) {\n          throw handlerError;\n        }\n\n        result = values[0];\n      } else {\n        // Load lazy route module, then run any returned handler\n        await loadLazyRouteModule(match.route, mapRouteProperties, manifest);\n        handler = match.route[type];\n\n        if (handler) {\n          // Handler still run even if we got interrupted to maintain consistency\n          // with un-abortable behavior of handler execution on non-lazy or\n          // previously-lazy-loaded routes\n          result = await runHandler(handler);\n        } else if (type === \"action\") {\n          let url = new URL(request.url);\n          let pathname = url.pathname + url.search;\n          throw getInternalRouterError(405, {\n            method: request.method,\n            pathname,\n            routeId: match.route.id\n          });\n        } else {\n          // lazy() route has no loader to run.  Short circuit here so we don't\n          // hit the invariant below that errors on returning undefined.\n          return {\n            type: ResultType.data,\n            data: undefined\n          };\n        }\n      }\n    } else if (!handler) {\n      let url = new URL(request.url);\n      let pathname = url.pathname + url.search;\n      throw getInternalRouterError(404, {\n        pathname\n      });\n    } else {\n      result = await runHandler(handler);\n    }\n\n    invariant(result !== undefined, \"You defined \" + (type === \"action\" ? \"an action\" : \"a loader\") + \" for route \" + (\"\\\"\" + match.route.id + \"\\\" but didn't return anything from your `\" + type + \"` \") + \"function. Please return a value or `null`.\");\n  } catch (e) {\n    resultType = ResultType.error;\n    result = e;\n  } finally {\n    if (onReject) {\n      request.signal.removeEventListener(\"abort\", onReject);\n    }\n  }\n\n  if (isResponse(result)) {\n    let status = result.status; // Process redirects\n\n    if (redirectStatusCodes.has(status)) {\n      let location = result.headers.get(\"Location\");\n      invariant(location, \"Redirects returned/thrown from loaders/actions must have a Location header\"); // Support relative routing in internal redirects\n\n      if (!ABSOLUTE_URL_REGEX.test(location)) {\n        location = normalizeTo(new URL(request.url), matches.slice(0, matches.indexOf(match) + 1), basename, true, location);\n      } else if (!opts.isStaticRequest) {\n        // Strip off the protocol+origin for same-origin + same-basename absolute\n        // redirects. If this is a static request, we can let it go back to the\n        // browser as-is\n        let currentUrl = new URL(request.url);\n        let url = location.startsWith(\"//\") ? new URL(currentUrl.protocol + location) : new URL(location);\n        let isSameBasename = stripBasename(url.pathname, basename) != null;\n\n        if (url.origin === currentUrl.origin && isSameBasename) {\n          location = url.pathname + url.search + url.hash;\n        }\n      } // Don't process redirects in the router during static requests requests.\n      // Instead, throw the Response and let the server handle it with an HTTP\n      // redirect.  We also update the Location header in place in this flow so\n      // basename and relative routing is taken into account\n\n\n      if (opts.isStaticRequest) {\n        result.headers.set(\"Location\", location);\n        throw result;\n      }\n\n      return {\n        type: ResultType.redirect,\n        status,\n        location,\n        revalidate: result.headers.get(\"X-Remix-Revalidate\") !== null,\n        reloadDocument: result.headers.get(\"X-Remix-Reload-Document\") !== null\n      };\n    } // For SSR single-route requests, we want to hand Responses back directly\n    // without unwrapping.  We do this with the QueryRouteResponse wrapper\n    // interface so we can know whether it was returned or thrown\n\n\n    if (opts.isRouteRequest) {\n      let queryRouteResponse = {\n        type: resultType === ResultType.error ? ResultType.error : ResultType.data,\n        response: result\n      };\n      throw queryRouteResponse;\n    }\n\n    let data;\n    let contentType = result.headers.get(\"Content-Type\"); // Check between word boundaries instead of startsWith() due to the last\n    // paragraph of https://httpwg.org/specs/rfc9110.html#field.content-type\n\n    if (contentType && /\\bapplication\\/json\\b/.test(contentType)) {\n      data = await result.json();\n    } else {\n      data = await result.text();\n    }\n\n    if (resultType === ResultType.error) {\n      return {\n        type: resultType,\n        error: new ErrorResponseImpl(status, result.statusText, data),\n        headers: result.headers\n      };\n    }\n\n    return {\n      type: ResultType.data,\n      data,\n      statusCode: result.status,\n      headers: result.headers\n    };\n  }\n\n  if (resultType === ResultType.error) {\n    return {\n      type: resultType,\n      error: result\n    };\n  }\n\n  if (isDeferredData(result)) {\n    var _result$init, _result$init2;\n\n    return {\n      type: ResultType.deferred,\n      deferredData: result,\n      statusCode: (_result$init = result.init) == null ? void 0 : _result$init.status,\n      headers: ((_result$init2 = result.init) == null ? void 0 : _result$init2.headers) && new Headers(result.init.headers)\n    };\n  }\n\n  return {\n    type: ResultType.data,\n    data: result\n  };\n} // Utility method for creating the Request instances for loaders/actions during\n// client-side navigations and fetches.  During SSR we will always have a\n// Request instance from the static handler (query/queryRoute)\n\n\nfunction createClientSideRequest(history, location, signal, submission) {\n  let url = history.createURL(stripHashFromPath(location)).toString();\n  let init = {\n    signal\n  };\n\n  if (submission && isMutationMethod(submission.formMethod)) {\n    let {\n      formMethod,\n      formEncType\n    } = submission; // Didn't think we needed this but it turns out unlike other methods, patch\n    // won't be properly normalized to uppercase and results in a 405 error.\n    // See: https://fetch.spec.whatwg.org/#concept-method\n\n    init.method = formMethod.toUpperCase();\n\n    if (formEncType === \"application/json\") {\n      init.headers = new Headers({\n        \"Content-Type\": formEncType\n      });\n      init.body = JSON.stringify(submission.json);\n    } else if (formEncType === \"text/plain\") {\n      // Content-Type is inferred (https://fetch.spec.whatwg.org/#dom-request)\n      init.body = submission.text;\n    } else if (formEncType === \"application/x-www-form-urlencoded\" && submission.formData) {\n      // Content-Type is inferred (https://fetch.spec.whatwg.org/#dom-request)\n      init.body = convertFormDataToSearchParams(submission.formData);\n    } else {\n      // Content-Type is inferred (https://fetch.spec.whatwg.org/#dom-request)\n      init.body = submission.formData;\n    }\n  }\n\n  return new Request(url, init);\n}\n\nfunction convertFormDataToSearchParams(formData) {\n  let searchParams = new URLSearchParams();\n\n  for (let [key, value] of formData.entries()) {\n    // https://html.spec.whatwg.org/multipage/form-control-infrastructure.html#converting-an-entry-list-to-a-list-of-name-value-pairs\n    searchParams.append(key, typeof value === \"string\" ? value : value.name);\n  }\n\n  return searchParams;\n}\n\nfunction convertSearchParamsToFormData(searchParams) {\n  let formData = new FormData();\n\n  for (let [key, value] of searchParams.entries()) {\n    formData.append(key, value);\n  }\n\n  return formData;\n}\n\nfunction processRouteLoaderData(matches, matchesToLoad, results, pendingError, activeDeferreds) {\n  // Fill in loaderData/errors from our loaders\n  let loaderData = {};\n  let errors = null;\n  let statusCode;\n  let foundError = false;\n  let loaderHeaders = {}; // Process loader results into state.loaderData/state.errors\n\n  results.forEach((result, index) => {\n    let id = matchesToLoad[index].route.id;\n    invariant(!isRedirectResult(result), \"Cannot handle redirect results in processLoaderData\");\n\n    if (isErrorResult(result)) {\n      // Look upwards from the matched route for the closest ancestor\n      // error boundary, defaulting to the root match\n      let boundaryMatch = findNearestBoundary(matches, id);\n      let error = result.error; // If we have a pending action error, we report it at the highest-route\n      // that throws a loader error, and then clear it out to indicate that\n      // it was consumed\n\n      if (pendingError) {\n        error = Object.values(pendingError)[0];\n        pendingError = undefined;\n      }\n\n      errors = errors || {}; // Prefer higher error values if lower errors bubble to the same boundary\n\n      if (errors[boundaryMatch.route.id] == null) {\n        errors[boundaryMatch.route.id] = error;\n      } // Clear our any prior loaderData for the throwing route\n\n\n      loaderData[id] = undefined; // Once we find our first (highest) error, we set the status code and\n      // prevent deeper status codes from overriding\n\n      if (!foundError) {\n        foundError = true;\n        statusCode = isRouteErrorResponse(result.error) ? result.error.status : 500;\n      }\n\n      if (result.headers) {\n        loaderHeaders[id] = result.headers;\n      }\n    } else {\n      if (isDeferredResult(result)) {\n        activeDeferreds.set(id, result.deferredData);\n        loaderData[id] = result.deferredData.data;\n      } else {\n        loaderData[id] = result.data;\n      } // Error status codes always override success status codes, but if all\n      // loaders are successful we take the deepest status code.\n\n\n      if (result.statusCode != null && result.statusCode !== 200 && !foundError) {\n        statusCode = result.statusCode;\n      }\n\n      if (result.headers) {\n        loaderHeaders[id] = result.headers;\n      }\n    }\n  }); // If we didn't consume the pending action error (i.e., all loaders\n  // resolved), then consume it here.  Also clear out any loaderData for the\n  // throwing route\n\n  if (pendingError) {\n    errors = pendingError;\n    loaderData[Object.keys(pendingError)[0]] = undefined;\n  }\n\n  return {\n    loaderData,\n    errors,\n    statusCode: statusCode || 200,\n    loaderHeaders\n  };\n}\n\nfunction processLoaderData(state, matches, matchesToLoad, results, pendingError, revalidatingFetchers, fetcherResults, activeDeferreds) {\n  let {\n    loaderData,\n    errors\n  } = processRouteLoaderData(matches, matchesToLoad, results, pendingError, activeDeferreds); // Process results from our revalidating fetchers\n\n  for (let index = 0; index < revalidatingFetchers.length; index++) {\n    let {\n      key,\n      match,\n      controller\n    } = revalidatingFetchers[index];\n    invariant(fetcherResults !== undefined && fetcherResults[index] !== undefined, \"Did not find corresponding fetcher result\");\n    let result = fetcherResults[index]; // Process fetcher non-redirect errors\n\n    if (controller && controller.signal.aborted) {\n      // Nothing to do for aborted fetchers\n      continue;\n    } else if (isErrorResult(result)) {\n      let boundaryMatch = findNearestBoundary(state.matches, match == null ? void 0 : match.route.id);\n\n      if (!(errors && errors[boundaryMatch.route.id])) {\n        errors = _extends({}, errors, {\n          [boundaryMatch.route.id]: result.error\n        });\n      }\n\n      state.fetchers.delete(key);\n    } else if (isRedirectResult(result)) {\n      // Should never get here, redirects should get processed above, but we\n      // keep this to type narrow to a success result in the else\n      invariant(false, \"Unhandled fetcher revalidation redirect\");\n    } else if (isDeferredResult(result)) {\n      // Should never get here, deferred data should be awaited for fetchers\n      // in resolveDeferredResults\n      invariant(false, \"Unhandled fetcher deferred data\");\n    } else {\n      let doneFetcher = getDoneFetcher(result.data);\n      state.fetchers.set(key, doneFetcher);\n    }\n  }\n\n  return {\n    loaderData,\n    errors\n  };\n}\n\nfunction mergeLoaderData(loaderData, newLoaderData, matches, errors) {\n  let mergedLoaderData = _extends({}, newLoaderData);\n\n  for (let match of matches) {\n    let id = match.route.id;\n\n    if (newLoaderData.hasOwnProperty(id)) {\n      if (newLoaderData[id] !== undefined) {\n        mergedLoaderData[id] = newLoaderData[id];\n      }\n    } else if (loaderData[id] !== undefined && match.route.loader) {\n      // Preserve existing keys not included in newLoaderData and where a loader\n      // wasn't removed by HMR\n      mergedLoaderData[id] = loaderData[id];\n    }\n\n    if (errors && errors.hasOwnProperty(id)) {\n      // Don't keep any loader data below the boundary\n      break;\n    }\n  }\n\n  return mergedLoaderData;\n} // Find the nearest error boundary, looking upwards from the leaf route (or the\n// route specified by routeId) for the closest ancestor error boundary,\n// defaulting to the root match\n\n\nfunction findNearestBoundary(matches, routeId) {\n  let eligibleMatches = routeId ? matches.slice(0, matches.findIndex(m => m.route.id === routeId) + 1) : [...matches];\n  return eligibleMatches.reverse().find(m => m.route.hasErrorBoundary === true) || matches[0];\n}\n\nfunction getShortCircuitMatches(routes) {\n  // Prefer a root layout route if present, otherwise shim in a route object\n  let route = routes.length === 1 ? routes[0] : routes.find(r => r.index || !r.path || r.path === \"/\") || {\n    id: \"__shim-error-route__\"\n  };\n  return {\n    matches: [{\n      params: {},\n      pathname: \"\",\n      pathnameBase: \"\",\n      route\n    }],\n    route\n  };\n}\n\nfunction getInternalRouterError(status, _temp4) {\n  let {\n    pathname,\n    routeId,\n    method,\n    type\n  } = _temp4 === void 0 ? {} : _temp4;\n  let statusText = \"Unknown Server Error\";\n  let errorMessage = \"Unknown @remix-run/router error\";\n\n  if (status === 400) {\n    statusText = \"Bad Request\";\n\n    if (method && pathname && routeId) {\n      errorMessage = \"You made a \" + method + \" request to \\\"\" + pathname + \"\\\" but \" + (\"did not provide a `loader` for route \\\"\" + routeId + \"\\\", \") + \"so there is no way to handle the request.\";\n    } else if (type === \"defer-action\") {\n      errorMessage = \"defer() is not supported in actions\";\n    } else if (type === \"invalid-body\") {\n      errorMessage = \"Unable to encode submission body\";\n    }\n  } else if (status === 403) {\n    statusText = \"Forbidden\";\n    errorMessage = \"Route \\\"\" + routeId + \"\\\" does not match URL \\\"\" + pathname + \"\\\"\";\n  } else if (status === 404) {\n    statusText = \"Not Found\";\n    errorMessage = \"No route matches URL \\\"\" + pathname + \"\\\"\";\n  } else if (status === 405) {\n    statusText = \"Method Not Allowed\";\n\n    if (method && pathname && routeId) {\n      errorMessage = \"You made a \" + method.toUpperCase() + \" request to \\\"\" + pathname + \"\\\" but \" + (\"did not provide an `action` for route \\\"\" + routeId + \"\\\", \") + \"so there is no way to handle the request.\";\n    } else if (method) {\n      errorMessage = \"Invalid request method \\\"\" + method.toUpperCase() + \"\\\"\";\n    }\n  }\n\n  return new ErrorResponseImpl(status || 500, statusText, new Error(errorMessage), true);\n} // Find any returned redirect errors, starting from the lowest match\n\n\nfunction findRedirect(results) {\n  for (let i = results.length - 1; i >= 0; i--) {\n    let result = results[i];\n\n    if (isRedirectResult(result)) {\n      return {\n        result,\n        idx: i\n      };\n    }\n  }\n}\n\nfunction stripHashFromPath(path) {\n  let parsedPath = typeof path === \"string\" ? parsePath(path) : path;\n  return createPath(_extends({}, parsedPath, {\n    hash: \"\"\n  }));\n}\n\nfunction isHashChangeOnly(a, b) {\n  if (a.pathname !== b.pathname || a.search !== b.search) {\n    return false;\n  }\n\n  if (a.hash === \"\") {\n    // /page -> /page#hash\n    return b.hash !== \"\";\n  } else if (a.hash === b.hash) {\n    // /page#hash -> /page#hash\n    return true;\n  } else if (b.hash !== \"\") {\n    // /page#hash -> /page#other\n    return true;\n  } // If the hash is removed the browser will re-perform a request to the server\n  // /page#hash -> /page\n\n\n  return false;\n}\n\nfunction isDeferredResult(result) {\n  return result.type === ResultType.deferred;\n}\n\nfunction isErrorResult(result) {\n  return result.type === ResultType.error;\n}\n\nfunction isRedirectResult(result) {\n  return (result && result.type) === ResultType.redirect;\n}\n\nfunction isDeferredData(value) {\n  let deferred = value;\n  return deferred && typeof deferred === \"object\" && typeof deferred.data === \"object\" && typeof deferred.subscribe === \"function\" && typeof deferred.cancel === \"function\" && typeof deferred.resolveData === \"function\";\n}\n\nfunction isResponse(value) {\n  return value != null && typeof value.status === \"number\" && typeof value.statusText === \"string\" && typeof value.headers === \"object\" && typeof value.body !== \"undefined\";\n}\n\nfunction isRedirectResponse(result) {\n  if (!isResponse(result)) {\n    return false;\n  }\n\n  let status = result.status;\n  let location = result.headers.get(\"Location\");\n  return status >= 300 && status <= 399 && location != null;\n}\n\nfunction isQueryRouteResponse(obj) {\n  return obj && isResponse(obj.response) && (obj.type === ResultType.data || obj.type === ResultType.error);\n}\n\nfunction isValidMethod(method) {\n  return validRequestMethods.has(method.toLowerCase());\n}\n\nfunction isMutationMethod(method) {\n  return validMutationMethods.has(method.toLowerCase());\n}\n\nasync function resolveDeferredResults(currentMatches, matchesToLoad, results, signals, isFetcher, currentLoaderData) {\n  for (let index = 0; index < results.length; index++) {\n    let result = results[index];\n    let match = matchesToLoad[index]; // If we don't have a match, then we can have a deferred result to do\n    // anything with.  This is for revalidating fetchers where the route was\n    // removed during HMR\n\n    if (!match) {\n      continue;\n    }\n\n    let currentMatch = currentMatches.find(m => m.route.id === match.route.id);\n    let isRevalidatingLoader = currentMatch != null && !isNewRouteInstance(currentMatch, match) && (currentLoaderData && currentLoaderData[match.route.id]) !== undefined;\n\n    if (isDeferredResult(result) && (isFetcher || isRevalidatingLoader)) {\n      // Note: we do not have to touch activeDeferreds here since we race them\n      // against the signal in resolveDeferredData and they'll get aborted\n      // there if needed\n      let signal = signals[index];\n      invariant(signal, \"Expected an AbortSignal for revalidating fetcher deferred result\");\n      await resolveDeferredData(result, signal, isFetcher).then(result => {\n        if (result) {\n          results[index] = result || results[index];\n        }\n      });\n    }\n  }\n}\n\nasync function resolveDeferredData(result, signal, unwrap) {\n  if (unwrap === void 0) {\n    unwrap = false;\n  }\n\n  let aborted = await result.deferredData.resolveData(signal);\n\n  if (aborted) {\n    return;\n  }\n\n  if (unwrap) {\n    try {\n      return {\n        type: ResultType.data,\n        data: result.deferredData.unwrappedData\n      };\n    } catch (e) {\n      // Handle any TrackedPromise._error values encountered while unwrapping\n      return {\n        type: ResultType.error,\n        error: e\n      };\n    }\n  }\n\n  return {\n    type: ResultType.data,\n    data: result.deferredData.data\n  };\n}\n\nfunction hasNakedIndexQuery(search) {\n  return new URLSearchParams(search).getAll(\"index\").some(v => v === \"\");\n}\n\nfunction getTargetMatch(matches, location) {\n  let search = typeof location === \"string\" ? parsePath(location).search : location.search;\n\n  if (matches[matches.length - 1].route.index && hasNakedIndexQuery(search || \"\")) {\n    // Return the leaf index route when index is present\n    return matches[matches.length - 1];\n  } // Otherwise grab the deepest \"path contributing\" match (ignoring index and\n  // pathless layout routes)\n\n\n  let pathMatches = getPathContributingMatches(matches);\n  return pathMatches[pathMatches.length - 1];\n}\n\nfunction getSubmissionFromNavigation(navigation) {\n  let {\n    formMethod,\n    formAction,\n    formEncType,\n    text,\n    formData,\n    json\n  } = navigation;\n\n  if (!formMethod || !formAction || !formEncType) {\n    return;\n  }\n\n  if (text != null) {\n    return {\n      formMethod,\n      formAction,\n      formEncType,\n      formData: undefined,\n      json: undefined,\n      text\n    };\n  } else if (formData != null) {\n    return {\n      formMethod,\n      formAction,\n      formEncType,\n      formData,\n      json: undefined,\n      text: undefined\n    };\n  } else if (json !== undefined) {\n    return {\n      formMethod,\n      formAction,\n      formEncType,\n      formData: undefined,\n      json,\n      text: undefined\n    };\n  }\n}\n\nfunction getLoadingNavigation(location, submission) {\n  if (submission) {\n    let navigation = {\n      state: \"loading\",\n      location,\n      formMethod: submission.formMethod,\n      formAction: submission.formAction,\n      formEncType: submission.formEncType,\n      formData: submission.formData,\n      json: submission.json,\n      text: submission.text\n    };\n    return navigation;\n  } else {\n    let navigation = {\n      state: \"loading\",\n      location,\n      formMethod: undefined,\n      formAction: undefined,\n      formEncType: undefined,\n      formData: undefined,\n      json: undefined,\n      text: undefined\n    };\n    return navigation;\n  }\n}\n\nfunction getSubmittingNavigation(location, submission) {\n  let navigation = {\n    state: \"submitting\",\n    location,\n    formMethod: submission.formMethod,\n    formAction: submission.formAction,\n    formEncType: submission.formEncType,\n    formData: submission.formData,\n    json: submission.json,\n    text: submission.text\n  };\n  return navigation;\n}\n\nfunction getLoadingFetcher(submission, data) {\n  if (submission) {\n    let fetcher = {\n      state: \"loading\",\n      formMethod: submission.formMethod,\n      formAction: submission.formAction,\n      formEncType: submission.formEncType,\n      formData: submission.formData,\n      json: submission.json,\n      text: submission.text,\n      data\n    };\n    return fetcher;\n  } else {\n    let fetcher = {\n      state: \"loading\",\n      formMethod: undefined,\n      formAction: undefined,\n      formEncType: undefined,\n      formData: undefined,\n      json: undefined,\n      text: undefined,\n      data\n    };\n    return fetcher;\n  }\n}\n\nfunction getSubmittingFetcher(submission, existingFetcher) {\n  let fetcher = {\n    state: \"submitting\",\n    formMethod: submission.formMethod,\n    formAction: submission.formAction,\n    formEncType: submission.formEncType,\n    formData: submission.formData,\n    json: submission.json,\n    text: submission.text,\n    data: existingFetcher ? existingFetcher.data : undefined\n  };\n  return fetcher;\n}\n\nfunction getDoneFetcher(data) {\n  let fetcher = {\n    state: \"idle\",\n    formMethod: undefined,\n    formAction: undefined,\n    formEncType: undefined,\n    formData: undefined,\n    json: undefined,\n    text: undefined,\n    data\n  };\n  return fetcher;\n}\n\nfunction restoreAppliedTransitions(_window, transitions) {\n  try {\n    let sessionPositions = _window.sessionStorage.getItem(TRANSITIONS_STORAGE_KEY);\n\n    if (sessionPositions) {\n      let json = JSON.parse(sessionPositions);\n\n      for (let [k, v] of Object.entries(json || {})) {\n        if (v && Array.isArray(v)) {\n          transitions.set(k, new Set(v || []));\n        }\n      }\n    }\n  } catch (e) {// no-op, use default empty object\n  }\n}\n\nfunction persistAppliedTransitions(_window, transitions) {\n  if (transitions.size > 0) {\n    let json = {};\n\n    for (let [k, v] of transitions) {\n      json[k] = [...v];\n    }\n\n    try {\n      _window.sessionStorage.setItem(TRANSITIONS_STORAGE_KEY, JSON.stringify(json));\n    } catch (error) {\n      warning(false, \"Failed to save applied view transitions in sessionStorage (\" + error + \").\");\n    }\n  }\n} //#endregion\n\n\nexport { AbortedDeferredError, Action, IDLE_BLOCKER, IDLE_FETCHER, IDLE_NAVIGATION, UNSAFE_DEFERRED_SYMBOL, DeferredData as UNSAFE_DeferredData, ErrorResponseImpl as UNSAFE_ErrorResponseImpl, convertRouteMatchToUiMatch as UNSAFE_convertRouteMatchToUiMatch, convertRoutesToDataRoutes as UNSAFE_convertRoutesToDataRoutes, getPathContributingMatches as UNSAFE_getPathContributingMatches, invariant as UNSAFE_invariant, warning as UNSAFE_warning, createBrowserHistory, createHashHistory, createMemoryHistory, createPath, createRouter, createStaticHandler, defer, generatePath, getStaticContextFromError, getToPathname, isDeferredData, isRouteErrorResponse, joinPaths, json, matchPath, matchRoutes, normalizePathname, parsePath, redirect, redirectDocument, resolvePath, resolveTo, stripBasename };","map":{"version":3,"names":["_extends","Object","assign","bind","target","i","arguments","length","source","key","prototype","hasOwnProperty","call","apply","Action","PopStateEventType","createMemoryHistory","options","initialEntries","initialIndex","v5Compat","entries","map","entry","index","createMemoryLocation","state","undefined","clampIndex","action","Pop","listener","n","Math","min","max","getCurrentLocation","to","location","createLocation","pathname","warning","charAt","JSON","stringify","createHref","createPath","history","createURL","URL","encodeLocation","path","parsePath","search","hash","push","Push","nextLocation","splice","delta","replace","Replace","go","nextIndex","listen","fn","createBrowserHistory","createBrowserLocation","window","globalHistory","usr","createBrowserHref","getUrlBasedHistory","createHashHistory","createHashLocation","substr","startsWith","createHashHref","base","document","querySelector","href","getAttribute","url","hashIndex","indexOf","slice","validateHashLocation","invariant","value","message","Error","cond","console","warn","e","createKey","random","toString","getHistoryState","idx","current","_ref","parsedPath","searchIndex","getLocation","validateLocation","defaultView","getIndex","replaceState","handlePop","historyState","pushState","error","DOMException","name","origin","addEventListener","removeEventListener","ResultType","immutableRouteKeys","Set","isIndexRoute","route","convertRoutesToDataRoutes","routes","mapRouteProperties","parentPath","manifest","treePath","id","join","children","indexRoute","pathOrLayoutRoute","matchRoutes","locationArg","basename","stripBasename","branches","flattenRoutes","rankRouteBranches","matches","matchRouteBranch","safelyDecodeURI","convertRouteMatchToUiMatch","match","loaderData","params","data","handle","parentsMeta","flattenRoute","relativePath","meta","caseSensitive","childrenIndex","joinPaths","routesMeta","concat","score","computeScore","forEach","_route$path","includes","exploded","explodeOptionalSegments","segments","split","first","rest","isOptional","endsWith","required","restExploded","result","subpath","sort","a","b","compareIndexes","paramRe","dynamicSegmentValue","indexRouteValue","emptySegmentValue","staticSegmentValue","splatPenalty","isSplat","s","initialScore","some","filter","reduce","segment","test","siblings","every","branch","matchedParams","matchedPathname","end","remainingPathname","matchPath","pathnameBase","normalizePathname","generatePath","originalPath","prefix","p","String","array","isLastSegment","star","keyMatch","optional","param","pattern","matcher","compiledParams","compilePath","captureGroups","memo","paramName","splatValue","safelyDecodeURIComponent","regexpSource","_","RegExp","decodeURI","decodeURIComponent","toLowerCase","startIndex","nextChar","resolvePath","fromPathname","toPathname","resolvePathname","normalizeSearch","normalizeHash","relativeSegments","pop","getInvalidPathError","char","field","dest","getPathContributingMatches","resolveTo","toArg","routePathnames","locationPathname","isPathRelative","isEmptyPath","from","routePathnameIndex","toSegments","shift","hasExplicitTrailingSlash","hasCurrentTrailingSlash","getToPathname","paths","json","init","responseInit","status","headers","Headers","has","set","Response","AbortedDeferredError","DeferredData","constructor","pendingKeysSet","subscribers","deferredKeys","Array","isArray","reject","abortPromise","Promise","r","controller","AbortController","onAbort","unlistenAbortSignal","signal","acc","_ref2","trackPromise","done","add","promise","race","then","onSettle","catch","defineProperty","get","aborted","delete","undefinedError","emit","settledKey","subscriber","subscribe","cancel","abort","v","k","resolveData","resolve","size","unwrappedData","_ref3","unwrapTrackedPromise","pendingKeys","isTrackedPromise","_tracked","_error","_data","defer","redirect","redirectDocument","response","ErrorResponseImpl","statusText","internal","isRouteErrorResponse","validMutationMethodsArr","validMutationMethods","validRequestMethodsArr","validRequestMethods","redirectStatusCodes","redirectPreserveMethodStatusCodes","IDLE_NAVIGATION","formMethod","formAction","formEncType","formData","text","IDLE_FETCHER","IDLE_BLOCKER","proceed","reset","ABSOLUTE_URL_REGEX","defaultMapRouteProperties","hasErrorBoundary","Boolean","TRANSITIONS_STORAGE_KEY","createRouter","routerWindow","isBrowser","createElement","isServer","detectErrorBoundary","dataRoutes","inFlightDataRoutes","future","v7_fetcherPersist","v7_normalizeFormMethod","v7_prependBasename","unlistenHistory","savedScrollPositions","getScrollRestorationKey","getScrollPosition","initialScrollRestored","hydrationData","initialMatches","initialErrors","getInternalRouterError","getShortCircuitMatches","initialized","m","lazy","loader","router","historyAction","navigation","restoreScrollPosition","preventScrollReset","revalidation","actionData","errors","fetchers","Map","blockers","pendingAction","pendingPreventScrollReset","pendingNavigationController","pendingViewTransitionEnabled","appliedViewTransitions","removePageHideEventListener","isUninterruptedRevalidation","isRevalidationRequired","cancelledDeferredRoutes","cancelledFetcherLoads","fetchControllers","incrementingLoadId","pendingNavigationLoadId","fetchReloadIds","fetchRedirectIds","fetchLoadMatches","activeFetchers","deletedFetchers","activeDeferreds","blockerFunctions","ignoreNextHistoryUpdate","initialize","blockerKey","shouldBlockNavigation","currentLocation","updateBlocker","updateState","startNavigation","restoreAppliedTransitions","_saveAppliedTransitions","persistAppliedTransitions","dispose","clear","deleteFetcher","deleteBlocker","newState","viewTransitionOpts","completedFetchers","deletedFetchersKeys","fetcher","unstable_viewTransitionOpts","completeNavigation","_location$state","_location$state2","isActionReload","isMutationMethod","_isRedirect","keys","mergeLoaderData","priorPaths","toPaths","getSavedScrollPosition","navigate","opts","normalizedPath","normalizeTo","fromRouteId","relative","submission","normalizeNavigateOptions","userReplace","pendingError","enableViewTransition","unstable_viewTransition","revalidate","interruptActiveLoads","startUninterruptedRevalidation","overrideNavigation","saveScrollPosition","routesToUse","loadingNavigation","notFoundMatches","cancelActiveDeferreds","isHashChangeOnly","request","createClientSideRequest","pendingActionData","findNearestBoundary","actionOutput","handleAction","shortCircuited","pendingActionError","getLoadingNavigation","Request","handleLoaders","fetcherSubmission","getSubmittingNavigation","actionMatch","getTargetMatch","type","method","routeId","callLoaderOrAction","isRedirectResult","startRedirectNavigation","isErrorResult","boundaryMatch","isDeferredResult","activeSubmission","getSubmissionFromNavigation","matchesToLoad","revalidatingFetchers","getMatchesToLoad","updatedFetchers","markFetchRedirectsDone","rf","revalidatingFetcher","getLoadingFetcher","abortFetcher","abortPendingFetchRevalidations","f","results","loaderResults","fetcherResults","callLoadersAndMaybeResolveData","findRedirect","fetcherKey","processLoaderData","deferredData","didAbortFetchLoads","abortStaleFetchLoads","shouldUpdateFetchers","getFetcher","fetch","setFetcherError","handleFetcherAction","handleFetcherLoader","requestMatches","existingFetcher","getSubmittingFetcher","abortController","fetchRequest","originatingLoadId","actionResult","getDoneFetcher","doneFetcher","loadingFetcher","revalidationRequest","loadId","loadFetcher","staleKey","resolveDeferredData","_temp","redirectLocation","isDocumentReload","reloadDocument","redirectHistoryAction","currentMatches","fetchersToLoad","all","resolveDeferredResults","deleteFetcherAndUpdateState","count","markFetchersDone","doneKeys","landedId","yeetedKeys","getBlocker","blocker","newBlocker","blockerFunction","predicate","cancelledRouteIds","dfd","enableScrollRestoration","positions","getPosition","getKey","y","getScrollKey","_internalSetRoutes","newRoutes","_internalFetchControllers","_internalActiveDeferreds","UNSAFE_DEFERRED_SYMBOL","Symbol","createStaticHandler","query","_temp2","requestContext","isValidMethod","methodNotAllowedMatches","statusCode","loaderHeaders","actionHeaders","queryImpl","isResponse","queryRoute","_temp3","find","values","_result$activeDeferre","routeMatch","submit","loadRouteData","isQueryRouteResponse","isRedirectResponse","isRouteRequest","isStaticRequest","Location","context","loaderRequest","getLoaderMatchesUntilBoundary","processRouteLoaderData","executedLoaders","fromEntries","getStaticContextFromError","newContext","_deepestRenderedBoundaryId","isSubmissionNavigation","body","prependBasename","contextualMatches","activeRouteMatch","hasNakedIndexQuery","normalizeFormMethod","isFetcher","getInvalidBodyError","rawFormMethod","toUpperCase","stripHashFromPath","FormData","URLSearchParams","parse","searchParams","convertFormDataToSearchParams","convertSearchParamsToFormData","append","boundaryId","boundaryMatches","findIndex","currentUrl","nextUrl","navigationMatches","isNewLoader","currentRouteMatch","nextRouteMatch","shouldRevalidateLoader","currentParams","nextParams","defaultShouldRevalidate","isNewRouteInstance","fetcherMatches","fetcherMatch","shouldRevalidate","currentLoaderData","currentMatch","isNew","isMissingData","currentPath","loaderMatch","arg","routeChoice","loadLazyRouteModule","lazyRoute","routeToUpdate","routeUpdates","lazyRouteProperty","staticRouteValue","isPropertyStaticallyDefined","resultType","onReject","runHandler","handler","handlerError","protocol","isSameBasename","queryRouteResponse","contentType","isDeferredData","_result$init","_result$init2","deferred","foundError","newLoaderData","mergedLoaderData","eligibleMatches","reverse","_temp4","errorMessage","obj","signals","isRevalidatingLoader","unwrap","getAll","pathMatches","_window","transitions","sessionPositions","sessionStorage","getItem","setItem","UNSAFE_DeferredData","UNSAFE_ErrorResponseImpl","UNSAFE_convertRouteMatchToUiMatch","UNSAFE_convertRoutesToDataRoutes","UNSAFE_getPathContributingMatches","UNSAFE_invariant","UNSAFE_warning"],"sources":["C:/Users/Saifi/Desktop/react-shopping-main/node_modules/@remix-run/router/dist/router.js"],"sourcesContent":["/**\n * @remix-run/router v1.11.0\n *\n * Copyright (c) Remix Software Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE.md file in the root directory of this source tree.\n *\n * @license MIT\n */\nfunction _extends() {\n  _extends = Object.assign ? Object.assign.bind() : function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n    return target;\n  };\n  return _extends.apply(this, arguments);\n}\n\n////////////////////////////////////////////////////////////////////////////////\n//#region Types and Constants\n////////////////////////////////////////////////////////////////////////////////\n/**\n * Actions represent the type of change to a location value.\n */\nvar Action;\n(function (Action) {\n  /**\n   * A POP indicates a change to an arbitrary index in the history stack, such\n   * as a back or forward navigation. It does not describe the direction of the\n   * navigation, only that the current index changed.\n   *\n   * Note: This is the default action for newly created history objects.\n   */\n  Action[\"Pop\"] = \"POP\";\n  /**\n   * A PUSH indicates a new entry being added to the history stack, such as when\n   * a link is clicked and a new page loads. When this happens, all subsequent\n   * entries in the stack are lost.\n   */\n  Action[\"Push\"] = \"PUSH\";\n  /**\n   * A REPLACE indicates the entry at the current index in the history stack\n   * being replaced by a new one.\n   */\n  Action[\"Replace\"] = \"REPLACE\";\n})(Action || (Action = {}));\nconst PopStateEventType = \"popstate\";\n/**\n * Memory history stores the current location in memory. It is designed for use\n * in stateful non-browser environments like tests and React Native.\n */\nfunction createMemoryHistory(options) {\n  if (options === void 0) {\n    options = {};\n  }\n  let {\n    initialEntries = [\"/\"],\n    initialIndex,\n    v5Compat = false\n  } = options;\n  let entries; // Declare so we can access from createMemoryLocation\n  entries = initialEntries.map((entry, index) => createMemoryLocation(entry, typeof entry === \"string\" ? null : entry.state, index === 0 ? \"default\" : undefined));\n  let index = clampIndex(initialIndex == null ? entries.length - 1 : initialIndex);\n  let action = Action.Pop;\n  let listener = null;\n  function clampIndex(n) {\n    return Math.min(Math.max(n, 0), entries.length - 1);\n  }\n  function getCurrentLocation() {\n    return entries[index];\n  }\n  function createMemoryLocation(to, state, key) {\n    if (state === void 0) {\n      state = null;\n    }\n    let location = createLocation(entries ? getCurrentLocation().pathname : \"/\", to, state, key);\n    warning(location.pathname.charAt(0) === \"/\", \"relative pathnames are not supported in memory history: \" + JSON.stringify(to));\n    return location;\n  }\n  function createHref(to) {\n    return typeof to === \"string\" ? to : createPath(to);\n  }\n  let history = {\n    get index() {\n      return index;\n    },\n    get action() {\n      return action;\n    },\n    get location() {\n      return getCurrentLocation();\n    },\n    createHref,\n    createURL(to) {\n      return new URL(createHref(to), \"http://localhost\");\n    },\n    encodeLocation(to) {\n      let path = typeof to === \"string\" ? parsePath(to) : to;\n      return {\n        pathname: path.pathname || \"\",\n        search: path.search || \"\",\n        hash: path.hash || \"\"\n      };\n    },\n    push(to, state) {\n      action = Action.Push;\n      let nextLocation = createMemoryLocation(to, state);\n      index += 1;\n      entries.splice(index, entries.length, nextLocation);\n      if (v5Compat && listener) {\n        listener({\n          action,\n          location: nextLocation,\n          delta: 1\n        });\n      }\n    },\n    replace(to, state) {\n      action = Action.Replace;\n      let nextLocation = createMemoryLocation(to, state);\n      entries[index] = nextLocation;\n      if (v5Compat && listener) {\n        listener({\n          action,\n          location: nextLocation,\n          delta: 0\n        });\n      }\n    },\n    go(delta) {\n      action = Action.Pop;\n      let nextIndex = clampIndex(index + delta);\n      let nextLocation = entries[nextIndex];\n      index = nextIndex;\n      if (listener) {\n        listener({\n          action,\n          location: nextLocation,\n          delta\n        });\n      }\n    },\n    listen(fn) {\n      listener = fn;\n      return () => {\n        listener = null;\n      };\n    }\n  };\n  return history;\n}\n/**\n * Browser history stores the location in regular URLs. This is the standard for\n * most web apps, but it requires some configuration on the server to ensure you\n * serve the same app at multiple URLs.\n *\n * @see https://github.com/remix-run/history/tree/main/docs/api-reference.md#createbrowserhistory\n */\nfunction createBrowserHistory(options) {\n  if (options === void 0) {\n    options = {};\n  }\n  function createBrowserLocation(window, globalHistory) {\n    let {\n      pathname,\n      search,\n      hash\n    } = window.location;\n    return createLocation(\"\", {\n      pathname,\n      search,\n      hash\n    },\n    // state defaults to `null` because `window.history.state` does\n    globalHistory.state && globalHistory.state.usr || null, globalHistory.state && globalHistory.state.key || \"default\");\n  }\n  function createBrowserHref(window, to) {\n    return typeof to === \"string\" ? to : createPath(to);\n  }\n  return getUrlBasedHistory(createBrowserLocation, createBrowserHref, null, options);\n}\n/**\n * Hash history stores the location in window.location.hash. This makes it ideal\n * for situations where you don't want to send the location to the server for\n * some reason, either because you do cannot configure it or the URL space is\n * reserved for something else.\n *\n * @see https://github.com/remix-run/history/tree/main/docs/api-reference.md#createhashhistory\n */\nfunction createHashHistory(options) {\n  if (options === void 0) {\n    options = {};\n  }\n  function createHashLocation(window, globalHistory) {\n    let {\n      pathname = \"/\",\n      search = \"\",\n      hash = \"\"\n    } = parsePath(window.location.hash.substr(1));\n    // Hash URL should always have a leading / just like window.location.pathname\n    // does, so if an app ends up at a route like /#something then we add a\n    // leading slash so all of our path-matching behaves the same as if it would\n    // in a browser router.  This is particularly important when there exists a\n    // root splat route (<Route path=\"*\">) since that matches internally against\n    // \"/*\" and we'd expect /#something to 404 in a hash router app.\n    if (!pathname.startsWith(\"/\") && !pathname.startsWith(\".\")) {\n      pathname = \"/\" + pathname;\n    }\n    return createLocation(\"\", {\n      pathname,\n      search,\n      hash\n    },\n    // state defaults to `null` because `window.history.state` does\n    globalHistory.state && globalHistory.state.usr || null, globalHistory.state && globalHistory.state.key || \"default\");\n  }\n  function createHashHref(window, to) {\n    let base = window.document.querySelector(\"base\");\n    let href = \"\";\n    if (base && base.getAttribute(\"href\")) {\n      let url = window.location.href;\n      let hashIndex = url.indexOf(\"#\");\n      href = hashIndex === -1 ? url : url.slice(0, hashIndex);\n    }\n    return href + \"#\" + (typeof to === \"string\" ? to : createPath(to));\n  }\n  function validateHashLocation(location, to) {\n    warning(location.pathname.charAt(0) === \"/\", \"relative pathnames are not supported in hash history.push(\" + JSON.stringify(to) + \")\");\n  }\n  return getUrlBasedHistory(createHashLocation, createHashHref, validateHashLocation, options);\n}\nfunction invariant(value, message) {\n  if (value === false || value === null || typeof value === \"undefined\") {\n    throw new Error(message);\n  }\n}\nfunction warning(cond, message) {\n  if (!cond) {\n    // eslint-disable-next-line no-console\n    if (typeof console !== \"undefined\") console.warn(message);\n    try {\n      // Welcome to debugging history!\n      //\n      // This error is thrown as a convenience, so you can more easily\n      // find the source for a warning that appears in the console by\n      // enabling \"pause on exceptions\" in your JavaScript debugger.\n      throw new Error(message);\n      // eslint-disable-next-line no-empty\n    } catch (e) {}\n  }\n}\nfunction createKey() {\n  return Math.random().toString(36).substr(2, 8);\n}\n/**\n * For browser-based histories, we combine the state and key into an object\n */\nfunction getHistoryState(location, index) {\n  return {\n    usr: location.state,\n    key: location.key,\n    idx: index\n  };\n}\n/**\n * Creates a Location object with a unique key from the given Path\n */\nfunction createLocation(current, to, state, key) {\n  if (state === void 0) {\n    state = null;\n  }\n  let location = _extends({\n    pathname: typeof current === \"string\" ? current : current.pathname,\n    search: \"\",\n    hash: \"\"\n  }, typeof to === \"string\" ? parsePath(to) : to, {\n    state,\n    // TODO: This could be cleaned up.  push/replace should probably just take\n    // full Locations now and avoid the need to run through this flow at all\n    // But that's a pretty big refactor to the current test suite so going to\n    // keep as is for the time being and just let any incoming keys take precedence\n    key: to && to.key || key || createKey()\n  });\n  return location;\n}\n/**\n * Creates a string URL path from the given pathname, search, and hash components.\n */\nfunction createPath(_ref) {\n  let {\n    pathname = \"/\",\n    search = \"\",\n    hash = \"\"\n  } = _ref;\n  if (search && search !== \"?\") pathname += search.charAt(0) === \"?\" ? search : \"?\" + search;\n  if (hash && hash !== \"#\") pathname += hash.charAt(0) === \"#\" ? hash : \"#\" + hash;\n  return pathname;\n}\n/**\n * Parses a string URL path into its separate pathname, search, and hash components.\n */\nfunction parsePath(path) {\n  let parsedPath = {};\n  if (path) {\n    let hashIndex = path.indexOf(\"#\");\n    if (hashIndex >= 0) {\n      parsedPath.hash = path.substr(hashIndex);\n      path = path.substr(0, hashIndex);\n    }\n    let searchIndex = path.indexOf(\"?\");\n    if (searchIndex >= 0) {\n      parsedPath.search = path.substr(searchIndex);\n      path = path.substr(0, searchIndex);\n    }\n    if (path) {\n      parsedPath.pathname = path;\n    }\n  }\n  return parsedPath;\n}\nfunction getUrlBasedHistory(getLocation, createHref, validateLocation, options) {\n  if (options === void 0) {\n    options = {};\n  }\n  let {\n    window = document.defaultView,\n    v5Compat = false\n  } = options;\n  let globalHistory = window.history;\n  let action = Action.Pop;\n  let listener = null;\n  let index = getIndex();\n  // Index should only be null when we initialize. If not, it's because the\n  // user called history.pushState or history.replaceState directly, in which\n  // case we should log a warning as it will result in bugs.\n  if (index == null) {\n    index = 0;\n    globalHistory.replaceState(_extends({}, globalHistory.state, {\n      idx: index\n    }), \"\");\n  }\n  function getIndex() {\n    let state = globalHistory.state || {\n      idx: null\n    };\n    return state.idx;\n  }\n  function handlePop() {\n    action = Action.Pop;\n    let nextIndex = getIndex();\n    let delta = nextIndex == null ? null : nextIndex - index;\n    index = nextIndex;\n    if (listener) {\n      listener({\n        action,\n        location: history.location,\n        delta\n      });\n    }\n  }\n  function push(to, state) {\n    action = Action.Push;\n    let location = createLocation(history.location, to, state);\n    if (validateLocation) validateLocation(location, to);\n    index = getIndex() + 1;\n    let historyState = getHistoryState(location, index);\n    let url = history.createHref(location);\n    // try...catch because iOS limits us to 100 pushState calls :/\n    try {\n      globalHistory.pushState(historyState, \"\", url);\n    } catch (error) {\n      // If the exception is because `state` can't be serialized, let that throw\n      // outwards just like a replace call would so the dev knows the cause\n      // https://html.spec.whatwg.org/multipage/nav-history-apis.html#shared-history-push/replace-state-steps\n      // https://html.spec.whatwg.org/multipage/structured-data.html#structuredserializeinternal\n      if (error instanceof DOMException && error.name === \"DataCloneError\") {\n        throw error;\n      }\n      // They are going to lose state here, but there is no real\n      // way to warn them about it since the page will refresh...\n      window.location.assign(url);\n    }\n    if (v5Compat && listener) {\n      listener({\n        action,\n        location: history.location,\n        delta: 1\n      });\n    }\n  }\n  function replace(to, state) {\n    action = Action.Replace;\n    let location = createLocation(history.location, to, state);\n    if (validateLocation) validateLocation(location, to);\n    index = getIndex();\n    let historyState = getHistoryState(location, index);\n    let url = history.createHref(location);\n    globalHistory.replaceState(historyState, \"\", url);\n    if (v5Compat && listener) {\n      listener({\n        action,\n        location: history.location,\n        delta: 0\n      });\n    }\n  }\n  function createURL(to) {\n    // window.location.origin is \"null\" (the literal string value) in Firefox\n    // under certain conditions, notably when serving from a local HTML file\n    // See https://bugzilla.mozilla.org/show_bug.cgi?id=878297\n    let base = window.location.origin !== \"null\" ? window.location.origin : window.location.href;\n    let href = typeof to === \"string\" ? to : createPath(to);\n    invariant(base, \"No window.location.(origin|href) available to create URL for href: \" + href);\n    return new URL(href, base);\n  }\n  let history = {\n    get action() {\n      return action;\n    },\n    get location() {\n      return getLocation(window, globalHistory);\n    },\n    listen(fn) {\n      if (listener) {\n        throw new Error(\"A history only accepts one active listener\");\n      }\n      window.addEventListener(PopStateEventType, handlePop);\n      listener = fn;\n      return () => {\n        window.removeEventListener(PopStateEventType, handlePop);\n        listener = null;\n      };\n    },\n    createHref(to) {\n      return createHref(window, to);\n    },\n    createURL,\n    encodeLocation(to) {\n      // Encode a Location the same way window.location would\n      let url = createURL(to);\n      return {\n        pathname: url.pathname,\n        search: url.search,\n        hash: url.hash\n      };\n    },\n    push,\n    replace,\n    go(n) {\n      return globalHistory.go(n);\n    }\n  };\n  return history;\n}\n//#endregion\n\nvar ResultType;\n(function (ResultType) {\n  ResultType[\"data\"] = \"data\";\n  ResultType[\"deferred\"] = \"deferred\";\n  ResultType[\"redirect\"] = \"redirect\";\n  ResultType[\"error\"] = \"error\";\n})(ResultType || (ResultType = {}));\nconst immutableRouteKeys = new Set([\"lazy\", \"caseSensitive\", \"path\", \"id\", \"index\", \"children\"]);\nfunction isIndexRoute(route) {\n  return route.index === true;\n}\n// Walk the route tree generating unique IDs where necessary, so we are working\n// solely with AgnosticDataRouteObject's within the Router\nfunction convertRoutesToDataRoutes(routes, mapRouteProperties, parentPath, manifest) {\n  if (parentPath === void 0) {\n    parentPath = [];\n  }\n  if (manifest === void 0) {\n    manifest = {};\n  }\n  return routes.map((route, index) => {\n    let treePath = [...parentPath, index];\n    let id = typeof route.id === \"string\" ? route.id : treePath.join(\"-\");\n    invariant(route.index !== true || !route.children, \"Cannot specify children on an index route\");\n    invariant(!manifest[id], \"Found a route id collision on id \\\"\" + id + \"\\\".  Route \" + \"id's must be globally unique within Data Router usages\");\n    if (isIndexRoute(route)) {\n      let indexRoute = _extends({}, route, mapRouteProperties(route), {\n        id\n      });\n      manifest[id] = indexRoute;\n      return indexRoute;\n    } else {\n      let pathOrLayoutRoute = _extends({}, route, mapRouteProperties(route), {\n        id,\n        children: undefined\n      });\n      manifest[id] = pathOrLayoutRoute;\n      if (route.children) {\n        pathOrLayoutRoute.children = convertRoutesToDataRoutes(route.children, mapRouteProperties, treePath, manifest);\n      }\n      return pathOrLayoutRoute;\n    }\n  });\n}\n/**\n * Matches the given routes to a location and returns the match data.\n *\n * @see https://reactrouter.com/utils/match-routes\n */\nfunction matchRoutes(routes, locationArg, basename) {\n  if (basename === void 0) {\n    basename = \"/\";\n  }\n  let location = typeof locationArg === \"string\" ? parsePath(locationArg) : locationArg;\n  let pathname = stripBasename(location.pathname || \"/\", basename);\n  if (pathname == null) {\n    return null;\n  }\n  let branches = flattenRoutes(routes);\n  rankRouteBranches(branches);\n  let matches = null;\n  for (let i = 0; matches == null && i < branches.length; ++i) {\n    matches = matchRouteBranch(branches[i],\n    // Incoming pathnames are generally encoded from either window.location\n    // or from router.navigate, but we want to match against the unencoded\n    // paths in the route definitions.  Memory router locations won't be\n    // encoded here but there also shouldn't be anything to decode so this\n    // should be a safe operation.  This avoids needing matchRoutes to be\n    // history-aware.\n    safelyDecodeURI(pathname));\n  }\n  return matches;\n}\nfunction convertRouteMatchToUiMatch(match, loaderData) {\n  let {\n    route,\n    pathname,\n    params\n  } = match;\n  return {\n    id: route.id,\n    pathname,\n    params,\n    data: loaderData[route.id],\n    handle: route.handle\n  };\n}\nfunction flattenRoutes(routes, branches, parentsMeta, parentPath) {\n  if (branches === void 0) {\n    branches = [];\n  }\n  if (parentsMeta === void 0) {\n    parentsMeta = [];\n  }\n  if (parentPath === void 0) {\n    parentPath = \"\";\n  }\n  let flattenRoute = (route, index, relativePath) => {\n    let meta = {\n      relativePath: relativePath === undefined ? route.path || \"\" : relativePath,\n      caseSensitive: route.caseSensitive === true,\n      childrenIndex: index,\n      route\n    };\n    if (meta.relativePath.startsWith(\"/\")) {\n      invariant(meta.relativePath.startsWith(parentPath), \"Absolute route path \\\"\" + meta.relativePath + \"\\\" nested under path \" + (\"\\\"\" + parentPath + \"\\\" is not valid. An absolute child route path \") + \"must start with the combined path of all its parent routes.\");\n      meta.relativePath = meta.relativePath.slice(parentPath.length);\n    }\n    let path = joinPaths([parentPath, meta.relativePath]);\n    let routesMeta = parentsMeta.concat(meta);\n    // Add the children before adding this route to the array, so we traverse the\n    // route tree depth-first and child routes appear before their parents in\n    // the \"flattened\" version.\n    if (route.children && route.children.length > 0) {\n      invariant(\n      // Our types know better, but runtime JS may not!\n      // @ts-expect-error\n      route.index !== true, \"Index routes must not have child routes. Please remove \" + (\"all child routes from route path \\\"\" + path + \"\\\".\"));\n      flattenRoutes(route.children, branches, routesMeta, path);\n    }\n    // Routes without a path shouldn't ever match by themselves unless they are\n    // index routes, so don't add them to the list of possible branches.\n    if (route.path == null && !route.index) {\n      return;\n    }\n    branches.push({\n      path,\n      score: computeScore(path, route.index),\n      routesMeta\n    });\n  };\n  routes.forEach((route, index) => {\n    var _route$path;\n    // coarse-grain check for optional params\n    if (route.path === \"\" || !((_route$path = route.path) != null && _route$path.includes(\"?\"))) {\n      flattenRoute(route, index);\n    } else {\n      for (let exploded of explodeOptionalSegments(route.path)) {\n        flattenRoute(route, index, exploded);\n      }\n    }\n  });\n  return branches;\n}\n/**\n * Computes all combinations of optional path segments for a given path,\n * excluding combinations that are ambiguous and of lower priority.\n *\n * For example, `/one/:two?/three/:four?/:five?` explodes to:\n * - `/one/three`\n * - `/one/:two/three`\n * - `/one/three/:four`\n * - `/one/three/:five`\n * - `/one/:two/three/:four`\n * - `/one/:two/three/:five`\n * - `/one/three/:four/:five`\n * - `/one/:two/three/:four/:five`\n */\nfunction explodeOptionalSegments(path) {\n  let segments = path.split(\"/\");\n  if (segments.length === 0) return [];\n  let [first, ...rest] = segments;\n  // Optional path segments are denoted by a trailing `?`\n  let isOptional = first.endsWith(\"?\");\n  // Compute the corresponding required segment: `foo?` -> `foo`\n  let required = first.replace(/\\?$/, \"\");\n  if (rest.length === 0) {\n    // Intepret empty string as omitting an optional segment\n    // `[\"one\", \"\", \"three\"]` corresponds to omitting `:two` from `/one/:two?/three` -> `/one/three`\n    return isOptional ? [required, \"\"] : [required];\n  }\n  let restExploded = explodeOptionalSegments(rest.join(\"/\"));\n  let result = [];\n  // All child paths with the prefix.  Do this for all children before the\n  // optional version for all children, so we get consistent ordering where the\n  // parent optional aspect is preferred as required.  Otherwise, we can get\n  // child sections interspersed where deeper optional segments are higher than\n  // parent optional segments, where for example, /:two would explode _earlier_\n  // then /:one.  By always including the parent as required _for all children_\n  // first, we avoid this issue\n  result.push(...restExploded.map(subpath => subpath === \"\" ? required : [required, subpath].join(\"/\")));\n  // Then, if this is an optional value, add all child versions without\n  if (isOptional) {\n    result.push(...restExploded);\n  }\n  // for absolute paths, ensure `/` instead of empty segment\n  return result.map(exploded => path.startsWith(\"/\") && exploded === \"\" ? \"/\" : exploded);\n}\nfunction rankRouteBranches(branches) {\n  branches.sort((a, b) => a.score !== b.score ? b.score - a.score // Higher score first\n  : compareIndexes(a.routesMeta.map(meta => meta.childrenIndex), b.routesMeta.map(meta => meta.childrenIndex)));\n}\nconst paramRe = /^:\\w+$/;\nconst dynamicSegmentValue = 3;\nconst indexRouteValue = 2;\nconst emptySegmentValue = 1;\nconst staticSegmentValue = 10;\nconst splatPenalty = -2;\nconst isSplat = s => s === \"*\";\nfunction computeScore(path, index) {\n  let segments = path.split(\"/\");\n  let initialScore = segments.length;\n  if (segments.some(isSplat)) {\n    initialScore += splatPenalty;\n  }\n  if (index) {\n    initialScore += indexRouteValue;\n  }\n  return segments.filter(s => !isSplat(s)).reduce((score, segment) => score + (paramRe.test(segment) ? dynamicSegmentValue : segment === \"\" ? emptySegmentValue : staticSegmentValue), initialScore);\n}\nfunction compareIndexes(a, b) {\n  let siblings = a.length === b.length && a.slice(0, -1).every((n, i) => n === b[i]);\n  return siblings ?\n  // If two routes are siblings, we should try to match the earlier sibling\n  // first. This allows people to have fine-grained control over the matching\n  // behavior by simply putting routes with identical paths in the order they\n  // want them tried.\n  a[a.length - 1] - b[b.length - 1] :\n  // Otherwise, it doesn't really make sense to rank non-siblings by index,\n  // so they sort equally.\n  0;\n}\nfunction matchRouteBranch(branch, pathname) {\n  let {\n    routesMeta\n  } = branch;\n  let matchedParams = {};\n  let matchedPathname = \"/\";\n  let matches = [];\n  for (let i = 0; i < routesMeta.length; ++i) {\n    let meta = routesMeta[i];\n    let end = i === routesMeta.length - 1;\n    let remainingPathname = matchedPathname === \"/\" ? pathname : pathname.slice(matchedPathname.length) || \"/\";\n    let match = matchPath({\n      path: meta.relativePath,\n      caseSensitive: meta.caseSensitive,\n      end\n    }, remainingPathname);\n    if (!match) return null;\n    Object.assign(matchedParams, match.params);\n    let route = meta.route;\n    matches.push({\n      // TODO: Can this as be avoided?\n      params: matchedParams,\n      pathname: joinPaths([matchedPathname, match.pathname]),\n      pathnameBase: normalizePathname(joinPaths([matchedPathname, match.pathnameBase])),\n      route\n    });\n    if (match.pathnameBase !== \"/\") {\n      matchedPathname = joinPaths([matchedPathname, match.pathnameBase]);\n    }\n  }\n  return matches;\n}\n/**\n * Returns a path with params interpolated.\n *\n * @see https://reactrouter.com/utils/generate-path\n */\nfunction generatePath(originalPath, params) {\n  if (params === void 0) {\n    params = {};\n  }\n  let path = originalPath;\n  if (path.endsWith(\"*\") && path !== \"*\" && !path.endsWith(\"/*\")) {\n    warning(false, \"Route path \\\"\" + path + \"\\\" will be treated as if it were \" + (\"\\\"\" + path.replace(/\\*$/, \"/*\") + \"\\\" because the `*` character must \") + \"always follow a `/` in the pattern. To get rid of this warning, \" + (\"please change the route path to \\\"\" + path.replace(/\\*$/, \"/*\") + \"\\\".\"));\n    path = path.replace(/\\*$/, \"/*\");\n  }\n  // ensure `/` is added at the beginning if the path is absolute\n  const prefix = path.startsWith(\"/\") ? \"/\" : \"\";\n  const stringify = p => p == null ? \"\" : typeof p === \"string\" ? p : String(p);\n  const segments = path.split(/\\/+/).map((segment, index, array) => {\n    const isLastSegment = index === array.length - 1;\n    // only apply the splat if it's the last segment\n    if (isLastSegment && segment === \"*\") {\n      const star = \"*\";\n      // Apply the splat\n      return stringify(params[star]);\n    }\n    const keyMatch = segment.match(/^:(\\w+)(\\??)$/);\n    if (keyMatch) {\n      const [, key, optional] = keyMatch;\n      let param = params[key];\n      invariant(optional === \"?\" || param != null, \"Missing \\\":\" + key + \"\\\" param\");\n      return stringify(param);\n    }\n    // Remove any optional markers from optional static segments\n    return segment.replace(/\\?$/g, \"\");\n  })\n  // Remove empty segments\n  .filter(segment => !!segment);\n  return prefix + segments.join(\"/\");\n}\n/**\n * Performs pattern matching on a URL pathname and returns information about\n * the match.\n *\n * @see https://reactrouter.com/utils/match-path\n */\nfunction matchPath(pattern, pathname) {\n  if (typeof pattern === \"string\") {\n    pattern = {\n      path: pattern,\n      caseSensitive: false,\n      end: true\n    };\n  }\n  let [matcher, compiledParams] = compilePath(pattern.path, pattern.caseSensitive, pattern.end);\n  let match = pathname.match(matcher);\n  if (!match) return null;\n  let matchedPathname = match[0];\n  let pathnameBase = matchedPathname.replace(/(.)\\/+$/, \"$1\");\n  let captureGroups = match.slice(1);\n  let params = compiledParams.reduce((memo, _ref, index) => {\n    let {\n      paramName,\n      isOptional\n    } = _ref;\n    // We need to compute the pathnameBase here using the raw splat value\n    // instead of using params[\"*\"] later because it will be decoded then\n    if (paramName === \"*\") {\n      let splatValue = captureGroups[index] || \"\";\n      pathnameBase = matchedPathname.slice(0, matchedPathname.length - splatValue.length).replace(/(.)\\/+$/, \"$1\");\n    }\n    const value = captureGroups[index];\n    if (isOptional && !value) {\n      memo[paramName] = undefined;\n    } else {\n      memo[paramName] = safelyDecodeURIComponent(value || \"\", paramName);\n    }\n    return memo;\n  }, {});\n  return {\n    params,\n    pathname: matchedPathname,\n    pathnameBase,\n    pattern\n  };\n}\nfunction compilePath(path, caseSensitive, end) {\n  if (caseSensitive === void 0) {\n    caseSensitive = false;\n  }\n  if (end === void 0) {\n    end = true;\n  }\n  warning(path === \"*\" || !path.endsWith(\"*\") || path.endsWith(\"/*\"), \"Route path \\\"\" + path + \"\\\" will be treated as if it were \" + (\"\\\"\" + path.replace(/\\*$/, \"/*\") + \"\\\" because the `*` character must \") + \"always follow a `/` in the pattern. To get rid of this warning, \" + (\"please change the route path to \\\"\" + path.replace(/\\*$/, \"/*\") + \"\\\".\"));\n  let params = [];\n  let regexpSource = \"^\" + path.replace(/\\/*\\*?$/, \"\") // Ignore trailing / and /*, we'll handle it below\n  .replace(/^\\/*/, \"/\") // Make sure it has a leading /\n  .replace(/[\\\\.*+^${}|()[\\]]/g, \"\\\\$&\") // Escape special regex chars\n  .replace(/\\/:(\\w+)(\\?)?/g, (_, paramName, isOptional) => {\n    params.push({\n      paramName,\n      isOptional: isOptional != null\n    });\n    return isOptional ? \"/?([^\\\\/]+)?\" : \"/([^\\\\/]+)\";\n  });\n  if (path.endsWith(\"*\")) {\n    params.push({\n      paramName: \"*\"\n    });\n    regexpSource += path === \"*\" || path === \"/*\" ? \"(.*)$\" // Already matched the initial /, just match the rest\n    : \"(?:\\\\/(.+)|\\\\/*)$\"; // Don't include the / in params[\"*\"]\n  } else if (end) {\n    // When matching to the end, ignore trailing slashes\n    regexpSource += \"\\\\/*$\";\n  } else if (path !== \"\" && path !== \"/\") {\n    // If our path is non-empty and contains anything beyond an initial slash,\n    // then we have _some_ form of path in our regex, so we should expect to\n    // match only if we find the end of this path segment.  Look for an optional\n    // non-captured trailing slash (to match a portion of the URL) or the end\n    // of the path (if we've matched to the end).  We used to do this with a\n    // word boundary but that gives false positives on routes like\n    // /user-preferences since `-` counts as a word boundary.\n    regexpSource += \"(?:(?=\\\\/|$))\";\n  } else ;\n  let matcher = new RegExp(regexpSource, caseSensitive ? undefined : \"i\");\n  return [matcher, params];\n}\nfunction safelyDecodeURI(value) {\n  try {\n    return decodeURI(value);\n  } catch (error) {\n    warning(false, \"The URL path \\\"\" + value + \"\\\" could not be decoded because it is is a \" + \"malformed URL segment. This is probably due to a bad percent \" + (\"encoding (\" + error + \").\"));\n    return value;\n  }\n}\nfunction safelyDecodeURIComponent(value, paramName) {\n  try {\n    return decodeURIComponent(value);\n  } catch (error) {\n    warning(false, \"The value for the URL param \\\"\" + paramName + \"\\\" will not be decoded because\" + (\" the string \\\"\" + value + \"\\\" is a malformed URL segment. This is probably\") + (\" due to a bad percent encoding (\" + error + \").\"));\n    return value;\n  }\n}\n/**\n * @private\n */\nfunction stripBasename(pathname, basename) {\n  if (basename === \"/\") return pathname;\n  if (!pathname.toLowerCase().startsWith(basename.toLowerCase())) {\n    return null;\n  }\n  // We want to leave trailing slash behavior in the user's control, so if they\n  // specify a basename with a trailing slash, we should support it\n  let startIndex = basename.endsWith(\"/\") ? basename.length - 1 : basename.length;\n  let nextChar = pathname.charAt(startIndex);\n  if (nextChar && nextChar !== \"/\") {\n    // pathname does not start with basename/\n    return null;\n  }\n  return pathname.slice(startIndex) || \"/\";\n}\n/**\n * Returns a resolved path object relative to the given pathname.\n *\n * @see https://reactrouter.com/utils/resolve-path\n */\nfunction resolvePath(to, fromPathname) {\n  if (fromPathname === void 0) {\n    fromPathname = \"/\";\n  }\n  let {\n    pathname: toPathname,\n    search = \"\",\n    hash = \"\"\n  } = typeof to === \"string\" ? parsePath(to) : to;\n  let pathname = toPathname ? toPathname.startsWith(\"/\") ? toPathname : resolvePathname(toPathname, fromPathname) : fromPathname;\n  return {\n    pathname,\n    search: normalizeSearch(search),\n    hash: normalizeHash(hash)\n  };\n}\nfunction resolvePathname(relativePath, fromPathname) {\n  let segments = fromPathname.replace(/\\/+$/, \"\").split(\"/\");\n  let relativeSegments = relativePath.split(\"/\");\n  relativeSegments.forEach(segment => {\n    if (segment === \"..\") {\n      // Keep the root \"\" segment so the pathname starts at /\n      if (segments.length > 1) segments.pop();\n    } else if (segment !== \".\") {\n      segments.push(segment);\n    }\n  });\n  return segments.length > 1 ? segments.join(\"/\") : \"/\";\n}\nfunction getInvalidPathError(char, field, dest, path) {\n  return \"Cannot include a '\" + char + \"' character in a manually specified \" + (\"`to.\" + field + \"` field [\" + JSON.stringify(path) + \"].  Please separate it out to the \") + (\"`to.\" + dest + \"` field. Alternatively you may provide the full path as \") + \"a string in <Link to=\\\"...\\\"> and the router will parse it for you.\";\n}\n/**\n * @private\n *\n * When processing relative navigation we want to ignore ancestor routes that\n * do not contribute to the path, such that index/pathless layout routes don't\n * interfere.\n *\n * For example, when moving a route element into an index route and/or a\n * pathless layout route, relative link behavior contained within should stay\n * the same.  Both of the following examples should link back to the root:\n *\n *   <Route path=\"/\">\n *     <Route path=\"accounts\" element={<Link to=\"..\"}>\n *   </Route>\n *\n *   <Route path=\"/\">\n *     <Route path=\"accounts\">\n *       <Route element={<AccountsLayout />}>       // <-- Does not contribute\n *         <Route index element={<Link to=\"..\"} />  // <-- Does not contribute\n *       </Route\n *     </Route>\n *   </Route>\n */\nfunction getPathContributingMatches(matches) {\n  return matches.filter((match, index) => index === 0 || match.route.path && match.route.path.length > 0);\n}\n/**\n * @private\n */\nfunction resolveTo(toArg, routePathnames, locationPathname, isPathRelative) {\n  if (isPathRelative === void 0) {\n    isPathRelative = false;\n  }\n  let to;\n  if (typeof toArg === \"string\") {\n    to = parsePath(toArg);\n  } else {\n    to = _extends({}, toArg);\n    invariant(!to.pathname || !to.pathname.includes(\"?\"), getInvalidPathError(\"?\", \"pathname\", \"search\", to));\n    invariant(!to.pathname || !to.pathname.includes(\"#\"), getInvalidPathError(\"#\", \"pathname\", \"hash\", to));\n    invariant(!to.search || !to.search.includes(\"#\"), getInvalidPathError(\"#\", \"search\", \"hash\", to));\n  }\n  let isEmptyPath = toArg === \"\" || to.pathname === \"\";\n  let toPathname = isEmptyPath ? \"/\" : to.pathname;\n  let from;\n  // Routing is relative to the current pathname if explicitly requested.\n  //\n  // If a pathname is explicitly provided in `to`, it should be relative to the\n  // route context. This is explained in `Note on `<Link to>` values` in our\n  // migration guide from v5 as a means of disambiguation between `to` values\n  // that begin with `/` and those that do not. However, this is problematic for\n  // `to` values that do not provide a pathname. `to` can simply be a search or\n  // hash string, in which case we should assume that the navigation is relative\n  // to the current location's pathname and *not* the route pathname.\n  if (isPathRelative || toPathname == null) {\n    from = locationPathname;\n  } else {\n    let routePathnameIndex = routePathnames.length - 1;\n    if (toPathname.startsWith(\"..\")) {\n      let toSegments = toPathname.split(\"/\");\n      // Each leading .. segment means \"go up one route\" instead of \"go up one\n      // URL segment\".  This is a key difference from how <a href> works and a\n      // major reason we call this a \"to\" value instead of a \"href\".\n      while (toSegments[0] === \"..\") {\n        toSegments.shift();\n        routePathnameIndex -= 1;\n      }\n      to.pathname = toSegments.join(\"/\");\n    }\n    // If there are more \"..\" segments than parent routes, resolve relative to\n    // the root / URL.\n    from = routePathnameIndex >= 0 ? routePathnames[routePathnameIndex] : \"/\";\n  }\n  let path = resolvePath(to, from);\n  // Ensure the pathname has a trailing slash if the original \"to\" had one\n  let hasExplicitTrailingSlash = toPathname && toPathname !== \"/\" && toPathname.endsWith(\"/\");\n  // Or if this was a link to the current path which has a trailing slash\n  let hasCurrentTrailingSlash = (isEmptyPath || toPathname === \".\") && locationPathname.endsWith(\"/\");\n  if (!path.pathname.endsWith(\"/\") && (hasExplicitTrailingSlash || hasCurrentTrailingSlash)) {\n    path.pathname += \"/\";\n  }\n  return path;\n}\n/**\n * @private\n */\nfunction getToPathname(to) {\n  // Empty strings should be treated the same as / paths\n  return to === \"\" || to.pathname === \"\" ? \"/\" : typeof to === \"string\" ? parsePath(to).pathname : to.pathname;\n}\n/**\n * @private\n */\nconst joinPaths = paths => paths.join(\"/\").replace(/\\/\\/+/g, \"/\");\n/**\n * @private\n */\nconst normalizePathname = pathname => pathname.replace(/\\/+$/, \"\").replace(/^\\/*/, \"/\");\n/**\n * @private\n */\nconst normalizeSearch = search => !search || search === \"?\" ? \"\" : search.startsWith(\"?\") ? search : \"?\" + search;\n/**\n * @private\n */\nconst normalizeHash = hash => !hash || hash === \"#\" ? \"\" : hash.startsWith(\"#\") ? hash : \"#\" + hash;\n/**\n * This is a shortcut for creating `application/json` responses. Converts `data`\n * to JSON and sets the `Content-Type` header.\n */\nconst json = function json(data, init) {\n  if (init === void 0) {\n    init = {};\n  }\n  let responseInit = typeof init === \"number\" ? {\n    status: init\n  } : init;\n  let headers = new Headers(responseInit.headers);\n  if (!headers.has(\"Content-Type\")) {\n    headers.set(\"Content-Type\", \"application/json; charset=utf-8\");\n  }\n  return new Response(JSON.stringify(data), _extends({}, responseInit, {\n    headers\n  }));\n};\nclass AbortedDeferredError extends Error {}\nclass DeferredData {\n  constructor(data, responseInit) {\n    this.pendingKeysSet = new Set();\n    this.subscribers = new Set();\n    this.deferredKeys = [];\n    invariant(data && typeof data === \"object\" && !Array.isArray(data), \"defer() only accepts plain objects\");\n    // Set up an AbortController + Promise we can race against to exit early\n    // cancellation\n    let reject;\n    this.abortPromise = new Promise((_, r) => reject = r);\n    this.controller = new AbortController();\n    let onAbort = () => reject(new AbortedDeferredError(\"Deferred data aborted\"));\n    this.unlistenAbortSignal = () => this.controller.signal.removeEventListener(\"abort\", onAbort);\n    this.controller.signal.addEventListener(\"abort\", onAbort);\n    this.data = Object.entries(data).reduce((acc, _ref2) => {\n      let [key, value] = _ref2;\n      return Object.assign(acc, {\n        [key]: this.trackPromise(key, value)\n      });\n    }, {});\n    if (this.done) {\n      // All incoming values were resolved\n      this.unlistenAbortSignal();\n    }\n    this.init = responseInit;\n  }\n  trackPromise(key, value) {\n    if (!(value instanceof Promise)) {\n      return value;\n    }\n    this.deferredKeys.push(key);\n    this.pendingKeysSet.add(key);\n    // We store a little wrapper promise that will be extended with\n    // _data/_error props upon resolve/reject\n    let promise = Promise.race([value, this.abortPromise]).then(data => this.onSettle(promise, key, undefined, data), error => this.onSettle(promise, key, error));\n    // Register rejection listeners to avoid uncaught promise rejections on\n    // errors or aborted deferred values\n    promise.catch(() => {});\n    Object.defineProperty(promise, \"_tracked\", {\n      get: () => true\n    });\n    return promise;\n  }\n  onSettle(promise, key, error, data) {\n    if (this.controller.signal.aborted && error instanceof AbortedDeferredError) {\n      this.unlistenAbortSignal();\n      Object.defineProperty(promise, \"_error\", {\n        get: () => error\n      });\n      return Promise.reject(error);\n    }\n    this.pendingKeysSet.delete(key);\n    if (this.done) {\n      // Nothing left to abort!\n      this.unlistenAbortSignal();\n    }\n    // If the promise was resolved/rejected with undefined, we'll throw an error as you\n    // should always resolve with a value or null\n    if (error === undefined && data === undefined) {\n      let undefinedError = new Error(\"Deferred data for key \\\"\" + key + \"\\\" resolved/rejected with `undefined`, \" + \"you must resolve/reject with a value or `null`.\");\n      Object.defineProperty(promise, \"_error\", {\n        get: () => undefinedError\n      });\n      this.emit(false, key);\n      return Promise.reject(undefinedError);\n    }\n    if (data === undefined) {\n      Object.defineProperty(promise, \"_error\", {\n        get: () => error\n      });\n      this.emit(false, key);\n      return Promise.reject(error);\n    }\n    Object.defineProperty(promise, \"_data\", {\n      get: () => data\n    });\n    this.emit(false, key);\n    return data;\n  }\n  emit(aborted, settledKey) {\n    this.subscribers.forEach(subscriber => subscriber(aborted, settledKey));\n  }\n  subscribe(fn) {\n    this.subscribers.add(fn);\n    return () => this.subscribers.delete(fn);\n  }\n  cancel() {\n    this.controller.abort();\n    this.pendingKeysSet.forEach((v, k) => this.pendingKeysSet.delete(k));\n    this.emit(true);\n  }\n  async resolveData(signal) {\n    let aborted = false;\n    if (!this.done) {\n      let onAbort = () => this.cancel();\n      signal.addEventListener(\"abort\", onAbort);\n      aborted = await new Promise(resolve => {\n        this.subscribe(aborted => {\n          signal.removeEventListener(\"abort\", onAbort);\n          if (aborted || this.done) {\n            resolve(aborted);\n          }\n        });\n      });\n    }\n    return aborted;\n  }\n  get done() {\n    return this.pendingKeysSet.size === 0;\n  }\n  get unwrappedData() {\n    invariant(this.data !== null && this.done, \"Can only unwrap data on initialized and settled deferreds\");\n    return Object.entries(this.data).reduce((acc, _ref3) => {\n      let [key, value] = _ref3;\n      return Object.assign(acc, {\n        [key]: unwrapTrackedPromise(value)\n      });\n    }, {});\n  }\n  get pendingKeys() {\n    return Array.from(this.pendingKeysSet);\n  }\n}\nfunction isTrackedPromise(value) {\n  return value instanceof Promise && value._tracked === true;\n}\nfunction unwrapTrackedPromise(value) {\n  if (!isTrackedPromise(value)) {\n    return value;\n  }\n  if (value._error) {\n    throw value._error;\n  }\n  return value._data;\n}\nconst defer = function defer(data, init) {\n  if (init === void 0) {\n    init = {};\n  }\n  let responseInit = typeof init === \"number\" ? {\n    status: init\n  } : init;\n  return new DeferredData(data, responseInit);\n};\n/**\n * A redirect response. Sets the status code and the `Location` header.\n * Defaults to \"302 Found\".\n */\nconst redirect = function redirect(url, init) {\n  if (init === void 0) {\n    init = 302;\n  }\n  let responseInit = init;\n  if (typeof responseInit === \"number\") {\n    responseInit = {\n      status: responseInit\n    };\n  } else if (typeof responseInit.status === \"undefined\") {\n    responseInit.status = 302;\n  }\n  let headers = new Headers(responseInit.headers);\n  headers.set(\"Location\", url);\n  return new Response(null, _extends({}, responseInit, {\n    headers\n  }));\n};\n/**\n * A redirect response that will force a document reload to the new location.\n * Sets the status code and the `Location` header.\n * Defaults to \"302 Found\".\n */\nconst redirectDocument = (url, init) => {\n  let response = redirect(url, init);\n  response.headers.set(\"X-Remix-Reload-Document\", \"true\");\n  return response;\n};\n/**\n * @private\n * Utility class we use to hold auto-unwrapped 4xx/5xx Response bodies\n *\n * We don't export the class for public use since it's an implementation\n * detail, but we export the interface above so folks can build their own\n * abstractions around instances via isRouteErrorResponse()\n */\nclass ErrorResponseImpl {\n  constructor(status, statusText, data, internal) {\n    if (internal === void 0) {\n      internal = false;\n    }\n    this.status = status;\n    this.statusText = statusText || \"\";\n    this.internal = internal;\n    if (data instanceof Error) {\n      this.data = data.toString();\n      this.error = data;\n    } else {\n      this.data = data;\n    }\n  }\n}\n/**\n * Check if the given error is an ErrorResponse generated from a 4xx/5xx\n * Response thrown from an action/loader\n */\nfunction isRouteErrorResponse(error) {\n  return error != null && typeof error.status === \"number\" && typeof error.statusText === \"string\" && typeof error.internal === \"boolean\" && \"data\" in error;\n}\n\nconst validMutationMethodsArr = [\"post\", \"put\", \"patch\", \"delete\"];\nconst validMutationMethods = new Set(validMutationMethodsArr);\nconst validRequestMethodsArr = [\"get\", ...validMutationMethodsArr];\nconst validRequestMethods = new Set(validRequestMethodsArr);\nconst redirectStatusCodes = new Set([301, 302, 303, 307, 308]);\nconst redirectPreserveMethodStatusCodes = new Set([307, 308]);\nconst IDLE_NAVIGATION = {\n  state: \"idle\",\n  location: undefined,\n  formMethod: undefined,\n  formAction: undefined,\n  formEncType: undefined,\n  formData: undefined,\n  json: undefined,\n  text: undefined\n};\nconst IDLE_FETCHER = {\n  state: \"idle\",\n  data: undefined,\n  formMethod: undefined,\n  formAction: undefined,\n  formEncType: undefined,\n  formData: undefined,\n  json: undefined,\n  text: undefined\n};\nconst IDLE_BLOCKER = {\n  state: \"unblocked\",\n  proceed: undefined,\n  reset: undefined,\n  location: undefined\n};\nconst ABSOLUTE_URL_REGEX = /^(?:[a-z][a-z0-9+.-]*:|\\/\\/)/i;\nconst defaultMapRouteProperties = route => ({\n  hasErrorBoundary: Boolean(route.hasErrorBoundary)\n});\nconst TRANSITIONS_STORAGE_KEY = \"remix-router-transitions\";\n//#endregion\n////////////////////////////////////////////////////////////////////////////////\n//#region createRouter\n////////////////////////////////////////////////////////////////////////////////\n/**\n * Create a router and listen to history POP navigations\n */\nfunction createRouter(init) {\n  const routerWindow = init.window ? init.window : typeof window !== \"undefined\" ? window : undefined;\n  const isBrowser = typeof routerWindow !== \"undefined\" && typeof routerWindow.document !== \"undefined\" && typeof routerWindow.document.createElement !== \"undefined\";\n  const isServer = !isBrowser;\n  invariant(init.routes.length > 0, \"You must provide a non-empty routes array to createRouter\");\n  let mapRouteProperties;\n  if (init.mapRouteProperties) {\n    mapRouteProperties = init.mapRouteProperties;\n  } else if (init.detectErrorBoundary) {\n    // If they are still using the deprecated version, wrap it with the new API\n    let detectErrorBoundary = init.detectErrorBoundary;\n    mapRouteProperties = route => ({\n      hasErrorBoundary: detectErrorBoundary(route)\n    });\n  } else {\n    mapRouteProperties = defaultMapRouteProperties;\n  }\n  // Routes keyed by ID\n  let manifest = {};\n  // Routes in tree format for matching\n  let dataRoutes = convertRoutesToDataRoutes(init.routes, mapRouteProperties, undefined, manifest);\n  let inFlightDataRoutes;\n  let basename = init.basename || \"/\";\n  // Config driven behavior flags\n  let future = _extends({\n    v7_fetcherPersist: false,\n    v7_normalizeFormMethod: false,\n    v7_prependBasename: false\n  }, init.future);\n  // Cleanup function for history\n  let unlistenHistory = null;\n  // Externally-provided functions to call on all state changes\n  let subscribers = new Set();\n  // Externally-provided object to hold scroll restoration locations during routing\n  let savedScrollPositions = null;\n  // Externally-provided function to get scroll restoration keys\n  let getScrollRestorationKey = null;\n  // Externally-provided function to get current scroll position\n  let getScrollPosition = null;\n  // One-time flag to control the initial hydration scroll restoration.  Because\n  // we don't get the saved positions from <ScrollRestoration /> until _after_\n  // the initial render, we need to manually trigger a separate updateState to\n  // send along the restoreScrollPosition\n  // Set to true if we have `hydrationData` since we assume we were SSR'd and that\n  // SSR did the initial scroll restoration.\n  let initialScrollRestored = init.hydrationData != null;\n  let initialMatches = matchRoutes(dataRoutes, init.history.location, basename);\n  let initialErrors = null;\n  if (initialMatches == null) {\n    // If we do not match a user-provided-route, fall back to the root\n    // to allow the error boundary to take over\n    let error = getInternalRouterError(404, {\n      pathname: init.history.location.pathname\n    });\n    let {\n      matches,\n      route\n    } = getShortCircuitMatches(dataRoutes);\n    initialMatches = matches;\n    initialErrors = {\n      [route.id]: error\n    };\n  }\n  let initialized =\n  // All initialMatches need to be loaded before we're ready.  If we have lazy\n  // functions around still then we'll need to run them in initialize()\n  !initialMatches.some(m => m.route.lazy) && (\n  // And we have to either have no loaders or have been provided hydrationData\n  !initialMatches.some(m => m.route.loader) || init.hydrationData != null);\n  let router;\n  let state = {\n    historyAction: init.history.action,\n    location: init.history.location,\n    matches: initialMatches,\n    initialized,\n    navigation: IDLE_NAVIGATION,\n    // Don't restore on initial updateState() if we were SSR'd\n    restoreScrollPosition: init.hydrationData != null ? false : null,\n    preventScrollReset: false,\n    revalidation: \"idle\",\n    loaderData: init.hydrationData && init.hydrationData.loaderData || {},\n    actionData: init.hydrationData && init.hydrationData.actionData || null,\n    errors: init.hydrationData && init.hydrationData.errors || initialErrors,\n    fetchers: new Map(),\n    blockers: new Map()\n  };\n  // -- Stateful internal variables to manage navigations --\n  // Current navigation in progress (to be committed in completeNavigation)\n  let pendingAction = Action.Pop;\n  // Should the current navigation prevent the scroll reset if scroll cannot\n  // be restored?\n  let pendingPreventScrollReset = false;\n  // AbortController for the active navigation\n  let pendingNavigationController;\n  // Should the current navigation enable document.startViewTransition?\n  let pendingViewTransitionEnabled = false;\n  // Store applied view transitions so we can apply them on POP\n  let appliedViewTransitions = new Map();\n  // Cleanup function for persisting applied transitions to sessionStorage\n  let removePageHideEventListener = null;\n  // We use this to avoid touching history in completeNavigation if a\n  // revalidation is entirely uninterrupted\n  let isUninterruptedRevalidation = false;\n  // Use this internal flag to force revalidation of all loaders:\n  //  - submissions (completed or interrupted)\n  //  - useRevalidator()\n  //  - X-Remix-Revalidate (from redirect)\n  let isRevalidationRequired = false;\n  // Use this internal array to capture routes that require revalidation due\n  // to a cancelled deferred on action submission\n  let cancelledDeferredRoutes = [];\n  // Use this internal array to capture fetcher loads that were cancelled by an\n  // action navigation and require revalidation\n  let cancelledFetcherLoads = [];\n  // AbortControllers for any in-flight fetchers\n  let fetchControllers = new Map();\n  // Track loads based on the order in which they started\n  let incrementingLoadId = 0;\n  // Track the outstanding pending navigation data load to be compared against\n  // the globally incrementing load when a fetcher load lands after a completed\n  // navigation\n  let pendingNavigationLoadId = -1;\n  // Fetchers that triggered data reloads as a result of their actions\n  let fetchReloadIds = new Map();\n  // Fetchers that triggered redirect navigations\n  let fetchRedirectIds = new Set();\n  // Most recent href/match for fetcher.load calls for fetchers\n  let fetchLoadMatches = new Map();\n  // Ref-count mounted fetchers so we know when it's ok to clean them up\n  let activeFetchers = new Map();\n  // Fetchers that have requested a delete when using v7_fetcherPersist,\n  // they'll be officially removed after they return to idle\n  let deletedFetchers = new Set();\n  // Store DeferredData instances for active route matches.  When a\n  // route loader returns defer() we stick one in here.  Then, when a nested\n  // promise resolves we update loaderData.  If a new navigation starts we\n  // cancel active deferreds for eliminated routes.\n  let activeDeferreds = new Map();\n  // Store blocker functions in a separate Map outside of router state since\n  // we don't need to update UI state if they change\n  let blockerFunctions = new Map();\n  // Flag to ignore the next history update, so we can revert the URL change on\n  // a POP navigation that was blocked by the user without touching router state\n  let ignoreNextHistoryUpdate = false;\n  // Initialize the router, all side effects should be kicked off from here.\n  // Implemented as a Fluent API for ease of:\n  //   let router = createRouter(init).initialize();\n  function initialize() {\n    // If history informs us of a POP navigation, start the navigation but do not update\n    // state.  We'll update our own state once the navigation completes\n    unlistenHistory = init.history.listen(_ref => {\n      let {\n        action: historyAction,\n        location,\n        delta\n      } = _ref;\n      // Ignore this event if it was just us resetting the URL from a\n      // blocked POP navigation\n      if (ignoreNextHistoryUpdate) {\n        ignoreNextHistoryUpdate = false;\n        return;\n      }\n      warning(blockerFunctions.size === 0 || delta != null, \"You are trying to use a blocker on a POP navigation to a location \" + \"that was not created by @remix-run/router. This will fail silently in \" + \"production. This can happen if you are navigating outside the router \" + \"via `window.history.pushState`/`window.location.hash` instead of using \" + \"router navigation APIs.  This can also happen if you are using \" + \"createHashRouter and the user manually changes the URL.\");\n      let blockerKey = shouldBlockNavigation({\n        currentLocation: state.location,\n        nextLocation: location,\n        historyAction\n      });\n      if (blockerKey && delta != null) {\n        // Restore the URL to match the current UI, but don't update router state\n        ignoreNextHistoryUpdate = true;\n        init.history.go(delta * -1);\n        // Put the blocker into a blocked state\n        updateBlocker(blockerKey, {\n          state: \"blocked\",\n          location,\n          proceed() {\n            updateBlocker(blockerKey, {\n              state: \"proceeding\",\n              proceed: undefined,\n              reset: undefined,\n              location\n            });\n            // Re-do the same POP navigation we just blocked\n            init.history.go(delta);\n          },\n          reset() {\n            let blockers = new Map(state.blockers);\n            blockers.set(blockerKey, IDLE_BLOCKER);\n            updateState({\n              blockers\n            });\n          }\n        });\n        return;\n      }\n      return startNavigation(historyAction, location);\n    });\n    if (isBrowser) {\n      // FIXME: This feels gross.  How can we cleanup the lines between\n      // scrollRestoration/appliedTransitions persistance?\n      restoreAppliedTransitions(routerWindow, appliedViewTransitions);\n      let _saveAppliedTransitions = () => persistAppliedTransitions(routerWindow, appliedViewTransitions);\n      routerWindow.addEventListener(\"pagehide\", _saveAppliedTransitions);\n      removePageHideEventListener = () => routerWindow.removeEventListener(\"pagehide\", _saveAppliedTransitions);\n    }\n    // Kick off initial data load if needed.  Use Pop to avoid modifying history\n    // Note we don't do any handling of lazy here.  For SPA's it'll get handled\n    // in the normal navigation flow.  For SSR it's expected that lazy modules are\n    // resolved prior to router creation since we can't go into a fallbackElement\n    // UI for SSR'd apps\n    if (!state.initialized) {\n      startNavigation(Action.Pop, state.location);\n    }\n    return router;\n  }\n  // Clean up a router and it's side effects\n  function dispose() {\n    if (unlistenHistory) {\n      unlistenHistory();\n    }\n    if (removePageHideEventListener) {\n      removePageHideEventListener();\n    }\n    subscribers.clear();\n    pendingNavigationController && pendingNavigationController.abort();\n    state.fetchers.forEach((_, key) => deleteFetcher(key));\n    state.blockers.forEach((_, key) => deleteBlocker(key));\n  }\n  // Subscribe to state updates for the router\n  function subscribe(fn) {\n    subscribers.add(fn);\n    return () => subscribers.delete(fn);\n  }\n  // Update our state and notify the calling context of the change\n  function updateState(newState, viewTransitionOpts) {\n    state = _extends({}, state, newState);\n    // Prep fetcher cleanup so we can tell the UI which fetcher data entries\n    // can be removed\n    let completedFetchers = [];\n    let deletedFetchersKeys = [];\n    if (future.v7_fetcherPersist) {\n      state.fetchers.forEach((fetcher, key) => {\n        if (fetcher.state === \"idle\") {\n          if (deletedFetchers.has(key)) {\n            // Unmounted from the UI and can be totally removed\n            deletedFetchersKeys.push(key);\n          } else {\n            // Returned to idle but still mounted in the UI, so semi-remains for\n            // revalidations and such\n            completedFetchers.push(key);\n          }\n        }\n      });\n    }\n    subscribers.forEach(subscriber => subscriber(state, {\n      deletedFetchers: deletedFetchersKeys,\n      unstable_viewTransitionOpts: viewTransitionOpts\n    }));\n    // Remove idle fetchers from state since we only care about in-flight fetchers.\n    if (future.v7_fetcherPersist) {\n      completedFetchers.forEach(key => state.fetchers.delete(key));\n      deletedFetchersKeys.forEach(key => deleteFetcher(key));\n    }\n  }\n  // Complete a navigation returning the state.navigation back to the IDLE_NAVIGATION\n  // and setting state.[historyAction/location/matches] to the new route.\n  // - Location is a required param\n  // - Navigation will always be set to IDLE_NAVIGATION\n  // - Can pass any other state in newState\n  function completeNavigation(location, newState) {\n    var _location$state, _location$state2;\n    // Deduce if we're in a loading/actionReload state:\n    // - We have committed actionData in the store\n    // - The current navigation was a mutation submission\n    // - We're past the submitting state and into the loading state\n    // - The location being loaded is not the result of a redirect\n    let isActionReload = state.actionData != null && state.navigation.formMethod != null && isMutationMethod(state.navigation.formMethod) && state.navigation.state === \"loading\" && ((_location$state = location.state) == null ? void 0 : _location$state._isRedirect) !== true;\n    let actionData;\n    if (newState.actionData) {\n      if (Object.keys(newState.actionData).length > 0) {\n        actionData = newState.actionData;\n      } else {\n        // Empty actionData -> clear prior actionData due to an action error\n        actionData = null;\n      }\n    } else if (isActionReload) {\n      // Keep the current data if we're wrapping up the action reload\n      actionData = state.actionData;\n    } else {\n      // Clear actionData on any other completed navigations\n      actionData = null;\n    }\n    // Always preserve any existing loaderData from re-used routes\n    let loaderData = newState.loaderData ? mergeLoaderData(state.loaderData, newState.loaderData, newState.matches || [], newState.errors) : state.loaderData;\n    // On a successful navigation we can assume we got through all blockers\n    // so we can start fresh\n    let blockers = state.blockers;\n    if (blockers.size > 0) {\n      blockers = new Map(blockers);\n      blockers.forEach((_, k) => blockers.set(k, IDLE_BLOCKER));\n    }\n    // Always respect the user flag.  Otherwise don't reset on mutation\n    // submission navigations unless they redirect\n    let preventScrollReset = pendingPreventScrollReset === true || state.navigation.formMethod != null && isMutationMethod(state.navigation.formMethod) && ((_location$state2 = location.state) == null ? void 0 : _location$state2._isRedirect) !== true;\n    if (inFlightDataRoutes) {\n      dataRoutes = inFlightDataRoutes;\n      inFlightDataRoutes = undefined;\n    }\n    if (isUninterruptedRevalidation) ; else if (pendingAction === Action.Pop) ; else if (pendingAction === Action.Push) {\n      init.history.push(location, location.state);\n    } else if (pendingAction === Action.Replace) {\n      init.history.replace(location, location.state);\n    }\n    let viewTransitionOpts;\n    // On POP, enable transitions if they were enabled on the original navigation\n    if (pendingAction === Action.Pop) {\n      // Forward takes precedence so they behave like the original navigation\n      let priorPaths = appliedViewTransitions.get(state.location.pathname);\n      if (priorPaths && priorPaths.has(location.pathname)) {\n        viewTransitionOpts = {\n          currentLocation: state.location,\n          nextLocation: location\n        };\n      } else if (appliedViewTransitions.has(location.pathname)) {\n        // If we don't have a previous forward nav, assume we're popping back to\n        // the new location and enable if that location previously enabled\n        viewTransitionOpts = {\n          currentLocation: location,\n          nextLocation: state.location\n        };\n      }\n    } else if (pendingViewTransitionEnabled) {\n      // Store the applied transition on PUSH/REPLACE\n      let toPaths = appliedViewTransitions.get(state.location.pathname);\n      if (toPaths) {\n        toPaths.add(location.pathname);\n      } else {\n        toPaths = new Set([location.pathname]);\n        appliedViewTransitions.set(state.location.pathname, toPaths);\n      }\n      viewTransitionOpts = {\n        currentLocation: state.location,\n        nextLocation: location\n      };\n    }\n    updateState(_extends({}, newState, {\n      actionData,\n      loaderData,\n      historyAction: pendingAction,\n      location,\n      initialized: true,\n      navigation: IDLE_NAVIGATION,\n      revalidation: \"idle\",\n      restoreScrollPosition: getSavedScrollPosition(location, newState.matches || state.matches),\n      preventScrollReset,\n      blockers\n    }), viewTransitionOpts);\n    // Reset stateful navigation vars\n    pendingAction = Action.Pop;\n    pendingPreventScrollReset = false;\n    pendingViewTransitionEnabled = false;\n    isUninterruptedRevalidation = false;\n    isRevalidationRequired = false;\n    cancelledDeferredRoutes = [];\n    cancelledFetcherLoads = [];\n  }\n  // Trigger a navigation event, which can either be a numerical POP or a PUSH\n  // replace with an optional submission\n  async function navigate(to, opts) {\n    if (typeof to === \"number\") {\n      init.history.go(to);\n      return;\n    }\n    let normalizedPath = normalizeTo(state.location, state.matches, basename, future.v7_prependBasename, to, opts == null ? void 0 : opts.fromRouteId, opts == null ? void 0 : opts.relative);\n    let {\n      path,\n      submission,\n      error\n    } = normalizeNavigateOptions(future.v7_normalizeFormMethod, false, normalizedPath, opts);\n    let currentLocation = state.location;\n    let nextLocation = createLocation(state.location, path, opts && opts.state);\n    // When using navigate as a PUSH/REPLACE we aren't reading an already-encoded\n    // URL from window.location, so we need to encode it here so the behavior\n    // remains the same as POP and non-data-router usages.  new URL() does all\n    // the same encoding we'd get from a history.pushState/window.location read\n    // without having to touch history\n    nextLocation = _extends({}, nextLocation, init.history.encodeLocation(nextLocation));\n    let userReplace = opts && opts.replace != null ? opts.replace : undefined;\n    let historyAction = Action.Push;\n    if (userReplace === true) {\n      historyAction = Action.Replace;\n    } else if (userReplace === false) ; else if (submission != null && isMutationMethod(submission.formMethod) && submission.formAction === state.location.pathname + state.location.search) {\n      // By default on submissions to the current location we REPLACE so that\n      // users don't have to double-click the back button to get to the prior\n      // location.  If the user redirects to a different location from the\n      // action/loader this will be ignored and the redirect will be a PUSH\n      historyAction = Action.Replace;\n    }\n    let preventScrollReset = opts && \"preventScrollReset\" in opts ? opts.preventScrollReset === true : undefined;\n    let blockerKey = shouldBlockNavigation({\n      currentLocation,\n      nextLocation,\n      historyAction\n    });\n    if (blockerKey) {\n      // Put the blocker into a blocked state\n      updateBlocker(blockerKey, {\n        state: \"blocked\",\n        location: nextLocation,\n        proceed() {\n          updateBlocker(blockerKey, {\n            state: \"proceeding\",\n            proceed: undefined,\n            reset: undefined,\n            location: nextLocation\n          });\n          // Send the same navigation through\n          navigate(to, opts);\n        },\n        reset() {\n          let blockers = new Map(state.blockers);\n          blockers.set(blockerKey, IDLE_BLOCKER);\n          updateState({\n            blockers\n          });\n        }\n      });\n      return;\n    }\n    return await startNavigation(historyAction, nextLocation, {\n      submission,\n      // Send through the formData serialization error if we have one so we can\n      // render at the right error boundary after we match routes\n      pendingError: error,\n      preventScrollReset,\n      replace: opts && opts.replace,\n      enableViewTransition: opts && opts.unstable_viewTransition\n    });\n  }\n  // Revalidate all current loaders.  If a navigation is in progress or if this\n  // is interrupted by a navigation, allow this to \"succeed\" by calling all\n  // loaders during the next loader round\n  function revalidate() {\n    interruptActiveLoads();\n    updateState({\n      revalidation: \"loading\"\n    });\n    // If we're currently submitting an action, we don't need to start a new\n    // navigation, we'll just let the follow up loader execution call all loaders\n    if (state.navigation.state === \"submitting\") {\n      return;\n    }\n    // If we're currently in an idle state, start a new navigation for the current\n    // action/location and mark it as uninterrupted, which will skip the history\n    // update in completeNavigation\n    if (state.navigation.state === \"idle\") {\n      startNavigation(state.historyAction, state.location, {\n        startUninterruptedRevalidation: true\n      });\n      return;\n    }\n    // Otherwise, if we're currently in a loading state, just start a new\n    // navigation to the navigation.location but do not trigger an uninterrupted\n    // revalidation so that history correctly updates once the navigation completes\n    startNavigation(pendingAction || state.historyAction, state.navigation.location, {\n      overrideNavigation: state.navigation\n    });\n  }\n  // Start a navigation to the given action/location.  Can optionally provide a\n  // overrideNavigation which will override the normalLoad in the case of a redirect\n  // navigation\n  async function startNavigation(historyAction, location, opts) {\n    // Abort any in-progress navigations and start a new one. Unset any ongoing\n    // uninterrupted revalidations unless told otherwise, since we want this\n    // new navigation to update history normally\n    pendingNavigationController && pendingNavigationController.abort();\n    pendingNavigationController = null;\n    pendingAction = historyAction;\n    isUninterruptedRevalidation = (opts && opts.startUninterruptedRevalidation) === true;\n    // Save the current scroll position every time we start a new navigation,\n    // and track whether we should reset scroll on completion\n    saveScrollPosition(state.location, state.matches);\n    pendingPreventScrollReset = (opts && opts.preventScrollReset) === true;\n    pendingViewTransitionEnabled = (opts && opts.enableViewTransition) === true;\n    let routesToUse = inFlightDataRoutes || dataRoutes;\n    let loadingNavigation = opts && opts.overrideNavigation;\n    let matches = matchRoutes(routesToUse, location, basename);\n    // Short circuit with a 404 on the root error boundary if we match nothing\n    if (!matches) {\n      let error = getInternalRouterError(404, {\n        pathname: location.pathname\n      });\n      let {\n        matches: notFoundMatches,\n        route\n      } = getShortCircuitMatches(routesToUse);\n      // Cancel all pending deferred on 404s since we don't keep any routes\n      cancelActiveDeferreds();\n      completeNavigation(location, {\n        matches: notFoundMatches,\n        loaderData: {},\n        errors: {\n          [route.id]: error\n        }\n      });\n      return;\n    }\n    // Short circuit if it's only a hash change and not a revalidation or\n    // mutation submission.\n    //\n    // Ignore on initial page loads because since the initial load will always\n    // be \"same hash\".  For example, on /page#hash and submit a <Form method=\"post\">\n    // which will default to a navigation to /page\n    if (state.initialized && !isRevalidationRequired && isHashChangeOnly(state.location, location) && !(opts && opts.submission && isMutationMethod(opts.submission.formMethod))) {\n      completeNavigation(location, {\n        matches\n      });\n      return;\n    }\n    // Create a controller/Request for this navigation\n    pendingNavigationController = new AbortController();\n    let request = createClientSideRequest(init.history, location, pendingNavigationController.signal, opts && opts.submission);\n    let pendingActionData;\n    let pendingError;\n    if (opts && opts.pendingError) {\n      // If we have a pendingError, it means the user attempted a GET submission\n      // with binary FormData so assign here and skip to handleLoaders.  That\n      // way we handle calling loaders above the boundary etc.  It's not really\n      // different from an actionError in that sense.\n      pendingError = {\n        [findNearestBoundary(matches).route.id]: opts.pendingError\n      };\n    } else if (opts && opts.submission && isMutationMethod(opts.submission.formMethod)) {\n      // Call action if we received an action submission\n      let actionOutput = await handleAction(request, location, opts.submission, matches, {\n        replace: opts.replace\n      });\n      if (actionOutput.shortCircuited) {\n        return;\n      }\n      pendingActionData = actionOutput.pendingActionData;\n      pendingError = actionOutput.pendingActionError;\n      loadingNavigation = getLoadingNavigation(location, opts.submission);\n      // Create a GET request for the loaders\n      request = new Request(request.url, {\n        signal: request.signal\n      });\n    }\n    // Call loaders\n    let {\n      shortCircuited,\n      loaderData,\n      errors\n    } = await handleLoaders(request, location, matches, loadingNavigation, opts && opts.submission, opts && opts.fetcherSubmission, opts && opts.replace, pendingActionData, pendingError);\n    if (shortCircuited) {\n      return;\n    }\n    // Clean up now that the action/loaders have completed.  Don't clean up if\n    // we short circuited because pendingNavigationController will have already\n    // been assigned to a new controller for the next navigation\n    pendingNavigationController = null;\n    completeNavigation(location, _extends({\n      matches\n    }, pendingActionData ? {\n      actionData: pendingActionData\n    } : {}, {\n      loaderData,\n      errors\n    }));\n  }\n  // Call the action matched by the leaf route for this navigation and handle\n  // redirects/errors\n  async function handleAction(request, location, submission, matches, opts) {\n    if (opts === void 0) {\n      opts = {};\n    }\n    interruptActiveLoads();\n    // Put us in a submitting state\n    let navigation = getSubmittingNavigation(location, submission);\n    updateState({\n      navigation\n    });\n    // Call our action and get the result\n    let result;\n    let actionMatch = getTargetMatch(matches, location);\n    if (!actionMatch.route.action && !actionMatch.route.lazy) {\n      result = {\n        type: ResultType.error,\n        error: getInternalRouterError(405, {\n          method: request.method,\n          pathname: location.pathname,\n          routeId: actionMatch.route.id\n        })\n      };\n    } else {\n      result = await callLoaderOrAction(\"action\", request, actionMatch, matches, manifest, mapRouteProperties, basename);\n      if (request.signal.aborted) {\n        return {\n          shortCircuited: true\n        };\n      }\n    }\n    if (isRedirectResult(result)) {\n      let replace;\n      if (opts && opts.replace != null) {\n        replace = opts.replace;\n      } else {\n        // If the user didn't explicity indicate replace behavior, replace if\n        // we redirected to the exact same location we're currently at to avoid\n        // double back-buttons\n        replace = result.location === state.location.pathname + state.location.search;\n      }\n      await startRedirectNavigation(state, result, {\n        submission,\n        replace\n      });\n      return {\n        shortCircuited: true\n      };\n    }\n    if (isErrorResult(result)) {\n      // Store off the pending error - we use it to determine which loaders\n      // to call and will commit it when we complete the navigation\n      let boundaryMatch = findNearestBoundary(matches, actionMatch.route.id);\n      // By default, all submissions are REPLACE navigations, but if the\n      // action threw an error that'll be rendered in an errorElement, we fall\n      // back to PUSH so that the user can use the back button to get back to\n      // the pre-submission form location to try again\n      if ((opts && opts.replace) !== true) {\n        pendingAction = Action.Push;\n      }\n      return {\n        // Send back an empty object we can use to clear out any prior actionData\n        pendingActionData: {},\n        pendingActionError: {\n          [boundaryMatch.route.id]: result.error\n        }\n      };\n    }\n    if (isDeferredResult(result)) {\n      throw getInternalRouterError(400, {\n        type: \"defer-action\"\n      });\n    }\n    return {\n      pendingActionData: {\n        [actionMatch.route.id]: result.data\n      }\n    };\n  }\n  // Call all applicable loaders for the given matches, handling redirects,\n  // errors, etc.\n  async function handleLoaders(request, location, matches, overrideNavigation, submission, fetcherSubmission, replace, pendingActionData, pendingError) {\n    // Figure out the right navigation we want to use for data loading\n    let loadingNavigation = overrideNavigation || getLoadingNavigation(location, submission);\n    // If this was a redirect from an action we don't have a \"submission\" but\n    // we have it on the loading navigation so use that if available\n    let activeSubmission = submission || fetcherSubmission || getSubmissionFromNavigation(loadingNavigation);\n    let routesToUse = inFlightDataRoutes || dataRoutes;\n    let [matchesToLoad, revalidatingFetchers] = getMatchesToLoad(init.history, state, matches, activeSubmission, location, isRevalidationRequired, cancelledDeferredRoutes, cancelledFetcherLoads, fetchLoadMatches, fetchRedirectIds, routesToUse, basename, pendingActionData, pendingError);\n    // Cancel pending deferreds for no-longer-matched routes or routes we're\n    // about to reload.  Note that if this is an action reload we would have\n    // already cancelled all pending deferreds so this would be a no-op\n    cancelActiveDeferreds(routeId => !(matches && matches.some(m => m.route.id === routeId)) || matchesToLoad && matchesToLoad.some(m => m.route.id === routeId));\n    pendingNavigationLoadId = ++incrementingLoadId;\n    // Short circuit if we have no loaders to run\n    if (matchesToLoad.length === 0 && revalidatingFetchers.length === 0) {\n      let updatedFetchers = markFetchRedirectsDone();\n      completeNavigation(location, _extends({\n        matches,\n        loaderData: {},\n        // Commit pending error if we're short circuiting\n        errors: pendingError || null\n      }, pendingActionData ? {\n        actionData: pendingActionData\n      } : {}, updatedFetchers ? {\n        fetchers: new Map(state.fetchers)\n      } : {}));\n      return {\n        shortCircuited: true\n      };\n    }\n    // If this is an uninterrupted revalidation, we remain in our current idle\n    // state.  If not, we need to switch to our loading state and load data,\n    // preserving any new action data or existing action data (in the case of\n    // a revalidation interrupting an actionReload)\n    if (!isUninterruptedRevalidation) {\n      revalidatingFetchers.forEach(rf => {\n        let fetcher = state.fetchers.get(rf.key);\n        let revalidatingFetcher = getLoadingFetcher(undefined, fetcher ? fetcher.data : undefined);\n        state.fetchers.set(rf.key, revalidatingFetcher);\n      });\n      let actionData = pendingActionData || state.actionData;\n      updateState(_extends({\n        navigation: loadingNavigation\n      }, actionData ? Object.keys(actionData).length === 0 ? {\n        actionData: null\n      } : {\n        actionData\n      } : {}, revalidatingFetchers.length > 0 ? {\n        fetchers: new Map(state.fetchers)\n      } : {}));\n    }\n    revalidatingFetchers.forEach(rf => {\n      if (fetchControllers.has(rf.key)) {\n        abortFetcher(rf.key);\n      }\n      if (rf.controller) {\n        // Fetchers use an independent AbortController so that aborting a fetcher\n        // (via deleteFetcher) does not abort the triggering navigation that\n        // triggered the revalidation\n        fetchControllers.set(rf.key, rf.controller);\n      }\n    });\n    // Proxy navigation abort through to revalidation fetchers\n    let abortPendingFetchRevalidations = () => revalidatingFetchers.forEach(f => abortFetcher(f.key));\n    if (pendingNavigationController) {\n      pendingNavigationController.signal.addEventListener(\"abort\", abortPendingFetchRevalidations);\n    }\n    let {\n      results,\n      loaderResults,\n      fetcherResults\n    } = await callLoadersAndMaybeResolveData(state.matches, matches, matchesToLoad, revalidatingFetchers, request);\n    if (request.signal.aborted) {\n      return {\n        shortCircuited: true\n      };\n    }\n    // Clean up _after_ loaders have completed.  Don't clean up if we short\n    // circuited because fetchControllers would have been aborted and\n    // reassigned to new controllers for the next navigation\n    if (pendingNavigationController) {\n      pendingNavigationController.signal.removeEventListener(\"abort\", abortPendingFetchRevalidations);\n    }\n    revalidatingFetchers.forEach(rf => fetchControllers.delete(rf.key));\n    // If any loaders returned a redirect Response, start a new REPLACE navigation\n    let redirect = findRedirect(results);\n    if (redirect) {\n      if (redirect.idx >= matchesToLoad.length) {\n        // If this redirect came from a fetcher make sure we mark it in\n        // fetchRedirectIds so it doesn't get revalidated on the next set of\n        // loader executions\n        let fetcherKey = revalidatingFetchers[redirect.idx - matchesToLoad.length].key;\n        fetchRedirectIds.add(fetcherKey);\n      }\n      await startRedirectNavigation(state, redirect.result, {\n        replace\n      });\n      return {\n        shortCircuited: true\n      };\n    }\n    // Process and commit output from loaders\n    let {\n      loaderData,\n      errors\n    } = processLoaderData(state, matches, matchesToLoad, loaderResults, pendingError, revalidatingFetchers, fetcherResults, activeDeferreds);\n    // Wire up subscribers to update loaderData as promises settle\n    activeDeferreds.forEach((deferredData, routeId) => {\n      deferredData.subscribe(aborted => {\n        // Note: No need to updateState here since the TrackedPromise on\n        // loaderData is stable across resolve/reject\n        // Remove this instance if we were aborted or if promises have settled\n        if (aborted || deferredData.done) {\n          activeDeferreds.delete(routeId);\n        }\n      });\n    });\n    let updatedFetchers = markFetchRedirectsDone();\n    let didAbortFetchLoads = abortStaleFetchLoads(pendingNavigationLoadId);\n    let shouldUpdateFetchers = updatedFetchers || didAbortFetchLoads || revalidatingFetchers.length > 0;\n    return _extends({\n      loaderData,\n      errors\n    }, shouldUpdateFetchers ? {\n      fetchers: new Map(state.fetchers)\n    } : {});\n  }\n  function getFetcher(key) {\n    if (future.v7_fetcherPersist) {\n      activeFetchers.set(key, (activeFetchers.get(key) || 0) + 1);\n      // If this fetcher was previously marked for deletion, unmark it since we\n      // have a new instance\n      if (deletedFetchers.has(key)) {\n        deletedFetchers.delete(key);\n      }\n    }\n    return state.fetchers.get(key) || IDLE_FETCHER;\n  }\n  // Trigger a fetcher load/submit for the given fetcher key\n  function fetch(key, routeId, href, opts) {\n    if (isServer) {\n      throw new Error(\"router.fetch() was called during the server render, but it shouldn't be. \" + \"You are likely calling a useFetcher() method in the body of your component. \" + \"Try moving it to a useEffect or a callback.\");\n    }\n    if (fetchControllers.has(key)) abortFetcher(key);\n    let routesToUse = inFlightDataRoutes || dataRoutes;\n    let normalizedPath = normalizeTo(state.location, state.matches, basename, future.v7_prependBasename, href, routeId, opts == null ? void 0 : opts.relative);\n    let matches = matchRoutes(routesToUse, normalizedPath, basename);\n    if (!matches) {\n      setFetcherError(key, routeId, getInternalRouterError(404, {\n        pathname: normalizedPath\n      }));\n      return;\n    }\n    let {\n      path,\n      submission,\n      error\n    } = normalizeNavigateOptions(future.v7_normalizeFormMethod, true, normalizedPath, opts);\n    if (error) {\n      setFetcherError(key, routeId, error);\n      return;\n    }\n    let match = getTargetMatch(matches, path);\n    pendingPreventScrollReset = (opts && opts.preventScrollReset) === true;\n    if (submission && isMutationMethod(submission.formMethod)) {\n      handleFetcherAction(key, routeId, path, match, matches, submission);\n      return;\n    }\n    // Store off the match so we can call it's shouldRevalidate on subsequent\n    // revalidations\n    fetchLoadMatches.set(key, {\n      routeId,\n      path\n    });\n    handleFetcherLoader(key, routeId, path, match, matches, submission);\n  }\n  // Call the action for the matched fetcher.submit(), and then handle redirects,\n  // errors, and revalidation\n  async function handleFetcherAction(key, routeId, path, match, requestMatches, submission) {\n    interruptActiveLoads();\n    fetchLoadMatches.delete(key);\n    if (!match.route.action && !match.route.lazy) {\n      let error = getInternalRouterError(405, {\n        method: submission.formMethod,\n        pathname: path,\n        routeId: routeId\n      });\n      setFetcherError(key, routeId, error);\n      return;\n    }\n    // Put this fetcher into it's submitting state\n    let existingFetcher = state.fetchers.get(key);\n    let fetcher = getSubmittingFetcher(submission, existingFetcher);\n    state.fetchers.set(key, fetcher);\n    updateState({\n      fetchers: new Map(state.fetchers)\n    });\n    // Call the action for the fetcher\n    let abortController = new AbortController();\n    let fetchRequest = createClientSideRequest(init.history, path, abortController.signal, submission);\n    fetchControllers.set(key, abortController);\n    let originatingLoadId = incrementingLoadId;\n    let actionResult = await callLoaderOrAction(\"action\", fetchRequest, match, requestMatches, manifest, mapRouteProperties, basename);\n    if (fetchRequest.signal.aborted) {\n      // We can delete this so long as we weren't aborted by our own fetcher\n      // re-submit which would have put _new_ controller is in fetchControllers\n      if (fetchControllers.get(key) === abortController) {\n        fetchControllers.delete(key);\n      }\n      return;\n    }\n    if (deletedFetchers.has(key)) {\n      state.fetchers.set(key, getDoneFetcher(undefined));\n      updateState({\n        fetchers: new Map(state.fetchers)\n      });\n      return;\n    }\n    if (isRedirectResult(actionResult)) {\n      fetchControllers.delete(key);\n      if (pendingNavigationLoadId > originatingLoadId) {\n        // A new navigation was kicked off after our action started, so that\n        // should take precedence over this redirect navigation.  We already\n        // set isRevalidationRequired so all loaders for the new route should\n        // fire unless opted out via shouldRevalidate\n        let doneFetcher = getDoneFetcher(undefined);\n        state.fetchers.set(key, doneFetcher);\n        updateState({\n          fetchers: new Map(state.fetchers)\n        });\n        return;\n      } else {\n        fetchRedirectIds.add(key);\n        let loadingFetcher = getLoadingFetcher(submission);\n        state.fetchers.set(key, loadingFetcher);\n        updateState({\n          fetchers: new Map(state.fetchers)\n        });\n        return startRedirectNavigation(state, actionResult, {\n          fetcherSubmission: submission\n        });\n      }\n    }\n    // Process any non-redirect errors thrown\n    if (isErrorResult(actionResult)) {\n      setFetcherError(key, routeId, actionResult.error);\n      return;\n    }\n    if (isDeferredResult(actionResult)) {\n      throw getInternalRouterError(400, {\n        type: \"defer-action\"\n      });\n    }\n    // Start the data load for current matches, or the next location if we're\n    // in the middle of a navigation\n    let nextLocation = state.navigation.location || state.location;\n    let revalidationRequest = createClientSideRequest(init.history, nextLocation, abortController.signal);\n    let routesToUse = inFlightDataRoutes || dataRoutes;\n    let matches = state.navigation.state !== \"idle\" ? matchRoutes(routesToUse, state.navigation.location, basename) : state.matches;\n    invariant(matches, \"Didn't find any matches after fetcher action\");\n    let loadId = ++incrementingLoadId;\n    fetchReloadIds.set(key, loadId);\n    let loadFetcher = getLoadingFetcher(submission, actionResult.data);\n    state.fetchers.set(key, loadFetcher);\n    let [matchesToLoad, revalidatingFetchers] = getMatchesToLoad(init.history, state, matches, submission, nextLocation, isRevalidationRequired, cancelledDeferredRoutes, cancelledFetcherLoads, fetchLoadMatches, fetchRedirectIds, routesToUse, basename, {\n      [match.route.id]: actionResult.data\n    }, undefined // No need to send through errors since we short circuit above\n    );\n    // Put all revalidating fetchers into the loading state, except for the\n    // current fetcher which we want to keep in it's current loading state which\n    // contains it's action submission info + action data\n    revalidatingFetchers.filter(rf => rf.key !== key).forEach(rf => {\n      let staleKey = rf.key;\n      let existingFetcher = state.fetchers.get(staleKey);\n      let revalidatingFetcher = getLoadingFetcher(undefined, existingFetcher ? existingFetcher.data : undefined);\n      state.fetchers.set(staleKey, revalidatingFetcher);\n      if (fetchControllers.has(staleKey)) {\n        abortFetcher(staleKey);\n      }\n      if (rf.controller) {\n        fetchControllers.set(staleKey, rf.controller);\n      }\n    });\n    updateState({\n      fetchers: new Map(state.fetchers)\n    });\n    let abortPendingFetchRevalidations = () => revalidatingFetchers.forEach(rf => abortFetcher(rf.key));\n    abortController.signal.addEventListener(\"abort\", abortPendingFetchRevalidations);\n    let {\n      results,\n      loaderResults,\n      fetcherResults\n    } = await callLoadersAndMaybeResolveData(state.matches, matches, matchesToLoad, revalidatingFetchers, revalidationRequest);\n    if (abortController.signal.aborted) {\n      return;\n    }\n    abortController.signal.removeEventListener(\"abort\", abortPendingFetchRevalidations);\n    fetchReloadIds.delete(key);\n    fetchControllers.delete(key);\n    revalidatingFetchers.forEach(r => fetchControllers.delete(r.key));\n    let redirect = findRedirect(results);\n    if (redirect) {\n      if (redirect.idx >= matchesToLoad.length) {\n        // If this redirect came from a fetcher make sure we mark it in\n        // fetchRedirectIds so it doesn't get revalidated on the next set of\n        // loader executions\n        let fetcherKey = revalidatingFetchers[redirect.idx - matchesToLoad.length].key;\n        fetchRedirectIds.add(fetcherKey);\n      }\n      return startRedirectNavigation(state, redirect.result);\n    }\n    // Process and commit output from loaders\n    let {\n      loaderData,\n      errors\n    } = processLoaderData(state, state.matches, matchesToLoad, loaderResults, undefined, revalidatingFetchers, fetcherResults, activeDeferreds);\n    // Since we let revalidations complete even if the submitting fetcher was\n    // deleted, only put it back to idle if it hasn't been deleted\n    if (state.fetchers.has(key)) {\n      let doneFetcher = getDoneFetcher(actionResult.data);\n      state.fetchers.set(key, doneFetcher);\n    }\n    abortStaleFetchLoads(loadId);\n    // If we are currently in a navigation loading state and this fetcher is\n    // more recent than the navigation, we want the newer data so abort the\n    // navigation and complete it with the fetcher data\n    if (state.navigation.state === \"loading\" && loadId > pendingNavigationLoadId) {\n      invariant(pendingAction, \"Expected pending action\");\n      pendingNavigationController && pendingNavigationController.abort();\n      completeNavigation(state.navigation.location, {\n        matches,\n        loaderData,\n        errors,\n        fetchers: new Map(state.fetchers)\n      });\n    } else {\n      // otherwise just update with the fetcher data, preserving any existing\n      // loaderData for loaders that did not need to reload.  We have to\n      // manually merge here since we aren't going through completeNavigation\n      updateState({\n        errors,\n        loaderData: mergeLoaderData(state.loaderData, loaderData, matches, errors),\n        fetchers: new Map(state.fetchers)\n      });\n      isRevalidationRequired = false;\n    }\n  }\n  // Call the matched loader for fetcher.load(), handling redirects, errors, etc.\n  async function handleFetcherLoader(key, routeId, path, match, matches, submission) {\n    let existingFetcher = state.fetchers.get(key);\n    // Put this fetcher into it's loading state\n    let loadingFetcher = getLoadingFetcher(submission, existingFetcher ? existingFetcher.data : undefined);\n    state.fetchers.set(key, loadingFetcher);\n    updateState({\n      fetchers: new Map(state.fetchers)\n    });\n    // Call the loader for this fetcher route match\n    let abortController = new AbortController();\n    let fetchRequest = createClientSideRequest(init.history, path, abortController.signal);\n    fetchControllers.set(key, abortController);\n    let originatingLoadId = incrementingLoadId;\n    let result = await callLoaderOrAction(\"loader\", fetchRequest, match, matches, manifest, mapRouteProperties, basename);\n    // Deferred isn't supported for fetcher loads, await everything and treat it\n    // as a normal load.  resolveDeferredData will return undefined if this\n    // fetcher gets aborted, so we just leave result untouched and short circuit\n    // below if that happens\n    if (isDeferredResult(result)) {\n      result = (await resolveDeferredData(result, fetchRequest.signal, true)) || result;\n    }\n    // We can delete this so long as we weren't aborted by our our own fetcher\n    // re-load which would have put _new_ controller is in fetchControllers\n    if (fetchControllers.get(key) === abortController) {\n      fetchControllers.delete(key);\n    }\n    if (fetchRequest.signal.aborted) {\n      return;\n    }\n    if (deletedFetchers.has(key)) {\n      state.fetchers.set(key, getDoneFetcher(undefined));\n      updateState({\n        fetchers: new Map(state.fetchers)\n      });\n      return;\n    }\n    // If the loader threw a redirect Response, start a new REPLACE navigation\n    if (isRedirectResult(result)) {\n      if (pendingNavigationLoadId > originatingLoadId) {\n        // A new navigation was kicked off after our loader started, so that\n        // should take precedence over this redirect navigation\n        let doneFetcher = getDoneFetcher(undefined);\n        state.fetchers.set(key, doneFetcher);\n        updateState({\n          fetchers: new Map(state.fetchers)\n        });\n        return;\n      } else {\n        fetchRedirectIds.add(key);\n        await startRedirectNavigation(state, result);\n        return;\n      }\n    }\n    // Process any non-redirect errors thrown\n    if (isErrorResult(result)) {\n      setFetcherError(key, routeId, result.error);\n      return;\n    }\n    invariant(!isDeferredResult(result), \"Unhandled fetcher deferred data\");\n    // Put the fetcher back into an idle state\n    let doneFetcher = getDoneFetcher(result.data);\n    state.fetchers.set(key, doneFetcher);\n    updateState({\n      fetchers: new Map(state.fetchers)\n    });\n  }\n  /**\n   * Utility function to handle redirects returned from an action or loader.\n   * Normally, a redirect \"replaces\" the navigation that triggered it.  So, for\n   * example:\n   *\n   *  - user is on /a\n   *  - user clicks a link to /b\n   *  - loader for /b redirects to /c\n   *\n   * In a non-JS app the browser would track the in-flight navigation to /b and\n   * then replace it with /c when it encountered the redirect response.  In\n   * the end it would only ever update the URL bar with /c.\n   *\n   * In client-side routing using pushState/replaceState, we aim to emulate\n   * this behavior and we also do not update history until the end of the\n   * navigation (including processed redirects).  This means that we never\n   * actually touch history until we've processed redirects, so we just use\n   * the history action from the original navigation (PUSH or REPLACE).\n   */\n  async function startRedirectNavigation(state, redirect, _temp) {\n    let {\n      submission,\n      fetcherSubmission,\n      replace\n    } = _temp === void 0 ? {} : _temp;\n    if (redirect.revalidate) {\n      isRevalidationRequired = true;\n    }\n    let redirectLocation = createLocation(state.location, redirect.location, {\n      _isRedirect: true\n    });\n    invariant(redirectLocation, \"Expected a location on the redirect navigation\");\n    if (isBrowser) {\n      let isDocumentReload = false;\n      if (redirect.reloadDocument) {\n        // Hard reload if the response contained X-Remix-Reload-Document\n        isDocumentReload = true;\n      } else if (ABSOLUTE_URL_REGEX.test(redirect.location)) {\n        const url = init.history.createURL(redirect.location);\n        isDocumentReload =\n        // Hard reload if it's an absolute URL to a new origin\n        url.origin !== routerWindow.location.origin ||\n        // Hard reload if it's an absolute URL that does not match our basename\n        stripBasename(url.pathname, basename) == null;\n      }\n      if (isDocumentReload) {\n        if (replace) {\n          routerWindow.location.replace(redirect.location);\n        } else {\n          routerWindow.location.assign(redirect.location);\n        }\n        return;\n      }\n    }\n    // There's no need to abort on redirects, since we don't detect the\n    // redirect until the action/loaders have settled\n    pendingNavigationController = null;\n    let redirectHistoryAction = replace === true ? Action.Replace : Action.Push;\n    // Use the incoming submission if provided, fallback on the active one in\n    // state.navigation\n    let {\n      formMethod,\n      formAction,\n      formEncType\n    } = state.navigation;\n    if (!submission && !fetcherSubmission && formMethod && formAction && formEncType) {\n      submission = getSubmissionFromNavigation(state.navigation);\n    }\n    // If this was a 307/308 submission we want to preserve the HTTP method and\n    // re-submit the GET/POST/PUT/PATCH/DELETE as a submission navigation to the\n    // redirected location\n    let activeSubmission = submission || fetcherSubmission;\n    if (redirectPreserveMethodStatusCodes.has(redirect.status) && activeSubmission && isMutationMethod(activeSubmission.formMethod)) {\n      await startNavigation(redirectHistoryAction, redirectLocation, {\n        submission: _extends({}, activeSubmission, {\n          formAction: redirect.location\n        }),\n        // Preserve this flag across redirects\n        preventScrollReset: pendingPreventScrollReset\n      });\n    } else {\n      // If we have a navigation submission, we will preserve it through the\n      // redirect navigation\n      let overrideNavigation = getLoadingNavigation(redirectLocation, submission);\n      await startNavigation(redirectHistoryAction, redirectLocation, {\n        overrideNavigation,\n        // Send fetcher submissions through for shouldRevalidate\n        fetcherSubmission,\n        // Preserve this flag across redirects\n        preventScrollReset: pendingPreventScrollReset\n      });\n    }\n  }\n  async function callLoadersAndMaybeResolveData(currentMatches, matches, matchesToLoad, fetchersToLoad, request) {\n    // Call all navigation loaders and revalidating fetcher loaders in parallel,\n    // then slice off the results into separate arrays so we can handle them\n    // accordingly\n    let results = await Promise.all([...matchesToLoad.map(match => callLoaderOrAction(\"loader\", request, match, matches, manifest, mapRouteProperties, basename)), ...fetchersToLoad.map(f => {\n      if (f.matches && f.match && f.controller) {\n        return callLoaderOrAction(\"loader\", createClientSideRequest(init.history, f.path, f.controller.signal), f.match, f.matches, manifest, mapRouteProperties, basename);\n      } else {\n        let error = {\n          type: ResultType.error,\n          error: getInternalRouterError(404, {\n            pathname: f.path\n          })\n        };\n        return error;\n      }\n    })]);\n    let loaderResults = results.slice(0, matchesToLoad.length);\n    let fetcherResults = results.slice(matchesToLoad.length);\n    await Promise.all([resolveDeferredResults(currentMatches, matchesToLoad, loaderResults, loaderResults.map(() => request.signal), false, state.loaderData), resolveDeferredResults(currentMatches, fetchersToLoad.map(f => f.match), fetcherResults, fetchersToLoad.map(f => f.controller ? f.controller.signal : null), true)]);\n    return {\n      results,\n      loaderResults,\n      fetcherResults\n    };\n  }\n  function interruptActiveLoads() {\n    // Every interruption triggers a revalidation\n    isRevalidationRequired = true;\n    // Cancel pending route-level deferreds and mark cancelled routes for\n    // revalidation\n    cancelledDeferredRoutes.push(...cancelActiveDeferreds());\n    // Abort in-flight fetcher loads\n    fetchLoadMatches.forEach((_, key) => {\n      if (fetchControllers.has(key)) {\n        cancelledFetcherLoads.push(key);\n        abortFetcher(key);\n      }\n    });\n  }\n  function setFetcherError(key, routeId, error) {\n    let boundaryMatch = findNearestBoundary(state.matches, routeId);\n    deleteFetcher(key);\n    updateState({\n      errors: {\n        [boundaryMatch.route.id]: error\n      },\n      fetchers: new Map(state.fetchers)\n    });\n  }\n  function deleteFetcher(key) {\n    let fetcher = state.fetchers.get(key);\n    // Don't abort the controller if this is a deletion of a fetcher.submit()\n    // in it's loading phase since - we don't want to abort the corresponding\n    // revalidation and want them to complete and land\n    if (fetchControllers.has(key) && !(fetcher && fetcher.state === \"loading\" && fetchReloadIds.has(key))) {\n      abortFetcher(key);\n    }\n    fetchLoadMatches.delete(key);\n    fetchReloadIds.delete(key);\n    fetchRedirectIds.delete(key);\n    deletedFetchers.delete(key);\n    state.fetchers.delete(key);\n  }\n  function deleteFetcherAndUpdateState(key) {\n    if (future.v7_fetcherPersist) {\n      let count = (activeFetchers.get(key) || 0) - 1;\n      if (count <= 0) {\n        activeFetchers.delete(key);\n        deletedFetchers.add(key);\n      } else {\n        activeFetchers.set(key, count);\n      }\n    } else {\n      deleteFetcher(key);\n    }\n    updateState({\n      fetchers: new Map(state.fetchers)\n    });\n  }\n  function abortFetcher(key) {\n    let controller = fetchControllers.get(key);\n    invariant(controller, \"Expected fetch controller: \" + key);\n    controller.abort();\n    fetchControllers.delete(key);\n  }\n  function markFetchersDone(keys) {\n    for (let key of keys) {\n      let fetcher = getFetcher(key);\n      let doneFetcher = getDoneFetcher(fetcher.data);\n      state.fetchers.set(key, doneFetcher);\n    }\n  }\n  function markFetchRedirectsDone() {\n    let doneKeys = [];\n    let updatedFetchers = false;\n    for (let key of fetchRedirectIds) {\n      let fetcher = state.fetchers.get(key);\n      invariant(fetcher, \"Expected fetcher: \" + key);\n      if (fetcher.state === \"loading\") {\n        fetchRedirectIds.delete(key);\n        doneKeys.push(key);\n        updatedFetchers = true;\n      }\n    }\n    markFetchersDone(doneKeys);\n    return updatedFetchers;\n  }\n  function abortStaleFetchLoads(landedId) {\n    let yeetedKeys = [];\n    for (let [key, id] of fetchReloadIds) {\n      if (id < landedId) {\n        let fetcher = state.fetchers.get(key);\n        invariant(fetcher, \"Expected fetcher: \" + key);\n        if (fetcher.state === \"loading\") {\n          abortFetcher(key);\n          fetchReloadIds.delete(key);\n          yeetedKeys.push(key);\n        }\n      }\n    }\n    markFetchersDone(yeetedKeys);\n    return yeetedKeys.length > 0;\n  }\n  function getBlocker(key, fn) {\n    let blocker = state.blockers.get(key) || IDLE_BLOCKER;\n    if (blockerFunctions.get(key) !== fn) {\n      blockerFunctions.set(key, fn);\n    }\n    return blocker;\n  }\n  function deleteBlocker(key) {\n    state.blockers.delete(key);\n    blockerFunctions.delete(key);\n  }\n  // Utility function to update blockers, ensuring valid state transitions\n  function updateBlocker(key, newBlocker) {\n    let blocker = state.blockers.get(key) || IDLE_BLOCKER;\n    // Poor mans state machine :)\n    // https://mermaid.live/edit#pako:eNqVkc9OwzAMxl8l8nnjAYrEtDIOHEBIgwvKJTReGy3_lDpIqO27k6awMG0XcrLlnz87nwdonESogKXXBuE79rq75XZO3-yHds0RJVuv70YrPlUrCEe2HfrORS3rubqZfuhtpg5C9wk5tZ4VKcRUq88q9Z8RS0-48cE1iHJkL0ugbHuFLus9L6spZy8nX9MP2CNdomVaposqu3fGayT8T8-jJQwhepo_UtpgBQaDEUom04dZhAN1aJBDlUKJBxE1ceB2Smj0Mln-IBW5AFU2dwUiktt_2Qaq2dBfaKdEup85UV7Yd-dKjlnkabl2Pvr0DTkTreM\n    invariant(blocker.state === \"unblocked\" && newBlocker.state === \"blocked\" || blocker.state === \"blocked\" && newBlocker.state === \"blocked\" || blocker.state === \"blocked\" && newBlocker.state === \"proceeding\" || blocker.state === \"blocked\" && newBlocker.state === \"unblocked\" || blocker.state === \"proceeding\" && newBlocker.state === \"unblocked\", \"Invalid blocker state transition: \" + blocker.state + \" -> \" + newBlocker.state);\n    let blockers = new Map(state.blockers);\n    blockers.set(key, newBlocker);\n    updateState({\n      blockers\n    });\n  }\n  function shouldBlockNavigation(_ref2) {\n    let {\n      currentLocation,\n      nextLocation,\n      historyAction\n    } = _ref2;\n    if (blockerFunctions.size === 0) {\n      return;\n    }\n    // We ony support a single active blocker at the moment since we don't have\n    // any compelling use cases for multi-blocker yet\n    if (blockerFunctions.size > 1) {\n      warning(false, \"A router only supports one blocker at a time\");\n    }\n    let entries = Array.from(blockerFunctions.entries());\n    let [blockerKey, blockerFunction] = entries[entries.length - 1];\n    let blocker = state.blockers.get(blockerKey);\n    if (blocker && blocker.state === \"proceeding\") {\n      // If the blocker is currently proceeding, we don't need to re-check\n      // it and can let this navigation continue\n      return;\n    }\n    // At this point, we know we're unblocked/blocked so we need to check the\n    // user-provided blocker function\n    if (blockerFunction({\n      currentLocation,\n      nextLocation,\n      historyAction\n    })) {\n      return blockerKey;\n    }\n  }\n  function cancelActiveDeferreds(predicate) {\n    let cancelledRouteIds = [];\n    activeDeferreds.forEach((dfd, routeId) => {\n      if (!predicate || predicate(routeId)) {\n        // Cancel the deferred - but do not remove from activeDeferreds here -\n        // we rely on the subscribers to do that so our tests can assert proper\n        // cleanup via _internalActiveDeferreds\n        dfd.cancel();\n        cancelledRouteIds.push(routeId);\n        activeDeferreds.delete(routeId);\n      }\n    });\n    return cancelledRouteIds;\n  }\n  // Opt in to capturing and reporting scroll positions during navigations,\n  // used by the <ScrollRestoration> component\n  function enableScrollRestoration(positions, getPosition, getKey) {\n    savedScrollPositions = positions;\n    getScrollPosition = getPosition;\n    getScrollRestorationKey = getKey || null;\n    // Perform initial hydration scroll restoration, since we miss the boat on\n    // the initial updateState() because we've not yet rendered <ScrollRestoration/>\n    // and therefore have no savedScrollPositions available\n    if (!initialScrollRestored && state.navigation === IDLE_NAVIGATION) {\n      initialScrollRestored = true;\n      let y = getSavedScrollPosition(state.location, state.matches);\n      if (y != null) {\n        updateState({\n          restoreScrollPosition: y\n        });\n      }\n    }\n    return () => {\n      savedScrollPositions = null;\n      getScrollPosition = null;\n      getScrollRestorationKey = null;\n    };\n  }\n  function getScrollKey(location, matches) {\n    if (getScrollRestorationKey) {\n      let key = getScrollRestorationKey(location, matches.map(m => convertRouteMatchToUiMatch(m, state.loaderData)));\n      return key || location.key;\n    }\n    return location.key;\n  }\n  function saveScrollPosition(location, matches) {\n    if (savedScrollPositions && getScrollPosition) {\n      let key = getScrollKey(location, matches);\n      savedScrollPositions[key] = getScrollPosition();\n    }\n  }\n  function getSavedScrollPosition(location, matches) {\n    if (savedScrollPositions) {\n      let key = getScrollKey(location, matches);\n      let y = savedScrollPositions[key];\n      if (typeof y === \"number\") {\n        return y;\n      }\n    }\n    return null;\n  }\n  function _internalSetRoutes(newRoutes) {\n    manifest = {};\n    inFlightDataRoutes = convertRoutesToDataRoutes(newRoutes, mapRouteProperties, undefined, manifest);\n  }\n  router = {\n    get basename() {\n      return basename;\n    },\n    get state() {\n      return state;\n    },\n    get routes() {\n      return dataRoutes;\n    },\n    get window() {\n      return routerWindow;\n    },\n    initialize,\n    subscribe,\n    enableScrollRestoration,\n    navigate,\n    fetch,\n    revalidate,\n    // Passthrough to history-aware createHref used by useHref so we get proper\n    // hash-aware URLs in DOM paths\n    createHref: to => init.history.createHref(to),\n    encodeLocation: to => init.history.encodeLocation(to),\n    getFetcher,\n    deleteFetcher: deleteFetcherAndUpdateState,\n    dispose,\n    getBlocker,\n    deleteBlocker,\n    _internalFetchControllers: fetchControllers,\n    _internalActiveDeferreds: activeDeferreds,\n    // TODO: Remove setRoutes, it's temporary to avoid dealing with\n    // updating the tree while validating the update algorithm.\n    _internalSetRoutes\n  };\n  return router;\n}\n//#endregion\n////////////////////////////////////////////////////////////////////////////////\n//#region createStaticHandler\n////////////////////////////////////////////////////////////////////////////////\nconst UNSAFE_DEFERRED_SYMBOL = Symbol(\"deferred\");\nfunction createStaticHandler(routes, opts) {\n  invariant(routes.length > 0, \"You must provide a non-empty routes array to createStaticHandler\");\n  let manifest = {};\n  let basename = (opts ? opts.basename : null) || \"/\";\n  let mapRouteProperties;\n  if (opts != null && opts.mapRouteProperties) {\n    mapRouteProperties = opts.mapRouteProperties;\n  } else if (opts != null && opts.detectErrorBoundary) {\n    // If they are still using the deprecated version, wrap it with the new API\n    let detectErrorBoundary = opts.detectErrorBoundary;\n    mapRouteProperties = route => ({\n      hasErrorBoundary: detectErrorBoundary(route)\n    });\n  } else {\n    mapRouteProperties = defaultMapRouteProperties;\n  }\n  let dataRoutes = convertRoutesToDataRoutes(routes, mapRouteProperties, undefined, manifest);\n  /**\n   * The query() method is intended for document requests, in which we want to\n   * call an optional action and potentially multiple loaders for all nested\n   * routes.  It returns a StaticHandlerContext object, which is very similar\n   * to the router state (location, loaderData, actionData, errors, etc.) and\n   * also adds SSR-specific information such as the statusCode and headers\n   * from action/loaders Responses.\n   *\n   * It _should_ never throw and should report all errors through the\n   * returned context.errors object, properly associating errors to their error\n   * boundary.  Additionally, it tracks _deepestRenderedBoundaryId which can be\n   * used to emulate React error boundaries during SSr by performing a second\n   * pass only down to the boundaryId.\n   *\n   * The one exception where we do not return a StaticHandlerContext is when a\n   * redirect response is returned or thrown from any action/loader.  We\n   * propagate that out and return the raw Response so the HTTP server can\n   * return it directly.\n   */\n  async function query(request, _temp2) {\n    let {\n      requestContext\n    } = _temp2 === void 0 ? {} : _temp2;\n    let url = new URL(request.url);\n    let method = request.method;\n    let location = createLocation(\"\", createPath(url), null, \"default\");\n    let matches = matchRoutes(dataRoutes, location, basename);\n    // SSR supports HEAD requests while SPA doesn't\n    if (!isValidMethod(method) && method !== \"HEAD\") {\n      let error = getInternalRouterError(405, {\n        method\n      });\n      let {\n        matches: methodNotAllowedMatches,\n        route\n      } = getShortCircuitMatches(dataRoutes);\n      return {\n        basename,\n        location,\n        matches: methodNotAllowedMatches,\n        loaderData: {},\n        actionData: null,\n        errors: {\n          [route.id]: error\n        },\n        statusCode: error.status,\n        loaderHeaders: {},\n        actionHeaders: {},\n        activeDeferreds: null\n      };\n    } else if (!matches) {\n      let error = getInternalRouterError(404, {\n        pathname: location.pathname\n      });\n      let {\n        matches: notFoundMatches,\n        route\n      } = getShortCircuitMatches(dataRoutes);\n      return {\n        basename,\n        location,\n        matches: notFoundMatches,\n        loaderData: {},\n        actionData: null,\n        errors: {\n          [route.id]: error\n        },\n        statusCode: error.status,\n        loaderHeaders: {},\n        actionHeaders: {},\n        activeDeferreds: null\n      };\n    }\n    let result = await queryImpl(request, location, matches, requestContext);\n    if (isResponse(result)) {\n      return result;\n    }\n    // When returning StaticHandlerContext, we patch back in the location here\n    // since we need it for React Context.  But this helps keep our submit and\n    // loadRouteData operating on a Request instead of a Location\n    return _extends({\n      location,\n      basename\n    }, result);\n  }\n  /**\n   * The queryRoute() method is intended for targeted route requests, either\n   * for fetch ?_data requests or resource route requests.  In this case, we\n   * are only ever calling a single action or loader, and we are returning the\n   * returned value directly.  In most cases, this will be a Response returned\n   * from the action/loader, but it may be a primitive or other value as well -\n   * and in such cases the calling context should handle that accordingly.\n   *\n   * We do respect the throw/return differentiation, so if an action/loader\n   * throws, then this method will throw the value.  This is important so we\n   * can do proper boundary identification in Remix where a thrown Response\n   * must go to the Catch Boundary but a returned Response is happy-path.\n   *\n   * One thing to note is that any Router-initiated Errors that make sense\n   * to associate with a status code will be thrown as an ErrorResponse\n   * instance which include the raw Error, such that the calling context can\n   * serialize the error as they see fit while including the proper response\n   * code.  Examples here are 404 and 405 errors that occur prior to reaching\n   * any user-defined loaders.\n   */\n  async function queryRoute(request, _temp3) {\n    let {\n      routeId,\n      requestContext\n    } = _temp3 === void 0 ? {} : _temp3;\n    let url = new URL(request.url);\n    let method = request.method;\n    let location = createLocation(\"\", createPath(url), null, \"default\");\n    let matches = matchRoutes(dataRoutes, location, basename);\n    // SSR supports HEAD requests while SPA doesn't\n    if (!isValidMethod(method) && method !== \"HEAD\" && method !== \"OPTIONS\") {\n      throw getInternalRouterError(405, {\n        method\n      });\n    } else if (!matches) {\n      throw getInternalRouterError(404, {\n        pathname: location.pathname\n      });\n    }\n    let match = routeId ? matches.find(m => m.route.id === routeId) : getTargetMatch(matches, location);\n    if (routeId && !match) {\n      throw getInternalRouterError(403, {\n        pathname: location.pathname,\n        routeId\n      });\n    } else if (!match) {\n      // This should never hit I don't think?\n      throw getInternalRouterError(404, {\n        pathname: location.pathname\n      });\n    }\n    let result = await queryImpl(request, location, matches, requestContext, match);\n    if (isResponse(result)) {\n      return result;\n    }\n    let error = result.errors ? Object.values(result.errors)[0] : undefined;\n    if (error !== undefined) {\n      // If we got back result.errors, that means the loader/action threw\n      // _something_ that wasn't a Response, but it's not guaranteed/required\n      // to be an `instanceof Error` either, so we have to use throw here to\n      // preserve the \"error\" state outside of queryImpl.\n      throw error;\n    }\n    // Pick off the right state value to return\n    if (result.actionData) {\n      return Object.values(result.actionData)[0];\n    }\n    if (result.loaderData) {\n      var _result$activeDeferre;\n      let data = Object.values(result.loaderData)[0];\n      if ((_result$activeDeferre = result.activeDeferreds) != null && _result$activeDeferre[match.route.id]) {\n        data[UNSAFE_DEFERRED_SYMBOL] = result.activeDeferreds[match.route.id];\n      }\n      return data;\n    }\n    return undefined;\n  }\n  async function queryImpl(request, location, matches, requestContext, routeMatch) {\n    invariant(request.signal, \"query()/queryRoute() requests must contain an AbortController signal\");\n    try {\n      if (isMutationMethod(request.method.toLowerCase())) {\n        let result = await submit(request, matches, routeMatch || getTargetMatch(matches, location), requestContext, routeMatch != null);\n        return result;\n      }\n      let result = await loadRouteData(request, matches, requestContext, routeMatch);\n      return isResponse(result) ? result : _extends({}, result, {\n        actionData: null,\n        actionHeaders: {}\n      });\n    } catch (e) {\n      // If the user threw/returned a Response in callLoaderOrAction, we throw\n      // it to bail out and then return or throw here based on whether the user\n      // returned or threw\n      if (isQueryRouteResponse(e)) {\n        if (e.type === ResultType.error) {\n          throw e.response;\n        }\n        return e.response;\n      }\n      // Redirects are always returned since they don't propagate to catch\n      // boundaries\n      if (isRedirectResponse(e)) {\n        return e;\n      }\n      throw e;\n    }\n  }\n  async function submit(request, matches, actionMatch, requestContext, isRouteRequest) {\n    let result;\n    if (!actionMatch.route.action && !actionMatch.route.lazy) {\n      let error = getInternalRouterError(405, {\n        method: request.method,\n        pathname: new URL(request.url).pathname,\n        routeId: actionMatch.route.id\n      });\n      if (isRouteRequest) {\n        throw error;\n      }\n      result = {\n        type: ResultType.error,\n        error\n      };\n    } else {\n      result = await callLoaderOrAction(\"action\", request, actionMatch, matches, manifest, mapRouteProperties, basename, {\n        isStaticRequest: true,\n        isRouteRequest,\n        requestContext\n      });\n      if (request.signal.aborted) {\n        let method = isRouteRequest ? \"queryRoute\" : \"query\";\n        throw new Error(method + \"() call aborted: \" + request.method + \" \" + request.url);\n      }\n    }\n    if (isRedirectResult(result)) {\n      // Uhhhh - this should never happen, we should always throw these from\n      // callLoaderOrAction, but the type narrowing here keeps TS happy and we\n      // can get back on the \"throw all redirect responses\" train here should\n      // this ever happen :/\n      throw new Response(null, {\n        status: result.status,\n        headers: {\n          Location: result.location\n        }\n      });\n    }\n    if (isDeferredResult(result)) {\n      let error = getInternalRouterError(400, {\n        type: \"defer-action\"\n      });\n      if (isRouteRequest) {\n        throw error;\n      }\n      result = {\n        type: ResultType.error,\n        error\n      };\n    }\n    if (isRouteRequest) {\n      // Note: This should only be non-Response values if we get here, since\n      // isRouteRequest should throw any Response received in callLoaderOrAction\n      if (isErrorResult(result)) {\n        throw result.error;\n      }\n      return {\n        matches: [actionMatch],\n        loaderData: {},\n        actionData: {\n          [actionMatch.route.id]: result.data\n        },\n        errors: null,\n        // Note: statusCode + headers are unused here since queryRoute will\n        // return the raw Response or value\n        statusCode: 200,\n        loaderHeaders: {},\n        actionHeaders: {},\n        activeDeferreds: null\n      };\n    }\n    if (isErrorResult(result)) {\n      // Store off the pending error - we use it to determine which loaders\n      // to call and will commit it when we complete the navigation\n      let boundaryMatch = findNearestBoundary(matches, actionMatch.route.id);\n      let context = await loadRouteData(request, matches, requestContext, undefined, {\n        [boundaryMatch.route.id]: result.error\n      });\n      // action status codes take precedence over loader status codes\n      return _extends({}, context, {\n        statusCode: isRouteErrorResponse(result.error) ? result.error.status : 500,\n        actionData: null,\n        actionHeaders: _extends({}, result.headers ? {\n          [actionMatch.route.id]: result.headers\n        } : {})\n      });\n    }\n    // Create a GET request for the loaders\n    let loaderRequest = new Request(request.url, {\n      headers: request.headers,\n      redirect: request.redirect,\n      signal: request.signal\n    });\n    let context = await loadRouteData(loaderRequest, matches, requestContext);\n    return _extends({}, context, result.statusCode ? {\n      statusCode: result.statusCode\n    } : {}, {\n      actionData: {\n        [actionMatch.route.id]: result.data\n      },\n      actionHeaders: _extends({}, result.headers ? {\n        [actionMatch.route.id]: result.headers\n      } : {})\n    });\n  }\n  async function loadRouteData(request, matches, requestContext, routeMatch, pendingActionError) {\n    let isRouteRequest = routeMatch != null;\n    // Short circuit if we have no loaders to run (queryRoute())\n    if (isRouteRequest && !(routeMatch != null && routeMatch.route.loader) && !(routeMatch != null && routeMatch.route.lazy)) {\n      throw getInternalRouterError(400, {\n        method: request.method,\n        pathname: new URL(request.url).pathname,\n        routeId: routeMatch == null ? void 0 : routeMatch.route.id\n      });\n    }\n    let requestMatches = routeMatch ? [routeMatch] : getLoaderMatchesUntilBoundary(matches, Object.keys(pendingActionError || {})[0]);\n    let matchesToLoad = requestMatches.filter(m => m.route.loader || m.route.lazy);\n    // Short circuit if we have no loaders to run (query())\n    if (matchesToLoad.length === 0) {\n      return {\n        matches,\n        // Add a null for all matched routes for proper revalidation on the client\n        loaderData: matches.reduce((acc, m) => Object.assign(acc, {\n          [m.route.id]: null\n        }), {}),\n        errors: pendingActionError || null,\n        statusCode: 200,\n        loaderHeaders: {},\n        activeDeferreds: null\n      };\n    }\n    let results = await Promise.all([...matchesToLoad.map(match => callLoaderOrAction(\"loader\", request, match, matches, manifest, mapRouteProperties, basename, {\n      isStaticRequest: true,\n      isRouteRequest,\n      requestContext\n    }))]);\n    if (request.signal.aborted) {\n      let method = isRouteRequest ? \"queryRoute\" : \"query\";\n      throw new Error(method + \"() call aborted: \" + request.method + \" \" + request.url);\n    }\n    // Process and commit output from loaders\n    let activeDeferreds = new Map();\n    let context = processRouteLoaderData(matches, matchesToLoad, results, pendingActionError, activeDeferreds);\n    // Add a null for any non-loader matches for proper revalidation on the client\n    let executedLoaders = new Set(matchesToLoad.map(match => match.route.id));\n    matches.forEach(match => {\n      if (!executedLoaders.has(match.route.id)) {\n        context.loaderData[match.route.id] = null;\n      }\n    });\n    return _extends({}, context, {\n      matches,\n      activeDeferreds: activeDeferreds.size > 0 ? Object.fromEntries(activeDeferreds.entries()) : null\n    });\n  }\n  return {\n    dataRoutes,\n    query,\n    queryRoute\n  };\n}\n//#endregion\n////////////////////////////////////////////////////////////////////////////////\n//#region Helpers\n////////////////////////////////////////////////////////////////////////////////\n/**\n * Given an existing StaticHandlerContext and an error thrown at render time,\n * provide an updated StaticHandlerContext suitable for a second SSR render\n */\nfunction getStaticContextFromError(routes, context, error) {\n  let newContext = _extends({}, context, {\n    statusCode: 500,\n    errors: {\n      [context._deepestRenderedBoundaryId || routes[0].id]: error\n    }\n  });\n  return newContext;\n}\nfunction isSubmissionNavigation(opts) {\n  return opts != null && (\"formData\" in opts && opts.formData != null || \"body\" in opts && opts.body !== undefined);\n}\nfunction normalizeTo(location, matches, basename, prependBasename, to, fromRouteId, relative) {\n  let contextualMatches;\n  let activeRouteMatch;\n  if (fromRouteId != null && relative !== \"path\") {\n    // Grab matches up to the calling route so our route-relative logic is\n    // relative to the correct source route.  When using relative:path,\n    // fromRouteId is ignored since that is always relative to the current\n    // location path\n    contextualMatches = [];\n    for (let match of matches) {\n      contextualMatches.push(match);\n      if (match.route.id === fromRouteId) {\n        activeRouteMatch = match;\n        break;\n      }\n    }\n  } else {\n    contextualMatches = matches;\n    activeRouteMatch = matches[matches.length - 1];\n  }\n  // Resolve the relative path\n  let path = resolveTo(to ? to : \".\", getPathContributingMatches(contextualMatches).map(m => m.pathnameBase), stripBasename(location.pathname, basename) || location.pathname, relative === \"path\");\n  // When `to` is not specified we inherit search/hash from the current\n  // location, unlike when to=\".\" and we just inherit the path.\n  // See https://github.com/remix-run/remix/issues/927\n  if (to == null) {\n    path.search = location.search;\n    path.hash = location.hash;\n  }\n  // Add an ?index param for matched index routes if we don't already have one\n  if ((to == null || to === \"\" || to === \".\") && activeRouteMatch && activeRouteMatch.route.index && !hasNakedIndexQuery(path.search)) {\n    path.search = path.search ? path.search.replace(/^\\?/, \"?index&\") : \"?index\";\n  }\n  // If we're operating within a basename, prepend it to the pathname.  If\n  // this is a root navigation, then just use the raw basename which allows\n  // the basename to have full control over the presence of a trailing slash\n  // on root actions\n  if (prependBasename && basename !== \"/\") {\n    path.pathname = path.pathname === \"/\" ? basename : joinPaths([basename, path.pathname]);\n  }\n  return createPath(path);\n}\n// Normalize navigation options by converting formMethod=GET formData objects to\n// URLSearchParams so they behave identically to links with query params\nfunction normalizeNavigateOptions(normalizeFormMethod, isFetcher, path, opts) {\n  // Return location verbatim on non-submission navigations\n  if (!opts || !isSubmissionNavigation(opts)) {\n    return {\n      path\n    };\n  }\n  if (opts.formMethod && !isValidMethod(opts.formMethod)) {\n    return {\n      path,\n      error: getInternalRouterError(405, {\n        method: opts.formMethod\n      })\n    };\n  }\n  let getInvalidBodyError = () => ({\n    path,\n    error: getInternalRouterError(400, {\n      type: \"invalid-body\"\n    })\n  });\n  // Create a Submission on non-GET navigations\n  let rawFormMethod = opts.formMethod || \"get\";\n  let formMethod = normalizeFormMethod ? rawFormMethod.toUpperCase() : rawFormMethod.toLowerCase();\n  let formAction = stripHashFromPath(path);\n  if (opts.body !== undefined) {\n    if (opts.formEncType === \"text/plain\") {\n      // text only support POST/PUT/PATCH/DELETE submissions\n      if (!isMutationMethod(formMethod)) {\n        return getInvalidBodyError();\n      }\n      let text = typeof opts.body === \"string\" ? opts.body : opts.body instanceof FormData || opts.body instanceof URLSearchParams ?\n      // https://html.spec.whatwg.org/multipage/form-control-infrastructure.html#plain-text-form-data\n      Array.from(opts.body.entries()).reduce((acc, _ref3) => {\n        let [name, value] = _ref3;\n        return \"\" + acc + name + \"=\" + value + \"\\n\";\n      }, \"\") : String(opts.body);\n      return {\n        path,\n        submission: {\n          formMethod,\n          formAction,\n          formEncType: opts.formEncType,\n          formData: undefined,\n          json: undefined,\n          text\n        }\n      };\n    } else if (opts.formEncType === \"application/json\") {\n      // json only supports POST/PUT/PATCH/DELETE submissions\n      if (!isMutationMethod(formMethod)) {\n        return getInvalidBodyError();\n      }\n      try {\n        let json = typeof opts.body === \"string\" ? JSON.parse(opts.body) : opts.body;\n        return {\n          path,\n          submission: {\n            formMethod,\n            formAction,\n            formEncType: opts.formEncType,\n            formData: undefined,\n            json,\n            text: undefined\n          }\n        };\n      } catch (e) {\n        return getInvalidBodyError();\n      }\n    }\n  }\n  invariant(typeof FormData === \"function\", \"FormData is not available in this environment\");\n  let searchParams;\n  let formData;\n  if (opts.formData) {\n    searchParams = convertFormDataToSearchParams(opts.formData);\n    formData = opts.formData;\n  } else if (opts.body instanceof FormData) {\n    searchParams = convertFormDataToSearchParams(opts.body);\n    formData = opts.body;\n  } else if (opts.body instanceof URLSearchParams) {\n    searchParams = opts.body;\n    formData = convertSearchParamsToFormData(searchParams);\n  } else if (opts.body == null) {\n    searchParams = new URLSearchParams();\n    formData = new FormData();\n  } else {\n    try {\n      searchParams = new URLSearchParams(opts.body);\n      formData = convertSearchParamsToFormData(searchParams);\n    } catch (e) {\n      return getInvalidBodyError();\n    }\n  }\n  let submission = {\n    formMethod,\n    formAction,\n    formEncType: opts && opts.formEncType || \"application/x-www-form-urlencoded\",\n    formData,\n    json: undefined,\n    text: undefined\n  };\n  if (isMutationMethod(submission.formMethod)) {\n    return {\n      path,\n      submission\n    };\n  }\n  // Flatten submission onto URLSearchParams for GET submissions\n  let parsedPath = parsePath(path);\n  // On GET navigation submissions we can drop the ?index param from the\n  // resulting location since all loaders will run.  But fetcher GET submissions\n  // only run a single loader so we need to preserve any incoming ?index params\n  if (isFetcher && parsedPath.search && hasNakedIndexQuery(parsedPath.search)) {\n    searchParams.append(\"index\", \"\");\n  }\n  parsedPath.search = \"?\" + searchParams;\n  return {\n    path: createPath(parsedPath),\n    submission\n  };\n}\n// Filter out all routes below any caught error as they aren't going to\n// render so we don't need to load them\nfunction getLoaderMatchesUntilBoundary(matches, boundaryId) {\n  let boundaryMatches = matches;\n  if (boundaryId) {\n    let index = matches.findIndex(m => m.route.id === boundaryId);\n    if (index >= 0) {\n      boundaryMatches = matches.slice(0, index);\n    }\n  }\n  return boundaryMatches;\n}\nfunction getMatchesToLoad(history, state, matches, submission, location, isRevalidationRequired, cancelledDeferredRoutes, cancelledFetcherLoads, fetchLoadMatches, fetchRedirectIds, routesToUse, basename, pendingActionData, pendingError) {\n  let actionResult = pendingError ? Object.values(pendingError)[0] : pendingActionData ? Object.values(pendingActionData)[0] : undefined;\n  let currentUrl = history.createURL(state.location);\n  let nextUrl = history.createURL(location);\n  // Pick navigation matches that are net-new or qualify for revalidation\n  let boundaryId = pendingError ? Object.keys(pendingError)[0] : undefined;\n  let boundaryMatches = getLoaderMatchesUntilBoundary(matches, boundaryId);\n  let navigationMatches = boundaryMatches.filter((match, index) => {\n    if (match.route.lazy) {\n      // We haven't loaded this route yet so we don't know if it's got a loader!\n      return true;\n    }\n    if (match.route.loader == null) {\n      return false;\n    }\n    // Always call the loader on new route instances and pending defer cancellations\n    if (isNewLoader(state.loaderData, state.matches[index], match) || cancelledDeferredRoutes.some(id => id === match.route.id)) {\n      return true;\n    }\n    // This is the default implementation for when we revalidate.  If the route\n    // provides it's own implementation, then we give them full control but\n    // provide this value so they can leverage it if needed after they check\n    // their own specific use cases\n    let currentRouteMatch = state.matches[index];\n    let nextRouteMatch = match;\n    return shouldRevalidateLoader(match, _extends({\n      currentUrl,\n      currentParams: currentRouteMatch.params,\n      nextUrl,\n      nextParams: nextRouteMatch.params\n    }, submission, {\n      actionResult,\n      defaultShouldRevalidate:\n      // Forced revalidation due to submission, useRevalidator, or X-Remix-Revalidate\n      isRevalidationRequired ||\n      // Clicked the same link, resubmitted a GET form\n      currentUrl.pathname + currentUrl.search === nextUrl.pathname + nextUrl.search ||\n      // Search params affect all loaders\n      currentUrl.search !== nextUrl.search || isNewRouteInstance(currentRouteMatch, nextRouteMatch)\n    }));\n  });\n  // Pick fetcher.loads that need to be revalidated\n  let revalidatingFetchers = [];\n  fetchLoadMatches.forEach((f, key) => {\n    // Don't revalidate if fetcher won't be present in the subsequent render\n    if (!matches.some(m => m.route.id === f.routeId)) {\n      return;\n    }\n    let fetcherMatches = matchRoutes(routesToUse, f.path, basename);\n    // If the fetcher path no longer matches, push it in with null matches so\n    // we can trigger a 404 in callLoadersAndMaybeResolveData.  Note this is\n    // currently only a use-case for Remix HMR where the route tree can change\n    // at runtime and remove a route previously loaded via a fetcher\n    if (!fetcherMatches) {\n      revalidatingFetchers.push({\n        key,\n        routeId: f.routeId,\n        path: f.path,\n        matches: null,\n        match: null,\n        controller: null\n      });\n      return;\n    }\n    // Revalidating fetchers are decoupled from the route matches since they\n    // load from a static href.  They revalidate based on explicit revalidation\n    // (submission, useRevalidator, or X-Remix-Revalidate)\n    let fetcher = state.fetchers.get(key);\n    let fetcherMatch = getTargetMatch(fetcherMatches, f.path);\n    let shouldRevalidate = false;\n    if (fetchRedirectIds.has(key)) {\n      // Never trigger a revalidation of an actively redirecting fetcher\n      shouldRevalidate = false;\n    } else if (cancelledFetcherLoads.includes(key)) {\n      // Always revalidate if the fetcher was cancelled\n      shouldRevalidate = true;\n    } else if (fetcher && fetcher.state !== \"idle\" && fetcher.data === undefined) {\n      // If the fetcher hasn't ever completed loading yet, then this isn't a\n      // revalidation, it would just be a brand new load if an explicit\n      // revalidation is required\n      shouldRevalidate = isRevalidationRequired;\n    } else {\n      // Otherwise fall back on any user-defined shouldRevalidate, defaulting\n      // to explicit revalidations only\n      shouldRevalidate = shouldRevalidateLoader(fetcherMatch, _extends({\n        currentUrl,\n        currentParams: state.matches[state.matches.length - 1].params,\n        nextUrl,\n        nextParams: matches[matches.length - 1].params\n      }, submission, {\n        actionResult,\n        defaultShouldRevalidate: isRevalidationRequired\n      }));\n    }\n    if (shouldRevalidate) {\n      revalidatingFetchers.push({\n        key,\n        routeId: f.routeId,\n        path: f.path,\n        matches: fetcherMatches,\n        match: fetcherMatch,\n        controller: new AbortController()\n      });\n    }\n  });\n  return [navigationMatches, revalidatingFetchers];\n}\nfunction isNewLoader(currentLoaderData, currentMatch, match) {\n  let isNew =\n  // [a] -> [a, b]\n  !currentMatch ||\n  // [a, b] -> [a, c]\n  match.route.id !== currentMatch.route.id;\n  // Handle the case that we don't have data for a re-used route, potentially\n  // from a prior error or from a cancelled pending deferred\n  let isMissingData = currentLoaderData[match.route.id] === undefined;\n  // Always load if this is a net-new route or we don't yet have data\n  return isNew || isMissingData;\n}\nfunction isNewRouteInstance(currentMatch, match) {\n  let currentPath = currentMatch.route.path;\n  return (\n    // param change for this match, /users/123 -> /users/456\n    currentMatch.pathname !== match.pathname ||\n    // splat param changed, which is not present in match.path\n    // e.g. /files/images/avatar.jpg -> files/finances.xls\n    currentPath != null && currentPath.endsWith(\"*\") && currentMatch.params[\"*\"] !== match.params[\"*\"]\n  );\n}\nfunction shouldRevalidateLoader(loaderMatch, arg) {\n  if (loaderMatch.route.shouldRevalidate) {\n    let routeChoice = loaderMatch.route.shouldRevalidate(arg);\n    if (typeof routeChoice === \"boolean\") {\n      return routeChoice;\n    }\n  }\n  return arg.defaultShouldRevalidate;\n}\n/**\n * Execute route.lazy() methods to lazily load route modules (loader, action,\n * shouldRevalidate) and update the routeManifest in place which shares objects\n * with dataRoutes so those get updated as well.\n */\nasync function loadLazyRouteModule(route, mapRouteProperties, manifest) {\n  if (!route.lazy) {\n    return;\n  }\n  let lazyRoute = await route.lazy();\n  // If the lazy route function was executed and removed by another parallel\n  // call then we can return - first lazy() to finish wins because the return\n  // value of lazy is expected to be static\n  if (!route.lazy) {\n    return;\n  }\n  let routeToUpdate = manifest[route.id];\n  invariant(routeToUpdate, \"No route found in manifest\");\n  // Update the route in place.  This should be safe because there's no way\n  // we could yet be sitting on this route as we can't get there without\n  // resolving lazy() first.\n  //\n  // This is different than the HMR \"update\" use-case where we may actively be\n  // on the route being updated.  The main concern boils down to \"does this\n  // mutation affect any ongoing navigations or any current state.matches\n  // values?\".  If not, it should be safe to update in place.\n  let routeUpdates = {};\n  for (let lazyRouteProperty in lazyRoute) {\n    let staticRouteValue = routeToUpdate[lazyRouteProperty];\n    let isPropertyStaticallyDefined = staticRouteValue !== undefined &&\n    // This property isn't static since it should always be updated based\n    // on the route updates\n    lazyRouteProperty !== \"hasErrorBoundary\";\n    warning(!isPropertyStaticallyDefined, \"Route \\\"\" + routeToUpdate.id + \"\\\" has a static property \\\"\" + lazyRouteProperty + \"\\\" \" + \"defined but its lazy function is also returning a value for this property. \" + (\"The lazy route property \\\"\" + lazyRouteProperty + \"\\\" will be ignored.\"));\n    if (!isPropertyStaticallyDefined && !immutableRouteKeys.has(lazyRouteProperty)) {\n      routeUpdates[lazyRouteProperty] = lazyRoute[lazyRouteProperty];\n    }\n  }\n  // Mutate the route with the provided updates.  Do this first so we pass\n  // the updated version to mapRouteProperties\n  Object.assign(routeToUpdate, routeUpdates);\n  // Mutate the `hasErrorBoundary` property on the route based on the route\n  // updates and remove the `lazy` function so we don't resolve the lazy\n  // route again.\n  Object.assign(routeToUpdate, _extends({}, mapRouteProperties(routeToUpdate), {\n    lazy: undefined\n  }));\n}\nasync function callLoaderOrAction(type, request, match, matches, manifest, mapRouteProperties, basename, opts) {\n  if (opts === void 0) {\n    opts = {};\n  }\n  let resultType;\n  let result;\n  let onReject;\n  let runHandler = handler => {\n    // Setup a promise we can race against so that abort signals short circuit\n    let reject;\n    let abortPromise = new Promise((_, r) => reject = r);\n    onReject = () => reject();\n    request.signal.addEventListener(\"abort\", onReject);\n    return Promise.race([handler({\n      request,\n      params: match.params,\n      context: opts.requestContext\n    }), abortPromise]);\n  };\n  try {\n    let handler = match.route[type];\n    if (match.route.lazy) {\n      if (handler) {\n        // Run statically defined handler in parallel with lazy()\n        let handlerError;\n        let values = await Promise.all([\n        // If the handler throws, don't let it immediately bubble out,\n        // since we need to let the lazy() execution finish so we know if this\n        // route has a boundary that can handle the error\n        runHandler(handler).catch(e => {\n          handlerError = e;\n        }), loadLazyRouteModule(match.route, mapRouteProperties, manifest)]);\n        if (handlerError) {\n          throw handlerError;\n        }\n        result = values[0];\n      } else {\n        // Load lazy route module, then run any returned handler\n        await loadLazyRouteModule(match.route, mapRouteProperties, manifest);\n        handler = match.route[type];\n        if (handler) {\n          // Handler still run even if we got interrupted to maintain consistency\n          // with un-abortable behavior of handler execution on non-lazy or\n          // previously-lazy-loaded routes\n          result = await runHandler(handler);\n        } else if (type === \"action\") {\n          let url = new URL(request.url);\n          let pathname = url.pathname + url.search;\n          throw getInternalRouterError(405, {\n            method: request.method,\n            pathname,\n            routeId: match.route.id\n          });\n        } else {\n          // lazy() route has no loader to run.  Short circuit here so we don't\n          // hit the invariant below that errors on returning undefined.\n          return {\n            type: ResultType.data,\n            data: undefined\n          };\n        }\n      }\n    } else if (!handler) {\n      let url = new URL(request.url);\n      let pathname = url.pathname + url.search;\n      throw getInternalRouterError(404, {\n        pathname\n      });\n    } else {\n      result = await runHandler(handler);\n    }\n    invariant(result !== undefined, \"You defined \" + (type === \"action\" ? \"an action\" : \"a loader\") + \" for route \" + (\"\\\"\" + match.route.id + \"\\\" but didn't return anything from your `\" + type + \"` \") + \"function. Please return a value or `null`.\");\n  } catch (e) {\n    resultType = ResultType.error;\n    result = e;\n  } finally {\n    if (onReject) {\n      request.signal.removeEventListener(\"abort\", onReject);\n    }\n  }\n  if (isResponse(result)) {\n    let status = result.status;\n    // Process redirects\n    if (redirectStatusCodes.has(status)) {\n      let location = result.headers.get(\"Location\");\n      invariant(location, \"Redirects returned/thrown from loaders/actions must have a Location header\");\n      // Support relative routing in internal redirects\n      if (!ABSOLUTE_URL_REGEX.test(location)) {\n        location = normalizeTo(new URL(request.url), matches.slice(0, matches.indexOf(match) + 1), basename, true, location);\n      } else if (!opts.isStaticRequest) {\n        // Strip off the protocol+origin for same-origin + same-basename absolute\n        // redirects. If this is a static request, we can let it go back to the\n        // browser as-is\n        let currentUrl = new URL(request.url);\n        let url = location.startsWith(\"//\") ? new URL(currentUrl.protocol + location) : new URL(location);\n        let isSameBasename = stripBasename(url.pathname, basename) != null;\n        if (url.origin === currentUrl.origin && isSameBasename) {\n          location = url.pathname + url.search + url.hash;\n        }\n      }\n      // Don't process redirects in the router during static requests requests.\n      // Instead, throw the Response and let the server handle it with an HTTP\n      // redirect.  We also update the Location header in place in this flow so\n      // basename and relative routing is taken into account\n      if (opts.isStaticRequest) {\n        result.headers.set(\"Location\", location);\n        throw result;\n      }\n      return {\n        type: ResultType.redirect,\n        status,\n        location,\n        revalidate: result.headers.get(\"X-Remix-Revalidate\") !== null,\n        reloadDocument: result.headers.get(\"X-Remix-Reload-Document\") !== null\n      };\n    }\n    // For SSR single-route requests, we want to hand Responses back directly\n    // without unwrapping.  We do this with the QueryRouteResponse wrapper\n    // interface so we can know whether it was returned or thrown\n    if (opts.isRouteRequest) {\n      let queryRouteResponse = {\n        type: resultType === ResultType.error ? ResultType.error : ResultType.data,\n        response: result\n      };\n      throw queryRouteResponse;\n    }\n    let data;\n    let contentType = result.headers.get(\"Content-Type\");\n    // Check between word boundaries instead of startsWith() due to the last\n    // paragraph of https://httpwg.org/specs/rfc9110.html#field.content-type\n    if (contentType && /\\bapplication\\/json\\b/.test(contentType)) {\n      data = await result.json();\n    } else {\n      data = await result.text();\n    }\n    if (resultType === ResultType.error) {\n      return {\n        type: resultType,\n        error: new ErrorResponseImpl(status, result.statusText, data),\n        headers: result.headers\n      };\n    }\n    return {\n      type: ResultType.data,\n      data,\n      statusCode: result.status,\n      headers: result.headers\n    };\n  }\n  if (resultType === ResultType.error) {\n    return {\n      type: resultType,\n      error: result\n    };\n  }\n  if (isDeferredData(result)) {\n    var _result$init, _result$init2;\n    return {\n      type: ResultType.deferred,\n      deferredData: result,\n      statusCode: (_result$init = result.init) == null ? void 0 : _result$init.status,\n      headers: ((_result$init2 = result.init) == null ? void 0 : _result$init2.headers) && new Headers(result.init.headers)\n    };\n  }\n  return {\n    type: ResultType.data,\n    data: result\n  };\n}\n// Utility method for creating the Request instances for loaders/actions during\n// client-side navigations and fetches.  During SSR we will always have a\n// Request instance from the static handler (query/queryRoute)\nfunction createClientSideRequest(history, location, signal, submission) {\n  let url = history.createURL(stripHashFromPath(location)).toString();\n  let init = {\n    signal\n  };\n  if (submission && isMutationMethod(submission.formMethod)) {\n    let {\n      formMethod,\n      formEncType\n    } = submission;\n    // Didn't think we needed this but it turns out unlike other methods, patch\n    // won't be properly normalized to uppercase and results in a 405 error.\n    // See: https://fetch.spec.whatwg.org/#concept-method\n    init.method = formMethod.toUpperCase();\n    if (formEncType === \"application/json\") {\n      init.headers = new Headers({\n        \"Content-Type\": formEncType\n      });\n      init.body = JSON.stringify(submission.json);\n    } else if (formEncType === \"text/plain\") {\n      // Content-Type is inferred (https://fetch.spec.whatwg.org/#dom-request)\n      init.body = submission.text;\n    } else if (formEncType === \"application/x-www-form-urlencoded\" && submission.formData) {\n      // Content-Type is inferred (https://fetch.spec.whatwg.org/#dom-request)\n      init.body = convertFormDataToSearchParams(submission.formData);\n    } else {\n      // Content-Type is inferred (https://fetch.spec.whatwg.org/#dom-request)\n      init.body = submission.formData;\n    }\n  }\n  return new Request(url, init);\n}\nfunction convertFormDataToSearchParams(formData) {\n  let searchParams = new URLSearchParams();\n  for (let [key, value] of formData.entries()) {\n    // https://html.spec.whatwg.org/multipage/form-control-infrastructure.html#converting-an-entry-list-to-a-list-of-name-value-pairs\n    searchParams.append(key, typeof value === \"string\" ? value : value.name);\n  }\n  return searchParams;\n}\nfunction convertSearchParamsToFormData(searchParams) {\n  let formData = new FormData();\n  for (let [key, value] of searchParams.entries()) {\n    formData.append(key, value);\n  }\n  return formData;\n}\nfunction processRouteLoaderData(matches, matchesToLoad, results, pendingError, activeDeferreds) {\n  // Fill in loaderData/errors from our loaders\n  let loaderData = {};\n  let errors = null;\n  let statusCode;\n  let foundError = false;\n  let loaderHeaders = {};\n  // Process loader results into state.loaderData/state.errors\n  results.forEach((result, index) => {\n    let id = matchesToLoad[index].route.id;\n    invariant(!isRedirectResult(result), \"Cannot handle redirect results in processLoaderData\");\n    if (isErrorResult(result)) {\n      // Look upwards from the matched route for the closest ancestor\n      // error boundary, defaulting to the root match\n      let boundaryMatch = findNearestBoundary(matches, id);\n      let error = result.error;\n      // If we have a pending action error, we report it at the highest-route\n      // that throws a loader error, and then clear it out to indicate that\n      // it was consumed\n      if (pendingError) {\n        error = Object.values(pendingError)[0];\n        pendingError = undefined;\n      }\n      errors = errors || {};\n      // Prefer higher error values if lower errors bubble to the same boundary\n      if (errors[boundaryMatch.route.id] == null) {\n        errors[boundaryMatch.route.id] = error;\n      }\n      // Clear our any prior loaderData for the throwing route\n      loaderData[id] = undefined;\n      // Once we find our first (highest) error, we set the status code and\n      // prevent deeper status codes from overriding\n      if (!foundError) {\n        foundError = true;\n        statusCode = isRouteErrorResponse(result.error) ? result.error.status : 500;\n      }\n      if (result.headers) {\n        loaderHeaders[id] = result.headers;\n      }\n    } else {\n      if (isDeferredResult(result)) {\n        activeDeferreds.set(id, result.deferredData);\n        loaderData[id] = result.deferredData.data;\n      } else {\n        loaderData[id] = result.data;\n      }\n      // Error status codes always override success status codes, but if all\n      // loaders are successful we take the deepest status code.\n      if (result.statusCode != null && result.statusCode !== 200 && !foundError) {\n        statusCode = result.statusCode;\n      }\n      if (result.headers) {\n        loaderHeaders[id] = result.headers;\n      }\n    }\n  });\n  // If we didn't consume the pending action error (i.e., all loaders\n  // resolved), then consume it here.  Also clear out any loaderData for the\n  // throwing route\n  if (pendingError) {\n    errors = pendingError;\n    loaderData[Object.keys(pendingError)[0]] = undefined;\n  }\n  return {\n    loaderData,\n    errors,\n    statusCode: statusCode || 200,\n    loaderHeaders\n  };\n}\nfunction processLoaderData(state, matches, matchesToLoad, results, pendingError, revalidatingFetchers, fetcherResults, activeDeferreds) {\n  let {\n    loaderData,\n    errors\n  } = processRouteLoaderData(matches, matchesToLoad, results, pendingError, activeDeferreds);\n  // Process results from our revalidating fetchers\n  for (let index = 0; index < revalidatingFetchers.length; index++) {\n    let {\n      key,\n      match,\n      controller\n    } = revalidatingFetchers[index];\n    invariant(fetcherResults !== undefined && fetcherResults[index] !== undefined, \"Did not find corresponding fetcher result\");\n    let result = fetcherResults[index];\n    // Process fetcher non-redirect errors\n    if (controller && controller.signal.aborted) {\n      // Nothing to do for aborted fetchers\n      continue;\n    } else if (isErrorResult(result)) {\n      let boundaryMatch = findNearestBoundary(state.matches, match == null ? void 0 : match.route.id);\n      if (!(errors && errors[boundaryMatch.route.id])) {\n        errors = _extends({}, errors, {\n          [boundaryMatch.route.id]: result.error\n        });\n      }\n      state.fetchers.delete(key);\n    } else if (isRedirectResult(result)) {\n      // Should never get here, redirects should get processed above, but we\n      // keep this to type narrow to a success result in the else\n      invariant(false, \"Unhandled fetcher revalidation redirect\");\n    } else if (isDeferredResult(result)) {\n      // Should never get here, deferred data should be awaited for fetchers\n      // in resolveDeferredResults\n      invariant(false, \"Unhandled fetcher deferred data\");\n    } else {\n      let doneFetcher = getDoneFetcher(result.data);\n      state.fetchers.set(key, doneFetcher);\n    }\n  }\n  return {\n    loaderData,\n    errors\n  };\n}\nfunction mergeLoaderData(loaderData, newLoaderData, matches, errors) {\n  let mergedLoaderData = _extends({}, newLoaderData);\n  for (let match of matches) {\n    let id = match.route.id;\n    if (newLoaderData.hasOwnProperty(id)) {\n      if (newLoaderData[id] !== undefined) {\n        mergedLoaderData[id] = newLoaderData[id];\n      }\n    } else if (loaderData[id] !== undefined && match.route.loader) {\n      // Preserve existing keys not included in newLoaderData and where a loader\n      // wasn't removed by HMR\n      mergedLoaderData[id] = loaderData[id];\n    }\n    if (errors && errors.hasOwnProperty(id)) {\n      // Don't keep any loader data below the boundary\n      break;\n    }\n  }\n  return mergedLoaderData;\n}\n// Find the nearest error boundary, looking upwards from the leaf route (or the\n// route specified by routeId) for the closest ancestor error boundary,\n// defaulting to the root match\nfunction findNearestBoundary(matches, routeId) {\n  let eligibleMatches = routeId ? matches.slice(0, matches.findIndex(m => m.route.id === routeId) + 1) : [...matches];\n  return eligibleMatches.reverse().find(m => m.route.hasErrorBoundary === true) || matches[0];\n}\nfunction getShortCircuitMatches(routes) {\n  // Prefer a root layout route if present, otherwise shim in a route object\n  let route = routes.length === 1 ? routes[0] : routes.find(r => r.index || !r.path || r.path === \"/\") || {\n    id: \"__shim-error-route__\"\n  };\n  return {\n    matches: [{\n      params: {},\n      pathname: \"\",\n      pathnameBase: \"\",\n      route\n    }],\n    route\n  };\n}\nfunction getInternalRouterError(status, _temp4) {\n  let {\n    pathname,\n    routeId,\n    method,\n    type\n  } = _temp4 === void 0 ? {} : _temp4;\n  let statusText = \"Unknown Server Error\";\n  let errorMessage = \"Unknown @remix-run/router error\";\n  if (status === 400) {\n    statusText = \"Bad Request\";\n    if (method && pathname && routeId) {\n      errorMessage = \"You made a \" + method + \" request to \\\"\" + pathname + \"\\\" but \" + (\"did not provide a `loader` for route \\\"\" + routeId + \"\\\", \") + \"so there is no way to handle the request.\";\n    } else if (type === \"defer-action\") {\n      errorMessage = \"defer() is not supported in actions\";\n    } else if (type === \"invalid-body\") {\n      errorMessage = \"Unable to encode submission body\";\n    }\n  } else if (status === 403) {\n    statusText = \"Forbidden\";\n    errorMessage = \"Route \\\"\" + routeId + \"\\\" does not match URL \\\"\" + pathname + \"\\\"\";\n  } else if (status === 404) {\n    statusText = \"Not Found\";\n    errorMessage = \"No route matches URL \\\"\" + pathname + \"\\\"\";\n  } else if (status === 405) {\n    statusText = \"Method Not Allowed\";\n    if (method && pathname && routeId) {\n      errorMessage = \"You made a \" + method.toUpperCase() + \" request to \\\"\" + pathname + \"\\\" but \" + (\"did not provide an `action` for route \\\"\" + routeId + \"\\\", \") + \"so there is no way to handle the request.\";\n    } else if (method) {\n      errorMessage = \"Invalid request method \\\"\" + method.toUpperCase() + \"\\\"\";\n    }\n  }\n  return new ErrorResponseImpl(status || 500, statusText, new Error(errorMessage), true);\n}\n// Find any returned redirect errors, starting from the lowest match\nfunction findRedirect(results) {\n  for (let i = results.length - 1; i >= 0; i--) {\n    let result = results[i];\n    if (isRedirectResult(result)) {\n      return {\n        result,\n        idx: i\n      };\n    }\n  }\n}\nfunction stripHashFromPath(path) {\n  let parsedPath = typeof path === \"string\" ? parsePath(path) : path;\n  return createPath(_extends({}, parsedPath, {\n    hash: \"\"\n  }));\n}\nfunction isHashChangeOnly(a, b) {\n  if (a.pathname !== b.pathname || a.search !== b.search) {\n    return false;\n  }\n  if (a.hash === \"\") {\n    // /page -> /page#hash\n    return b.hash !== \"\";\n  } else if (a.hash === b.hash) {\n    // /page#hash -> /page#hash\n    return true;\n  } else if (b.hash !== \"\") {\n    // /page#hash -> /page#other\n    return true;\n  }\n  // If the hash is removed the browser will re-perform a request to the server\n  // /page#hash -> /page\n  return false;\n}\nfunction isDeferredResult(result) {\n  return result.type === ResultType.deferred;\n}\nfunction isErrorResult(result) {\n  return result.type === ResultType.error;\n}\nfunction isRedirectResult(result) {\n  return (result && result.type) === ResultType.redirect;\n}\nfunction isDeferredData(value) {\n  let deferred = value;\n  return deferred && typeof deferred === \"object\" && typeof deferred.data === \"object\" && typeof deferred.subscribe === \"function\" && typeof deferred.cancel === \"function\" && typeof deferred.resolveData === \"function\";\n}\nfunction isResponse(value) {\n  return value != null && typeof value.status === \"number\" && typeof value.statusText === \"string\" && typeof value.headers === \"object\" && typeof value.body !== \"undefined\";\n}\nfunction isRedirectResponse(result) {\n  if (!isResponse(result)) {\n    return false;\n  }\n  let status = result.status;\n  let location = result.headers.get(\"Location\");\n  return status >= 300 && status <= 399 && location != null;\n}\nfunction isQueryRouteResponse(obj) {\n  return obj && isResponse(obj.response) && (obj.type === ResultType.data || obj.type === ResultType.error);\n}\nfunction isValidMethod(method) {\n  return validRequestMethods.has(method.toLowerCase());\n}\nfunction isMutationMethod(method) {\n  return validMutationMethods.has(method.toLowerCase());\n}\nasync function resolveDeferredResults(currentMatches, matchesToLoad, results, signals, isFetcher, currentLoaderData) {\n  for (let index = 0; index < results.length; index++) {\n    let result = results[index];\n    let match = matchesToLoad[index];\n    // If we don't have a match, then we can have a deferred result to do\n    // anything with.  This is for revalidating fetchers where the route was\n    // removed during HMR\n    if (!match) {\n      continue;\n    }\n    let currentMatch = currentMatches.find(m => m.route.id === match.route.id);\n    let isRevalidatingLoader = currentMatch != null && !isNewRouteInstance(currentMatch, match) && (currentLoaderData && currentLoaderData[match.route.id]) !== undefined;\n    if (isDeferredResult(result) && (isFetcher || isRevalidatingLoader)) {\n      // Note: we do not have to touch activeDeferreds here since we race them\n      // against the signal in resolveDeferredData and they'll get aborted\n      // there if needed\n      let signal = signals[index];\n      invariant(signal, \"Expected an AbortSignal for revalidating fetcher deferred result\");\n      await resolveDeferredData(result, signal, isFetcher).then(result => {\n        if (result) {\n          results[index] = result || results[index];\n        }\n      });\n    }\n  }\n}\nasync function resolveDeferredData(result, signal, unwrap) {\n  if (unwrap === void 0) {\n    unwrap = false;\n  }\n  let aborted = await result.deferredData.resolveData(signal);\n  if (aborted) {\n    return;\n  }\n  if (unwrap) {\n    try {\n      return {\n        type: ResultType.data,\n        data: result.deferredData.unwrappedData\n      };\n    } catch (e) {\n      // Handle any TrackedPromise._error values encountered while unwrapping\n      return {\n        type: ResultType.error,\n        error: e\n      };\n    }\n  }\n  return {\n    type: ResultType.data,\n    data: result.deferredData.data\n  };\n}\nfunction hasNakedIndexQuery(search) {\n  return new URLSearchParams(search).getAll(\"index\").some(v => v === \"\");\n}\nfunction getTargetMatch(matches, location) {\n  let search = typeof location === \"string\" ? parsePath(location).search : location.search;\n  if (matches[matches.length - 1].route.index && hasNakedIndexQuery(search || \"\")) {\n    // Return the leaf index route when index is present\n    return matches[matches.length - 1];\n  }\n  // Otherwise grab the deepest \"path contributing\" match (ignoring index and\n  // pathless layout routes)\n  let pathMatches = getPathContributingMatches(matches);\n  return pathMatches[pathMatches.length - 1];\n}\nfunction getSubmissionFromNavigation(navigation) {\n  let {\n    formMethod,\n    formAction,\n    formEncType,\n    text,\n    formData,\n    json\n  } = navigation;\n  if (!formMethod || !formAction || !formEncType) {\n    return;\n  }\n  if (text != null) {\n    return {\n      formMethod,\n      formAction,\n      formEncType,\n      formData: undefined,\n      json: undefined,\n      text\n    };\n  } else if (formData != null) {\n    return {\n      formMethod,\n      formAction,\n      formEncType,\n      formData,\n      json: undefined,\n      text: undefined\n    };\n  } else if (json !== undefined) {\n    return {\n      formMethod,\n      formAction,\n      formEncType,\n      formData: undefined,\n      json,\n      text: undefined\n    };\n  }\n}\nfunction getLoadingNavigation(location, submission) {\n  if (submission) {\n    let navigation = {\n      state: \"loading\",\n      location,\n      formMethod: submission.formMethod,\n      formAction: submission.formAction,\n      formEncType: submission.formEncType,\n      formData: submission.formData,\n      json: submission.json,\n      text: submission.text\n    };\n    return navigation;\n  } else {\n    let navigation = {\n      state: \"loading\",\n      location,\n      formMethod: undefined,\n      formAction: undefined,\n      formEncType: undefined,\n      formData: undefined,\n      json: undefined,\n      text: undefined\n    };\n    return navigation;\n  }\n}\nfunction getSubmittingNavigation(location, submission) {\n  let navigation = {\n    state: \"submitting\",\n    location,\n    formMethod: submission.formMethod,\n    formAction: submission.formAction,\n    formEncType: submission.formEncType,\n    formData: submission.formData,\n    json: submission.json,\n    text: submission.text\n  };\n  return navigation;\n}\nfunction getLoadingFetcher(submission, data) {\n  if (submission) {\n    let fetcher = {\n      state: \"loading\",\n      formMethod: submission.formMethod,\n      formAction: submission.formAction,\n      formEncType: submission.formEncType,\n      formData: submission.formData,\n      json: submission.json,\n      text: submission.text,\n      data\n    };\n    return fetcher;\n  } else {\n    let fetcher = {\n      state: \"loading\",\n      formMethod: undefined,\n      formAction: undefined,\n      formEncType: undefined,\n      formData: undefined,\n      json: undefined,\n      text: undefined,\n      data\n    };\n    return fetcher;\n  }\n}\nfunction getSubmittingFetcher(submission, existingFetcher) {\n  let fetcher = {\n    state: \"submitting\",\n    formMethod: submission.formMethod,\n    formAction: submission.formAction,\n    formEncType: submission.formEncType,\n    formData: submission.formData,\n    json: submission.json,\n    text: submission.text,\n    data: existingFetcher ? existingFetcher.data : undefined\n  };\n  return fetcher;\n}\nfunction getDoneFetcher(data) {\n  let fetcher = {\n    state: \"idle\",\n    formMethod: undefined,\n    formAction: undefined,\n    formEncType: undefined,\n    formData: undefined,\n    json: undefined,\n    text: undefined,\n    data\n  };\n  return fetcher;\n}\nfunction restoreAppliedTransitions(_window, transitions) {\n  try {\n    let sessionPositions = _window.sessionStorage.getItem(TRANSITIONS_STORAGE_KEY);\n    if (sessionPositions) {\n      let json = JSON.parse(sessionPositions);\n      for (let [k, v] of Object.entries(json || {})) {\n        if (v && Array.isArray(v)) {\n          transitions.set(k, new Set(v || []));\n        }\n      }\n    }\n  } catch (e) {\n    // no-op, use default empty object\n  }\n}\nfunction persistAppliedTransitions(_window, transitions) {\n  if (transitions.size > 0) {\n    let json = {};\n    for (let [k, v] of transitions) {\n      json[k] = [...v];\n    }\n    try {\n      _window.sessionStorage.setItem(TRANSITIONS_STORAGE_KEY, JSON.stringify(json));\n    } catch (error) {\n      warning(false, \"Failed to save applied view transitions in sessionStorage (\" + error + \").\");\n    }\n  }\n}\n//#endregion\n\nexport { AbortedDeferredError, Action, IDLE_BLOCKER, IDLE_FETCHER, IDLE_NAVIGATION, UNSAFE_DEFERRED_SYMBOL, DeferredData as UNSAFE_DeferredData, ErrorResponseImpl as UNSAFE_ErrorResponseImpl, convertRouteMatchToUiMatch as UNSAFE_convertRouteMatchToUiMatch, convertRoutesToDataRoutes as UNSAFE_convertRoutesToDataRoutes, getPathContributingMatches as UNSAFE_getPathContributingMatches, invariant as UNSAFE_invariant, warning as UNSAFE_warning, createBrowserHistory, createHashHistory, createMemoryHistory, createPath, createRouter, createStaticHandler, defer, generatePath, getStaticContextFromError, getToPathname, isDeferredData, isRouteErrorResponse, joinPaths, json, matchPath, matchRoutes, normalizePathname, parsePath, redirect, redirectDocument, resolvePath, resolveTo, stripBasename };\n//# sourceMappingURL=router.js.map\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}